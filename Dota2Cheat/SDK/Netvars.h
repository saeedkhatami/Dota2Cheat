#pragma once
#include <cstdint>
namespace Netvars {
	namespace C_DOTA_BaseNPC_Hero {
		constexpr uint32_t m_bBuybackDisabled = 0x0; // bitfield:1
		constexpr uint32_t m_iCurrentXP = 0x1810; // int32
		constexpr uint32_t m_iAbilityPoints = 0x1814; // int32
		constexpr uint32_t m_iTotalAbilityPoints = 0x1818; // int32
		constexpr uint32_t m_flRespawnTime = 0x181c; // GameTime_t
		constexpr uint32_t m_flRespawnTimePenalty = 0x1820; // float32
		constexpr uint32_t m_flStrength = 0x1824; // float32
		constexpr uint32_t m_flAgility = 0x1828; // float32
		constexpr uint32_t m_flIntellect = 0x182c; // float32
		constexpr uint32_t m_flStrengthTotal = 0x1830; // float32
		constexpr uint32_t m_flAgilityTotal = 0x1834; // float32
		constexpr uint32_t m_flIntellectTotal = 0x1838; // float32
		constexpr uint32_t m_hFacetAbilities = 0x1840; // C_NetworkUtlVectorBase< CHandle< C_BaseEntity > >
		constexpr uint32_t m_iRecentDamage = 0x1858; // int32
		constexpr uint32_t m_fPainFactor = 0x185c; // float32
		constexpr uint32_t m_fTargetPainFactor = 0x1860; // float32
		constexpr uint32_t m_bLifeState = 0x1864; // bool
		constexpr uint32_t m_bFirstSpawn = 0x1865; // bool
		constexpr uint32_t m_nFXStunIndex = 0x1868; // ParticleIndex_t
		constexpr uint32_t m_nFXSilenceIndex = 0x186c; // ParticleIndex_t
		constexpr uint32_t m_nFXDeathIndex = 0x1870; // ParticleIndex_t
		constexpr uint32_t m_iPlayerID = 0x1898; // PlayerID_t
		constexpr uint32_t m_iHeroFacetID = 0x189c; // HeroFacetID_t
		constexpr uint32_t m_hReplicatingOtherHeroModel = 0x18a0; // CHandle< C_DOTA_BaseNPC_Hero >
		constexpr uint32_t m_bReincarnating = 0x18a4; // bool
		constexpr uint32_t m_bCustomKillEffect = 0x18a5; // bool
		constexpr uint32_t m_flSpawnedAt = 0x18a8; // GameTime_t
		constexpr uint32_t m_bScriptDisableRespawns = 0x18ac; // bool
		constexpr uint32_t m_iPrimaryAttribute = 0x18b0; // int32
		constexpr uint32_t m_nLastDrawnHealth = 0x18b4; // int32
		constexpr uint32_t m_flHurtAmount = 0x18b8; // float32
		constexpr uint32_t m_flLastHurtTime = 0x18bc; // GameTime_t
		constexpr uint32_t m_flHurtDecayRate = 0x18c0; // float32
		constexpr uint32_t m_flLastHealTime = 0x18c4; // GameTime_t
		constexpr uint32_t m_flLastTreeShakeTime = 0x18c8; // GameTime_t
		constexpr uint32_t m_CenterOnHeroCooldownTimer = 0x18d0; // CountdownTimer
		constexpr uint32_t m_CombinedModels = 0x1af0; // CStrongHandle< InfoForResourceTypeCModel >[4]
		constexpr uint32_t m_nCurrentCombinedModelIndex = 0x1b10; // int32
		constexpr uint32_t m_nPendingCombinedModelIndex = 0x1b14; // int32
		constexpr uint32_t m_iHeroID = 0x1b18; // HeroID_t
		constexpr uint32_t m_flCheckLegacyItemsAt = 0x1b1c; // float32
		constexpr uint32_t m_bDisplayAdditionalHeroes = 0x1b20; // bool
		constexpr uint32_t m_CombinedParticleModels = 0x1b30; // CStrongHandle< InfoForResourceTypeCModel >[4]
		constexpr uint32_t m_vecAttachedParticleIndeces = 0x1b50; // CUtlVector< ParticleIndex_t >
		constexpr uint32_t m_hPets = 0x1b68; // CUtlVector< CHandle< C_BaseEntity > >
		constexpr uint32_t m_nKillStreakFX = 0x1b80; // ParticleIndex_t
		constexpr uint32_t m_nKillStreakFXTier = 0x1b84; // int32
	}
	namespace CEntityIdentity {
		constexpr uint32_t m_nameStringableIndex = 0x14; // int32
		constexpr uint32_t m_name = 0x18; // CUtlSymbolLarge
		constexpr uint32_t m_designerName = 0x20; // CUtlSymbolLarge
		constexpr uint32_t m_flags = 0x30; // uint32
		constexpr uint32_t m_worldGroupId = 0x38; // WorldGroupId_t
		constexpr uint32_t m_fDataObjectTypes = 0x3c; // uint32
		constexpr uint32_t m_PathIndex = 0x40; // ChangeAccessorFieldPathIndex_t
		constexpr uint32_t m_pPrev = 0x58; // CEntityIdentity*
		constexpr uint32_t m_pNext = 0x60; // CEntityIdentity*
		constexpr uint32_t m_pPrevByClass = 0x68; // CEntityIdentity*
		constexpr uint32_t m_pNextByClass = 0x70; // CEntityIdentity*
	}
	namespace C_BaseEntity {
		constexpr uint32_t m_CBodyComponent = 0x38; // CBodyComponent*
		constexpr uint32_t m_NetworkTransmitComponent = 0x40; // CNetworkTransmitComponent
		constexpr uint32_t m_nLastThinkTick = 0x300; // GameTick_t
		constexpr uint32_t m_pGameSceneNode = 0x308; // CGameSceneNode*
		constexpr uint32_t m_pRenderComponent = 0x310; // CRenderComponent*
		constexpr uint32_t m_pCollision = 0x318; // CCollisionProperty*
		constexpr uint32_t m_iMaxHealth = 0x320; // int32
		constexpr uint32_t m_iHealth = 0x324; // int32
		constexpr uint32_t m_lifeState = 0x328; // uint8
		constexpr uint32_t m_takedamage = 0x329; // DamageOptions_t
		constexpr uint32_t m_bTakesDamage = 0x32a; // bool
		constexpr uint32_t m_nTakeDamageFlags = 0x330; // TakeDamageFlags_t
		constexpr uint32_t m_nPlatformType = 0x338; // EntityPlatformTypes_t
		constexpr uint32_t m_ubInterpolationFrame = 0x339; // uint8
		constexpr uint32_t m_hSceneObjectController = 0x33c; // CHandle< C_BaseEntity >
		constexpr uint32_t m_nNoInterpolationTick = 0x340; // int32
		constexpr uint32_t m_nVisibilityNoInterpolationTick = 0x344; // int32
		constexpr uint32_t m_flProxyRandomValue = 0x348; // float32
		constexpr uint32_t m_iEFlags = 0x34c; // int32
		constexpr uint32_t m_nWaterType = 0x350; // uint8
		constexpr uint32_t m_bInterpolateEvenWithNoModel = 0x351; // bool
		constexpr uint32_t m_bPredictionEligible = 0x352; // bool
		constexpr uint32_t m_bApplyLayerMatchIDToModel = 0x353; // bool
		constexpr uint32_t m_tokLayerMatchID = 0x354; // CUtlStringToken
		constexpr uint32_t m_nSubclassID = 0x358; // CUtlStringToken
		constexpr uint32_t m_nSimulationTick = 0x368; // int32
		constexpr uint32_t m_iCurrentThinkContext = 0x36c; // int32
		constexpr uint32_t m_aThinkFunctions = 0x370; // CUtlVector< thinkfunc_t >
		constexpr uint32_t m_bDisabledContextThinks = 0x388; // bool
		constexpr uint32_t m_flAnimTime = 0x38c; // float32
		constexpr uint32_t m_flSimulationTime = 0x390; // float32
		constexpr uint32_t m_nSceneObjectOverrideFlags = 0x394; // uint8
		constexpr uint32_t m_bHasSuccessfullyInterpolated = 0x395; // bool
		constexpr uint32_t m_bHasAddedVarsToInterpolation = 0x396; // bool
		constexpr uint32_t m_bRenderEvenWhenNotSuccessfullyInterpolated = 0x397; // bool
		constexpr uint32_t m_nInterpolationLatchDirtyFlags = 0x398; // int32[2]
		constexpr uint32_t m_ListEntry = 0x3a0; // uint16[11]
		constexpr uint32_t m_flCreateTime = 0x3b8; // GameTime_t
		constexpr uint32_t m_flSpeed = 0x3bc; // float32
		constexpr uint32_t m_EntClientFlags = 0x3c0; // uint16
		constexpr uint32_t m_bClientSideRagdoll = 0x3c2; // bool
		constexpr uint32_t m_iTeamNum = 0x3c3; // uint8
		constexpr uint32_t m_spawnflags = 0x3c4; // uint32
		constexpr uint32_t m_nNextThinkTick = 0x3c8; // GameTick_t
		constexpr uint32_t m_fFlags = 0x3cc; // uint32
		constexpr uint32_t m_vecAbsVelocity = 0x3d0; // Vector
		constexpr uint32_t m_vecVelocity = 0x3e0; // CNetworkVelocityVector
		constexpr uint32_t m_hEffectEntity = 0x410; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hOwnerEntity = 0x414; // CHandle< C_BaseEntity >
		constexpr uint32_t m_MoveCollide = 0x418; // MoveCollide_t
		constexpr uint32_t m_MoveType = 0x419; // MoveType_t
		constexpr uint32_t m_nActualMoveType = 0x41a; // MoveType_t
		constexpr uint32_t m_flWaterLevel = 0x41c; // float32
		constexpr uint32_t m_fEffects = 0x420; // uint32
		constexpr uint32_t m_hGroundEntity = 0x424; // CHandle< C_BaseEntity >
		constexpr uint32_t m_nGroundBodyIndex = 0x428; // int32
		constexpr uint32_t m_flFriction = 0x42c; // float32
		constexpr uint32_t m_flElasticity = 0x430; // float32
		constexpr uint32_t m_flGravityScale = 0x434; // float32
		constexpr uint32_t m_flTimeScale = 0x438; // float32
		constexpr uint32_t m_bAnimatedEveryTick = 0x43c; // bool
		constexpr uint32_t m_flNavIgnoreUntilTime = 0x440; // GameTime_t
		constexpr uint32_t m_hThink = 0x444; // uint16
		constexpr uint32_t m_fBBoxVisFlags = 0x450; // uint8
		constexpr uint32_t m_bPredictable = 0x451; // bool
		constexpr uint32_t m_bRenderWithViewModels = 0x452; // bool
		constexpr uint32_t m_nSplitUserPlayerPredictionSlot = 0x454; // CSplitScreenSlot
		constexpr uint32_t m_nFirstPredictableCommand = 0x458; // int32
		constexpr uint32_t m_nLastPredictableCommand = 0x45c; // int32
		constexpr uint32_t m_hOldMoveParent = 0x460; // CHandle< C_BaseEntity >
		constexpr uint32_t m_Particles = 0x468; // CParticleProperty
		constexpr uint32_t m_vecPredictedScriptFloats = 0x490; // CUtlVector< float32 >
		constexpr uint32_t m_vecPredictedScriptFloatIDs = 0x4a8; // CUtlVector< int32 >
		constexpr uint32_t m_nNextScriptVarRecordID = 0x4d8; // int32
		constexpr uint32_t m_vecAngVelocity = 0x4e8; // QAngle
		constexpr uint32_t m_DataChangeEventRef = 0x4f4; // int32
		constexpr uint32_t m_dependencies = 0x4f8; // CUtlVector< CEntityHandle >
		constexpr uint32_t m_nCreationTick = 0x510; // int32
		constexpr uint32_t m_bAnimTimeChanged = 0x51d; // bool
		constexpr uint32_t m_bSimulationTimeChanged = 0x51e; // bool
		constexpr uint32_t m_sUniqueHammerID = 0x528; // CUtlString
		constexpr uint32_t m_nBloodType = 0x530; // BloodType
	}
	namespace C_EconEntity {
		constexpr uint32_t m_AttributeManager = 0x998; // CAttributeContainer
		constexpr uint32_t m_bClientside = 0xac0; // bool
		constexpr uint32_t m_nDisableMode = 0xac4; // EconEntityParticleDisableMode_t
		constexpr uint32_t m_bParticleSystemsCreated = 0xac8; // bool
		constexpr uint32_t m_bForceDestroyAttachedParticlesImmediately = 0xac9; // bool
		constexpr uint32_t m_vecAttachedParticles = 0xad0; // CUtlVector< C_EconEntity::AttachedParticleInfo_t >
		constexpr uint32_t m_hViewmodelAttachment = 0xae8; // CHandle< CBaseAnimatingActivity >
		constexpr uint32_t m_iOldTeam = 0xaec; // int32
		constexpr uint32_t m_bAttachmentDirty = 0xaf0; // bool
		constexpr uint32_t m_iOldStyle = 0xaf1; // style_index_t
		constexpr uint32_t m_hOldProvidee = 0xaf4; // CHandle< C_BaseEntity >
		constexpr uint32_t m_vecAttachedModels = 0xaf8; // CUtlVector< C_EconEntity::AttachedModelData_t >
	}
	namespace C_DOTA_Item {
		constexpr uint32_t m_CastAnimation = 0x5d8; // int32
		constexpr uint32_t m_bCombinable = 0x5dc; // bool
		constexpr uint32_t m_bPermanent = 0x5dd; // bool
		constexpr uint32_t m_bStackable = 0x5de; // bool
		constexpr uint32_t m_iStackableMax = 0x5e0; // int32
		constexpr uint32_t m_bRecipe = 0x5e4; // bool
		constexpr uint32_t m_bRecipeConsumesCharges = 0x5e5; // bool
		constexpr uint32_t m_iSharability = 0x5e8; // int32
		constexpr uint32_t m_bDroppable = 0x5ec; // bool
		constexpr uint32_t m_bPurchasable = 0x5ed; // bool
		constexpr uint32_t m_bSellable = 0x5ee; // bool
		constexpr uint32_t m_bInitiallySellable = 0x5ef; // bool
		constexpr uint32_t m_bForceUnsellable = 0x5f0; // bool
		constexpr uint32_t m_bRequiresCharges = 0x5f1; // bool
		constexpr uint32_t m_bDisplayCharges = 0x5f2; // bool
		constexpr uint32_t m_bHideCharges = 0x5f3; // bool
		constexpr uint32_t m_bKillable = 0x5f4; // bool
		constexpr uint32_t m_bGloballyCombinable = 0x5f5; // bool
		constexpr uint32_t m_bDisassemblable = 0x5f6; // bool
		constexpr uint32_t m_bNeverDisassemble = 0x5f7; // bool
		constexpr uint32_t m_bIsNeutralDrop = 0x5f8; // bool
		constexpr uint32_t m_nNeutralDropTeam = 0x5fc; // int32
		constexpr uint32_t m_bAlertable = 0x600; // bool
		constexpr uint32_t m_iInitialCharges = 0x604; // int32
		constexpr uint32_t m_bCastOnPickup = 0x608; // bool
		constexpr uint32_t m_bOnlyPlayerHeroPickup = 0x609; // bool
		constexpr uint32_t m_bCreepHeroPickup = 0x60a; // bool
		constexpr uint32_t m_bCanBeConsumed = 0x60b; // bool
		constexpr uint32_t m_iValuelessCharges = 0x60c; // int32
		constexpr uint32_t m_iCurrentCharges = 0x610; // int32
		constexpr uint32_t m_iSecondaryCharges = 0x614; // int32
		constexpr uint32_t m_iMaxCharges = 0x618; // int32
		constexpr uint32_t m_bCombineLocked = 0x61c; // bool
		constexpr uint32_t m_flPurchaseTime = 0x620; // GameTime_t
		constexpr uint32_t m_flAssembledTime = 0x624; // GameTime_t
		constexpr uint32_t m_bPurchasedWhileDead = 0x628; // bool
		constexpr uint32_t m_bCanBeUsedOutOfInventory = 0x629; // bool
		constexpr uint32_t m_bItemEnabled = 0x62a; // bool
		constexpr uint32_t m_flEnableTime = 0x62c; // GameTime_t
		constexpr uint32_t m_flReclaimTime = 0x630; // GameTime_t
		constexpr uint32_t m_bDisplayOwnership = 0x634; // bool
		constexpr uint32_t m_bShowOnMinimap = 0x635; // bool
		constexpr uint32_t m_flMinimapIconSize = 0x638; // float32
		constexpr uint32_t m_bIsUpgradeable = 0x63c; // bool
		constexpr uint32_t m_nUpgradeProgress = 0x640; // int32
		constexpr uint32_t m_nUpgradeGoal = 0x644; // int32
		constexpr uint32_t m_hOldOwnerEntity = 0x648; // CHandle< C_BaseEntity >
		constexpr uint32_t m_iOldCharges = 0x64c; // int32
		constexpr uint32_t m_iPlayerOwnerID = 0x650; // PlayerID_t
		constexpr uint32_t m_vecPreGameTransferPlayerIDs = 0x658; // C_NetworkUtlVectorBase< uint8 >
	}
	namespace PlayerResourcePlayerData_t {
		constexpr uint32_t m_bIsValid = 0x30; // bool
		constexpr uint32_t m_iszPlayerName = 0x38; // CUtlSymbolLarge
		constexpr uint32_t m_iPlayerTeam = 0x40; // int32
		constexpr uint32_t m_bFullyJoinedServer = 0x44; // bool
		constexpr uint32_t m_bFakeClient = 0x45; // bool
		constexpr uint32_t m_bIsBroadcaster = 0x46; // bool
		constexpr uint32_t m_iBroadcasterChannel = 0x48; // uint32
		constexpr uint32_t m_iBroadcasterChannelSlot = 0x4c; // uint32
		constexpr uint32_t m_bIsBroadcasterChannelCameraman = 0x50; // bool
		constexpr uint32_t m_iConnectionState = 0x54; // int32
		constexpr uint32_t m_iPlayerSteamID = 0x58; // uint64
		constexpr uint32_t m_eCoachTeam = 0x60; // DOTATeam_t
		constexpr uint32_t m_vecPrivateCoachPlayerIDs = 0x68; // C_NetworkUtlVectorBase< PlayerID_t >
		constexpr uint32_t m_unCoachRating = 0x80; // uint32
		constexpr uint32_t m_eLiveSpectatorTeam = 0x84; // DOTATeam_t
		constexpr uint32_t m_nLiveSpectatorSpectatedHeroIndex = 0x88; // int32
		constexpr uint32_t m_bIsPlusSubscriber = 0x8c; // bool
		constexpr uint32_t m_bWasMVPLastGame = 0x8d; // bool
		constexpr uint32_t m_nCavernCrawlMapVariant = 0x8e; // CavernCrawlMapVariant_t
		constexpr uint32_t m_eAccoladeType = 0x90; // int32[3]
		constexpr uint32_t m_unAccoladeData = 0xa0; // uint64[3]
		constexpr uint32_t m_iRankTier = 0xb8; // int32
		constexpr uint32_t m_iLeaderboardRank = 0xbc; // int32
		constexpr uint32_t m_eMmrBoostType = 0xc0; // int32
		constexpr uint32_t m_iTitle = 0xc4; // int32
		constexpr uint32_t m_unFavTeamPacked = 0xc8; // uint64
		constexpr uint32_t m_nPlayerSlot = 0xd0; // CPlayerSlot
		constexpr uint32_t m_bIsBot = 0xd4; // bool
		constexpr uint32_t m_bHasNeutralTier = 0xd5; // bool[5]
		constexpr uint32_t m_bHasRedeemedNeutralTier = 0xda; // bool[5]
		constexpr uint32_t m_nCommLevel = 0xe0; // int32
		constexpr uint32_t m_nBehaviorLevel = 0xe4; // int32
		constexpr uint32_t m_flLastCommsTime = 0xe8; // float32
	}
	namespace C_DOTABaseAbility {
		constexpr uint32_t m_bAuxCastState = 0x540; // bool
		constexpr uint32_t m_iEnemyLevel = 0x544; // int32
		constexpr uint32_t m_iMaxLevel = 0x548; // int32
		constexpr uint32_t m_iRequiredLevel = 0x54c; // int32
		constexpr uint32_t m_iLevelsBetweenUpgrades = 0x550; // int32
		constexpr uint32_t m_bCanLearn = 0x554; // bool
		constexpr uint32_t m_flUpgradeBlend = 0x558; // float32
		constexpr uint32_t m_bUpgradedDuringQuickcastPreview = 0x55c; // bool
		constexpr uint32_t m_bConsiderOvershootInGetCastRange = 0x55d; // bool
		constexpr uint32_t m_bRefCountsModifiers = 0x55e; // bool
		constexpr uint32_t m_bHidden = 0x55f; // bool
		constexpr uint32_t m_bOldHidden = 0x560; // bool
		constexpr uint32_t m_bActivated = 0x561; // bool
		constexpr uint32_t m_bOldActivated = 0x562; // bool
		constexpr uint32_t m_nAbilityBarType = 0x564; // AbilityBarType_t
		constexpr uint32_t m_iDirtyButtons = 0x568; // int32
		constexpr uint32_t m_bPerformDirtyParity = 0x56c; // bool
		constexpr uint32_t m_iLevel = 0x570; // int32
		constexpr uint32_t m_bAbilityLevelDirty = 0x574; // bool
		constexpr uint32_t m_bToggleState = 0x575; // bool
		constexpr uint32_t m_flAbilityMuteDuration = 0x578; // float32
		constexpr uint32_t m_bInAbilityPhase = 0x57c; // bool
		constexpr uint32_t m_fCooldown = 0x580; // float32
		constexpr uint32_t m_flCooldownLength = 0x584; // float32
		constexpr uint32_t m_iManaCost = 0x588; // int32
		constexpr uint32_t m_bAutoCastState = 0x58c; // bool
		constexpr uint32_t m_bAltCastState = 0x58d; // bool
		constexpr uint32_t m_flChannelStartTime = 0x590; // GameTime_t
		constexpr uint32_t m_flCastStartTime = 0x594; // GameTime_t
		constexpr uint32_t m_bInIndefiniteCooldown = 0x598; // bool
		constexpr uint32_t m_bFrozenCooldown = 0x599; // bool
		constexpr uint32_t m_flOverrideCastPoint = 0x59c; // float32
		constexpr uint32_t m_bStolen = 0x5a0; // bool
		constexpr uint32_t m_bStealable = 0x5a1; // bool
		constexpr uint32_t m_bReplicated = 0x5a2; // bool
		constexpr uint32_t m_nAbilityCurrentCharges = 0x5a4; // int32
		constexpr uint32_t m_fAbilityChargeRestoreTimeRemaining = 0x5a8; // float32
		constexpr uint32_t m_bUpgradeRecommended = 0x5ac; // bool
		constexpr uint32_t m_nMaxLevelOverride = 0x5b0; // int32
		constexpr uint32_t m_nRequiredLevelOverride = 0x5b4; // int32
		constexpr uint32_t m_nLevelsBetweenUpgradesOverride = 0x5b8; // int32
		constexpr uint32_t m_nHeroFacetKey = 0x5c0; // HeroFacetKey_t
		constexpr uint32_t m_flTotalExtendedChannelTime = 0x5c8; // float32
		constexpr uint32_t m_bGrantedByFacet = 0x5cc; // bool
		constexpr uint32_t m_flLastCastClickTime = 0x5d0; // float32
	}
	namespace C_DOTA_Item_PowerTreads {
		constexpr uint32_t m_iStat = 0x678; // int32
	}
	namespace C_DOTA_BaseNPC {
		constexpr uint32_t m_bIsPhantom = 0xa48; // bool
		constexpr uint32_t m_iUnitType = 0xa4c; // uint32
		constexpr uint32_t m_bSelectionRingVisible = 0xa60; // bool
		constexpr uint32_t m_iCurrentLevel = 0xa64; // int32
		constexpr uint32_t m_bIsAncient = 0xa68; // bool
		constexpr uint32_t m_bIsBossCreature = 0xa69; // bool
		constexpr uint32_t m_bStolenScepter = 0xa6a; // bool
		constexpr uint32_t m_bIsNeutralUnitType = 0xa6b; // bool
		constexpr uint32_t m_bSelectOnSpawn = 0xa6c; // bool
		constexpr uint32_t m_bCachedReplicatedMorphlingIllusion = 0xa6d; // bool
		constexpr uint32_t m_bIgnoreAddSummonedToSelection = 0xa6e; // bool
		constexpr uint32_t m_bConsideredHero = 0xa6f; // bool
		constexpr uint32_t m_bUsesConstantGesture = 0xa70; // bool
		constexpr uint32_t m_bUseHeroAbilityNumbers = 0xa71; // bool
		constexpr uint32_t m_bHasSharedAbilities = 0xa72; // bool
		constexpr uint32_t m_bIsSummoned = 0xa73; // bool
		constexpr uint32_t m_bCanBeDominated = 0xa74; // bool
		constexpr uint32_t m_bHasUpgradeableAbilities = 0xa75; // bool
		constexpr uint32_t m_flHealthThinkRegen = 0xa78; // float32
		constexpr uint32_t m_iIsControllableByPlayer64 = 0xa80; // uint64
		constexpr uint32_t m_nHealthBarOffsetOverride = 0xa88; // int32
		constexpr uint32_t m_bCanRespawn = 0xa8c; // bool
		constexpr uint32_t m_iAttackRange = 0xa90; // int32
		constexpr uint32_t m_bIsClone = 0xa94; // bool
		constexpr uint32_t m_colorGemColor = 0xa95; // Color
		constexpr uint32_t m_bHasColorGem = 0xa99; // bool
		constexpr uint32_t m_nFXDeniableIndex = 0xa9c; // ParticleIndex_t
		constexpr uint32_t m_iMoveSpeed = 0xaa0; // int32
		constexpr uint32_t m_iBaseAttackSpeed = 0xaa4; // int32
		constexpr uint32_t m_flBaseAttackTime = 0xaa8; // float32
		constexpr uint32_t m_iUnitNameIndex = 0xaac; // int32
		constexpr uint32_t m_iHealthBarOffset = 0xab0; // int32
		constexpr uint32_t m_iHealthBarHighlightColor = 0xab4; // Color
		constexpr uint32_t m_flMana = 0xab8; // float32
		constexpr uint32_t m_flMaxMana = 0xabc; // float32
		constexpr uint32_t m_flManaThinkRegen = 0xac0; // float32
		constexpr uint32_t m_iBKBChargesUsed = 0xac4; // int32
		constexpr uint32_t m_iAeonChargesUsed = 0xac8; // int32
		constexpr uint32_t m_flRefresherUseTime = 0xacc; // GameTime_t
		constexpr uint32_t m_flRefresherLastCooldown = 0xad0; // float32
		constexpr uint32_t m_flLastDealtDamageTime = 0xad4; // GameTime_t
		constexpr uint32_t m_iBotDebugData = 0xad8; // int32
		constexpr uint32_t m_bIsIllusion = 0xadc; // bool
		constexpr uint32_t m_bHasClientSeenIllusionModifier = 0xadd; // bool
		constexpr uint32_t m_hAbilities = 0xae0; // CHandle< C_BaseEntity >[35]
		constexpr uint32_t m_flInvisibilityLevel = 0xb6c; // float32
		constexpr uint32_t m_flHullRadius = 0xb70; // float32
		constexpr uint32_t m_flCollisionPadding = 0xb74; // float32
		constexpr uint32_t m_flRingRadius = 0xb78; // float32
		constexpr uint32_t m_flProjectileCollisionSize = 0xb7c; // float32
		constexpr uint32_t m_iszUnitName = 0xb80; // CUtlSymbolLarge
		constexpr uint32_t m_iszUnitNameIconOverride = 0xb88; // CUtlSymbolLarge
		constexpr uint32_t m_iszParticleFolder = 0xb90; // CUtlSymbolLarge
		constexpr uint32_t m_iszSoundSet = 0xb98; // CUtlSymbolLarge
		constexpr uint32_t m_iszSelectionGroup = 0xba0; // CUtlSymbolLarge
		constexpr uint32_t m_iszVoiceFile = 0xba8; // CUtlSymbolLarge
		constexpr uint32_t m_iszGameSoundsFile = 0xbb0; // CUtlSymbolLarge
		constexpr uint32_t m_iszVoiceBackgroundSound = 0xbb8; // CUtlSymbolLarge
		constexpr uint32_t m_iszIdleSoundLoop = 0xbc0; // CUtlSymbolLarge
		constexpr uint32_t m_szUnitLabel = 0xbc8; // CUtlString
		constexpr uint32_t m_szScaleset = 0xbd0; // CUtlString
		constexpr uint32_t m_nUnitLabelIndex = 0xbd8; // uint8
		constexpr uint32_t m_strAnimationModifier = 0xbe0; // CUtlString
		constexpr uint32_t m_TerrainSpecificFootstepEffect = 0xbe8; // CUtlString
		constexpr uint32_t m_bUseCustomTerrainWeatherEffect = 0xbf0; // bool
		constexpr uint32_t m_bHasClientSoundReplacement = 0xbf1; // bool
		constexpr uint32_t m_bHasClientReplacementParticle = 0xbf2; // bool
		constexpr uint32_t m_bResourcesLoaded = 0xbfc; // bool
		constexpr uint32_t m_flTauntCooldown = 0xc00; // GameTime_t
		constexpr uint32_t m_flTauntCooldown2 = 0xc04; // GameTime_t
		constexpr uint32_t m_iCurShop = 0xc08; // DOTA_SHOP_TYPE
		constexpr uint32_t m_szCurShopEntName = 0xc10; // CUtlSymbolLarge
		constexpr uint32_t m_iDayTimeVisionRange = 0xc18; // int32
		constexpr uint32_t m_iNightTimeVisionRange = 0xc1c; // int32
		constexpr uint32_t m_iDamageMin = 0xc20; // int32
		constexpr uint32_t m_iDamageMax = 0xc24; // int32
		constexpr uint32_t m_iDamageBonus = 0xc28; // int32
		constexpr uint32_t m_iBaseDamageMin = 0xc2c; // int32
		constexpr uint32_t m_iBaseDamageMax = 0xc30; // int32
		constexpr uint32_t m_iTaggedAsVisibleByTeam = 0xc34; // int32
		constexpr uint32_t m_ModifierManager = 0xc38; // CDOTA_ModifierManager
		constexpr uint32_t m_Inventory = 0xf58; // C_DOTA_UnitInventory
		constexpr uint32_t m_nUnitState64 = 0x1030; // uint64
		constexpr uint32_t m_nUnitDebuffState = 0x1040; // uint64
		constexpr uint32_t m_bHasInventory = 0x1048; // bool
		constexpr uint32_t m_iAcquisitionRange = 0x104c; // int32
		constexpr uint32_t m_FoWViewID = 0x1050; // int32
		constexpr uint32_t m_iPrevHealthPct = 0x1054; // int32
		constexpr uint32_t m_iPrevLifeState = 0x1058; // int32
		constexpr uint32_t m_iPrevTeam = 0x105c; // int32
		constexpr uint32_t m_bPrevProvidesVision = 0x1060; // bool
		constexpr uint32_t m_nPrevControllableMask = 0x1068; // uint64
		constexpr uint32_t m_TagTime = 0x1078; // CountdownTimer
		constexpr uint32_t m_ClickedTime = 0x1090; // CountdownTimer
		constexpr uint32_t m_flIdleRunPoseStartTime = 0x10a8; // GameTime_t[2]
		constexpr uint32_t m_flIdleRunPoseDuration = 0x10b0; // float32[2]
		constexpr uint32_t m_bAnimationTransitionActive = 0x10b8; // bool
		constexpr uint32_t m_nAnimationTransitionPoseParameters = 0x10bc; // int32[2]
		constexpr uint32_t m_nAnimationTransitionInjuredPoseParameters = 0x10c4; // int32[2]
		constexpr uint32_t m_nAnimationTransitionAggressivePoseParameters = 0x10cc; // int32[2]
		constexpr uint32_t m_flTimeSinceLastAbilityNag = 0x1130; // GameTime_t
		constexpr uint32_t m_iAttackCapabilities = 0x1134; // int32
		constexpr uint32_t m_iSpecialAbility = 0x1138; // int32
		constexpr uint32_t m_iMoveCapabilities = 0x113c; // int32
		constexpr uint32_t m_nPlayerOwnerID = 0x1140; // PlayerID_t
		constexpr uint32_t m_flLastDamageTime = 0x1144; // GameTime_t
		constexpr uint32_t m_flLastAttackTime = 0x1148; // GameTime_t
		constexpr uint32_t m_iszMinimapIcon = 0x1150; // CUtlSymbolLarge
		constexpr uint32_t m_flMinimapIconSize = 0x1160; // float32
		constexpr uint32_t m_bMinimapDisableTint = 0x1164; // bool
		constexpr uint32_t m_bMinimapDisableRotation = 0x1165; // bool
		constexpr uint32_t m_colorHeroGlow = 0x1166; // Color
		constexpr uint32_t m_iNearShopMask = 0x116c; // int32
		constexpr uint32_t m_nPoseParameterTurn = 0x1170; // int32
		constexpr uint32_t m_nPoseParameterRun = 0x1174; // int32
		constexpr uint32_t m_flLean = 0x1178; // float32
		constexpr uint32_t m_flRun = 0x117c; // float32
		constexpr uint32_t m_anglediff = 0x1180; // int32
		constexpr uint32_t m_bInfoKeyActive = 0x1184; // bool
		constexpr uint32_t m_bNewUpdateAssetModifiersNetworked = 0x1185; // bool
		constexpr uint32_t m_nAssetModifiersLastUpdatedTick = 0x1188; // GameTick_t
		constexpr uint32_t m_bSuppressGlow = 0x118c; // bool
		constexpr uint32_t m_bWasSinking = 0x118d; // bool
		constexpr uint32_t m_flRangeDisplayDist = 0x1190; // float32
		constexpr uint32_t m_szDefaultIdle = 0x1378; // CUtlSymbolLarge
		constexpr uint32_t m_szDefaultRareIdle = 0x1380; // CUtlSymbolLarge
		constexpr uint32_t m_damagetimer = 0x1388; // CountdownTimer
		constexpr uint32_t m_vRenderOrigin = 0x13a0; // Vector
		constexpr uint32_t m_fZDelta = 0x13ac; // float32
		constexpr uint32_t m_flDeathTime = 0x13b0; // GameTime_t
		constexpr uint32_t m_bBaseStatsChanged = 0x13b4; // bool
		constexpr uint32_t m_bNeedsSoundEmitterRefresh = 0x13b5; // bool
		constexpr uint32_t m_flPhysicalArmorValue = 0x13b8; // float32
		constexpr uint32_t m_flMagicalResistanceValue = 0x13bc; // float32
		constexpr uint32_t m_nPrevSequenceParity = 0x13c0; // int32
		constexpr uint32_t m_flPrevInvisLevel = 0x1468; // float32
		constexpr uint32_t m_nOriginalModelIndex = 0x1470; // CStrongHandle< InfoForResourceTypeCModel >
		constexpr uint32_t m_nClientOriginalModelIndex = 0x1478; // CStrongHandle< InfoForResourceTypeCModel >
		constexpr uint32_t m_nClientReplacementModelIndex = 0x1480; // CStrongHandle< InfoForResourceTypeCModel >
		constexpr uint32_t m_bClientReplacementModelNeedsRebuild = 0x1488; // bool
		constexpr uint32_t m_nClientReplacementModelReloadCount = 0x148c; // int32
		constexpr uint32_t m_nUnitModelVariant = 0x1490; // int8
		constexpr uint32_t m_nUnitModelVariantCount = 0x1491; // int8
		constexpr uint32_t m_iPrevSequence = 0x1494; // int32
		constexpr uint32_t m_pLastWeatherEffectName = 0x1498; // char*
		constexpr uint32_t m_VoiceBackgroundSoundTimer = 0x14a8; // CountdownTimer
		constexpr uint32_t m_bIsWaitingToSpawn = 0x14c0; // bool
		constexpr uint32_t m_nTotalDamageTaken = 0x14c8; // int64
		constexpr uint32_t m_flManaRegen = 0x14d0; // float32
		constexpr uint32_t m_flHealthRegen = 0x14d4; // float32
		constexpr uint32_t m_bIsMoving = 0x14d8; // bool
		constexpr uint32_t m_fRevealRadius = 0x14dc; // float32
		constexpr uint32_t m_bCanUseWards = 0x14e0; // bool
		constexpr uint32_t m_bCanUseAllItems = 0x14e1; // bool
		constexpr uint32_t m_iXPBounty = 0x14e4; // int32
		constexpr uint32_t m_iXPBountyExtra = 0x14e8; // int32
		constexpr uint32_t m_iGoldBountyMin = 0x14ec; // int32
		constexpr uint32_t m_iGoldBountyMax = 0x14f0; // int32
		constexpr uint32_t m_hOwnerNPC = 0x14f4; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hGoalEntity = 0x14f8; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hNeutralSpawner = 0x14fc; // CHandle< C_DOTA_NeutralSpawner >
		constexpr uint32_t m_hClientOverrideMaterial = 0x1500; // CStrongHandle< InfoForResourceTypeIMaterial2 >
		constexpr uint32_t m_bCombinerMaterialOverrideListChanged = 0x1508; // bool
		constexpr uint32_t m_nBaseModelMeshCount = 0x150c; // int32
		constexpr uint32_t m_combinerMaterialOverrideList = 0x1510; // CUtlVector< CStrongHandleCopyable< InfoForResourceTypeIMaterial2 > >
		constexpr uint32_t m_nArcanaLevel = 0x1528; // int8
		constexpr uint32_t m_nDefaultArcanaLevel = 0x1529; // int8
		constexpr uint32_t m_defaultColorGemColor = 0x152a; // Color
		constexpr uint32_t m_bHasBuiltWearableSpawnList = 0x1548; // bool
		constexpr uint32_t m_bHasCostume = 0x1549; // bool
		constexpr uint32_t m_bRecreateParticleSystemsOnModifiersChange = 0x154a; // bool
		constexpr uint32_t m_flAdditionalSinkDelay = 0x1564; // float32
		constexpr uint32_t m_NetworkActivity = 0x1648; // int32
		constexpr uint32_t m_PrevNetworkActivity = 0x164c; // int32
		constexpr uint32_t m_NetworkSequenceIndex = 0x1650; // int32
		constexpr uint32_t m_bShouldDoFlyHeightVisual = 0x1654; // bool
		constexpr uint32_t m_flStartSequenceCycle = 0x1658; // float32
		constexpr uint32_t m_ActivityModifiers = 0x1660; // CUtlVector< CUtlSymbol >
		constexpr uint32_t m_hBackgroundSceneEnt = 0x1678; // CHandle< C_SceneEntity >
		constexpr uint32_t m_hSpeakingSceneEnt = 0x167c; // CHandle< C_SceneEntity >
		constexpr uint32_t m_hOldWearables = 0x1690; // CUtlVector< CHandle< C_EconWearable > >
		constexpr uint32_t m_hOldWearableSkins = 0x16a8; // CUtlVector< CUtlStringToken >
		constexpr uint32_t m_CustomHealthLabel = 0x16c0; // char[256]
		constexpr uint32_t m_CustomHealthLabelColor = 0x17c0; // Color
		constexpr uint32_t m_nWearableDefIndex = 0x17c4; // item_definition_index_t
		constexpr uint32_t m_gibTintColor = 0x17c9; // Color
		constexpr uint32_t m_bForceMaterialCombine = 0x17cd; // bool
		constexpr uint32_t m_bShouldDrawParticlesWhileHidden = 0x17ce; // bool
		constexpr uint32_t m_bIsClientThinkPending = 0x17cf; // bool
		constexpr uint32_t m_bActivityModifiersDirty = 0x17d0; // bool
		constexpr uint32_t m_bUnitModelVariantChanged = 0x17d1; // bool
		constexpr uint32_t m_bWearablesAreTaunting = 0x17d2; // bool
		constexpr uint32_t m_bShowCannotBeDisabledIcon = 0x17e8; // bool
	}
	namespace CBasePlayerController {
		constexpr uint32_t m_nFinalPredictedTick = 0x540; // int32
		constexpr uint32_t m_CommandContext = 0x548; // C_CommandContext
		constexpr uint32_t m_nInButtonsWhichAreToggles = 0x5e8; // uint64
		constexpr uint32_t m_nTickBase = 0x5f0; // uint32
		constexpr uint32_t m_hPawn = 0x5f4; // CHandle< C_BasePlayerPawn >
		constexpr uint32_t m_bKnownTeamMismatch = 0x5f8; // bool
		constexpr uint32_t m_hPredictedPawn = 0x5fc; // CHandle< C_BasePlayerPawn >
		constexpr uint32_t m_nSplitScreenSlot = 0x600; // CSplitScreenSlot
		constexpr uint32_t m_hSplitOwner = 0x604; // CHandle< CBasePlayerController >
		constexpr uint32_t m_hSplitScreenPlayers = 0x608; // CUtlVector< CHandle< CBasePlayerController > >
		constexpr uint32_t m_bIsHLTV = 0x620; // bool
		constexpr uint32_t m_iConnected = 0x624; // PlayerConnectedState
		constexpr uint32_t m_iszPlayerName = 0x628; // char[128]
		constexpr uint32_t m_steamID = 0x6b0; // uint64
		constexpr uint32_t m_bIsLocalPlayerController = 0x6b8; // bool
		constexpr uint32_t m_iDesiredFOV = 0x6bc; // uint32
	}
	namespace CEntityInstance {
		constexpr uint32_t m_iszPrivateVScripts = 0x8; // CUtlSymbolLarge
		constexpr uint32_t m_pEntity = 0x10; // CEntityIdentity*
		constexpr uint32_t m_CScriptComponent = 0x28; // CScriptComponent*
		constexpr uint32_t m_bVisibleinPVS = 0x30; // bool
	}
	namespace C_NextBotCombatCharacter {
		constexpr uint32_t m_shadowTimer = 0xa10; // CountdownTimer
		constexpr uint32_t m_bInFrustum = 0xa28; // bool
		constexpr uint32_t m_nInFrustumFrame = 0xa2c; // int32
		constexpr uint32_t m_flFrustumDistanceSqr = 0xa30; // float32
		constexpr uint32_t m_nLod = 0xa34; // uint8
	}
	namespace C_BaseCombatCharacter {
		constexpr uint32_t m_hMyWearables = 0x988; // C_NetworkUtlVectorBase< CHandle< C_EconWearable > >
		constexpr uint32_t m_leftFootAttachment = 0x9a0; // AttachmentHandle_t
		constexpr uint32_t m_rightFootAttachment = 0x9a1; // AttachmentHandle_t
		constexpr uint32_t m_nWaterWakeMode = 0x9a4; // C_BaseCombatCharacter::WaterWakeMode_t
		constexpr uint32_t m_flWaterWorldZ = 0x9a8; // float32
		constexpr uint32_t m_flWaterNextTraceTime = 0x9ac; // float32
	}
	namespace C_BaseFlex {
		constexpr uint32_t m_flexWeight = 0x810; // C_NetworkUtlVectorBase< float32 >
		constexpr uint32_t m_vLookTargetPosition = 0x828; // Vector
		constexpr uint32_t m_blinktoggle = 0x840; // bool
		constexpr uint32_t m_nLastFlexUpdateFrameCount = 0x8a0; // int32
		constexpr uint32_t m_CachedViewTarget = 0x8a4; // Vector
		constexpr uint32_t m_nNextSceneEventId = 0x8b0; // SceneEventId_t
		constexpr uint32_t m_iBlink = 0x8b4; // int32
		constexpr uint32_t m_blinktime = 0x8b8; // float32
		constexpr uint32_t m_prevblinktoggle = 0x8bc; // bool
		constexpr uint32_t m_iMouthAttachment = 0x8bd; // AttachmentHandle_t
		constexpr uint32_t m_iEyeAttachment = 0x8be; // AttachmentHandle_t
		constexpr uint32_t m_bResetFlexWeightsOnModelChange = 0x8bf; // bool
		constexpr uint32_t m_nEyeOcclusionRendererBone = 0x8d8; // int32
		constexpr uint32_t m_mEyeOcclusionRendererCameraToBoneTransform = 0x8dc; // matrix3x4_t
		constexpr uint32_t m_vEyeOcclusionRendererHalfExtent = 0x90c; // Vector
		constexpr uint32_t m_PhonemeClasses = 0x928; // C_BaseFlex::Emphasized_Phoneme[3]
	}
	namespace CBaseAnimatingActivity {
		constexpr uint32_t m_bShouldAnimateDuringGameplayPause = 0x7d8; // bool
		constexpr uint32_t m_bInitiallyPopulateInterpHistory = 0x7d9; // bool
		constexpr uint32_t m_bAnimationUpdateScheduled = 0x7da; // bool
		constexpr uint32_t m_pSuppressedAnimEventTags = 0x7e0; // CUtlVector< CUtlString >*
		constexpr uint32_t m_bHasAnimatedMaterialAttributes = 0x7e8; // bool
		constexpr uint32_t m_bSuppressAnimEventSounds = 0x7f8; // bool
	}
	namespace C_DOTA_UnitInventory {
		constexpr uint32_t m_SharedCooldownList = 0x8; // CUtlVector< sSharedCooldownInfo >
		constexpr uint32_t m_hItems = 0x20; // CHandle< C_BaseEntity >[19]
		constexpr uint32_t m_bItemQueried = 0x6c; // bool[21]
		constexpr uint32_t m_iParity = 0x84; // int32
		constexpr uint32_t m_hInventoryParent = 0x88; // CHandle< C_BaseEntity >
		constexpr uint32_t m_bIsActive = 0x8c; // bool
		constexpr uint32_t m_bStashEnabled = 0x8d; // bool
		constexpr uint32_t m_hTransientCastItem = 0x90; // CHandle< C_BaseEntity >
		constexpr uint32_t m_bSendChangedMsg = 0xb0; // bool
	}
	namespace C_BaseModelEntity {
		constexpr uint32_t m_CRenderComponent = 0x538; // CRenderComponent*
		constexpr uint32_t m_CHitboxComponent = 0x540; // CHitboxComponent
		constexpr uint32_t m_bInitModelEffects = 0x588; // bool
		constexpr uint32_t m_bIsStaticProp = 0x589; // bool
		constexpr uint32_t m_iViewerID = 0x58c; // int32
		constexpr uint32_t m_iTeamVisibilityBitmask = 0x590; // int32
		constexpr uint32_t m_nLastAddDecal = 0x594; // int32
		constexpr uint32_t m_nDecalsAdded = 0x598; // int32
		constexpr uint32_t m_iOldHealth = 0x59c; // int32
		constexpr uint32_t m_nRenderMode = 0x5a0; // RenderMode_t
		constexpr uint32_t m_bVisibilityDirtyFlag = 0x5a1; // bool
		constexpr uint32_t m_nRenderFX = 0x5a2; // RenderFx_t
		constexpr uint32_t m_bAllowFadeInView = 0x5a3; // bool
		constexpr uint32_t m_clrRender = 0x5c0; // Color
		constexpr uint32_t m_vecRenderAttributes = 0x5c8; // C_UtlVectorEmbeddedNetworkVar< EntityRenderAttribute_t >
		constexpr uint32_t m_bRenderToCubemaps = 0x630; // bool
		constexpr uint32_t m_bNoInterpolate = 0x631; // bool
		constexpr uint32_t m_Collision = 0x638; // CCollisionProperty
		constexpr uint32_t m_Glow = 0x6e8; // CGlowProperty
		constexpr uint32_t m_flGlowBackfaceMult = 0x740; // float32
		constexpr uint32_t m_fadeMinDist = 0x744; // float32
		constexpr uint32_t m_fadeMaxDist = 0x748; // float32
		constexpr uint32_t m_flFadeScale = 0x74c; // float32
		constexpr uint32_t m_flShadowStrength = 0x750; // float32
		constexpr uint32_t m_nObjectCulling = 0x754; // uint8
		constexpr uint32_t m_nAddDecal = 0x758; // int32
		constexpr uint32_t m_vDecalPosition = 0x75c; // Vector
		constexpr uint32_t m_vDecalForwardAxis = 0x768; // Vector
		constexpr uint32_t m_flDecalHealBloodRate = 0x774; // float32
		constexpr uint32_t m_flDecalHealHeightRate = 0x778; // float32
		constexpr uint32_t m_ConfigEntitiesToPropagateMaterialDecalsTo = 0x780; // C_NetworkUtlVectorBase< CHandle< C_BaseModelEntity > >
		constexpr uint32_t m_vecViewOffset = 0x798; // CNetworkViewOffsetVector
		constexpr uint32_t m_pClientAlphaProperty = 0x7c8; // CClientAlphaProperty*
		constexpr uint32_t m_ClientOverrideTint = 0x7d0; // Color
		constexpr uint32_t m_bUseClientOverrideTint = 0x7d4; // bool
	}
	namespace C_DOTAPlayerController {
		constexpr uint32_t m_iMinimapMove = 0x778; // int32
		constexpr uint32_t m_pClickBehaviorKeys = 0x780; // KeyValues*
		constexpr uint32_t m_flCenterTime = 0x788; // GameTime_t
		constexpr uint32_t m_iConfirmationIndex = 0x78c; // int32
		constexpr uint32_t m_bCenterOnHero = 0x790; // bool
		constexpr uint32_t m_bHeroAssigned = 0x791; // bool
		constexpr uint32_t m_nKeyBindHeroID = 0x794; // int32
		constexpr uint32_t m_bUsingCameraMan = 0x798; // bool
		constexpr uint32_t m_bUsingAssistedCameraOperator = 0x799; // bool
		constexpr uint32_t m_nPlayerAssistFlags = 0x79c; // int32
		constexpr uint32_t m_vLatestEvent = 0x7a0; // Vector
		constexpr uint32_t m_hFreeDrawAbility = 0x7d0; // CHandle< C_DOTABaseAbility >
		constexpr uint32_t m_vLastFreeDrawPosition = 0x7d4; // Vector
		constexpr uint32_t m_nPlayerID = 0x7e0; // PlayerID_t
		constexpr uint32_t m_hAssignedHero = 0x7e4; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hLastAssignedHero = 0x7e8; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hKillCamUnit = 0x7ec; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hPreviousKillCamUnit = 0x7f0; // CHandle< C_BaseEntity >
		constexpr uint32_t m_flKillCamUnitReceivedTime = 0x7f4; // float32
		constexpr uint32_t m_nRareLineClickCount = 0x800; // int32
		constexpr uint32_t m_nRareLinesPlayed = 0x804; // int32
		constexpr uint32_t m_nRareLineGroup = 0x808; // int32
		constexpr uint32_t m_flLastRareLinePlayTime = 0x80c; // float32
		constexpr uint32_t m_flLastUnitOrdersSendTime = 0x810; // float32
		constexpr uint32_t m_bTeleportRequiresHalt = 0x814; // bool
		constexpr uint32_t m_bChannelRequiresHalt = 0x815; // bool
		constexpr uint32_t m_bAutoPurchaseItems = 0x816; // bool
		constexpr uint32_t m_bDisableHUDErrorMessages = 0x817; // bool
		constexpr uint32_t m_iMouseDragStartX = 0x818; // int32
		constexpr uint32_t m_iMouseDragStartY = 0x81c; // int32
		constexpr uint32_t m_nWeatherType = 0x820; // int32
		constexpr uint32_t m_bDynamicWeatherSystemActive = 0x824; // bool
		constexpr uint32_t m_bDynamicSoundHandled = 0x825; // bool
		constexpr uint32_t m_flDynamicWeatherNextSwitchTime = 0x828; // GameTime_t
		constexpr uint32_t m_flDynamicWeatherScaleFinishedTime = 0x82c; // GameTime_t
		constexpr uint32_t m_flDynamicWeatherIntensity = 0x830; // float32
		constexpr uint32_t m_nXPRangeFXIndex = 0x834; // ParticleIndex_t
		constexpr uint32_t m_nVisionRangeFXIndex = 0x838; // ParticleIndex_t
		constexpr uint32_t m_hRangeHintAbility = 0x840; // CHandle< C_DOTABaseAbility >
		constexpr uint32_t m_nRangeHintFXIndex = 0x844; // ParticleIndex_t
		constexpr uint32_t m_flRangeHintFXLastRadius = 0x848; // float32
		constexpr uint32_t m_nSelectedControlGroup = 0x84c; // int32
		constexpr uint32_t m_nCachedCoachedTeam = 0x850; // int32
		constexpr uint32_t m_hActiveAbility = 0x854; // CHandle< C_DOTABaseAbility >
		constexpr uint32_t m_unitorders = 0x858; // CUtlVector< CUnitOrders >
		constexpr uint32_t m_nOutgoingOrderSequenceNumber = 0x870; // int32
		constexpr uint32_t m_nServerOrderSequenceNumber = 0x874; // int32
		constexpr uint32_t m_nLastSentOutgoingOrderSequenceNumber = 0x878; // int32
		constexpr uint32_t m_nSelectedUnits = 0x880; // CUtlVector< CEntityIndex >
		constexpr uint32_t m_nWaypoints = 0x898; // CUtlVector< ParticleIndex_t >
		constexpr uint32_t m_iActions = 0x8b0; // int32
		constexpr uint32_t m_hQueryUnit = 0x8b4; // CHandle< C_DOTA_BaseNPC >
		constexpr uint32_t m_bInQuery = 0x8b8; // bool
		constexpr uint32_t m_bSelectionChangedInDataUpdate = 0x8b9; // bool
		constexpr uint32_t m_flQueryInhibitingActionTime = 0x920; // GameTime_t
		constexpr uint32_t m_flQueryInhibitDuration = 0x924; // float32
		constexpr uint32_t m_RingedEntities = 0x928; // CUtlVector< CHandle< C_BaseEntity > >
		constexpr uint32_t m_ActiveRingOwners = 0x940; // CUtlVector< CHandle< C_BaseEntity > >
		constexpr uint32_t m_bOverridingQuery = 0x958; // bool
		constexpr uint32_t m_flLastAutoRepeatTime = 0x960; // float32
		constexpr uint32_t m_flConsumeDoubleclickTime = 0x964; // float32
		constexpr uint32_t m_LightInfoWeatherEffect = 0x968; // CUtlString
		constexpr uint32_t m_bPreviousWasLightInfoWeather = 0x970; // bool
		constexpr uint32_t m_MapDefaultWeatherEffect = 0x978; // CUtlString
		constexpr uint32_t m_bMapUsesDynamicWeather = 0x980; // bool
		constexpr uint32_t m_nCastRangeEffectCreationRadius = 0x9a8; // int32
		constexpr uint32_t m_vecSuggestedWardLocationEffects = 0x9c8; // CUtlVector< ParticleIndex_t >
		constexpr uint32_t m_pSmartCastNPC = 0x9e0; // C_DOTA_BaseNPC*
		constexpr uint32_t m_nTeamSprayParticleIndex = 0x9e8; // ParticleIndex_t
		constexpr uint32_t m_bIsNextCastOrderFromMouseClick = 0x9ec; // bool
		constexpr uint32_t m_iCursor = 0xa20; // int32[2]
		constexpr uint32_t m_iSpectatorClickBehavior = 0xa28; // int32
		constexpr uint32_t m_flAspectRatio = 0xa2c; // float32
		constexpr uint32_t m_hSpectatorQueryUnit = 0xa30; // CHandle< C_BaseEntity >
		constexpr uint32_t m_iStatsPanel = 0xa34; // int32
		constexpr uint32_t m_iShopPanel = 0xa38; // int32
		constexpr uint32_t m_iShopViewMode = 0xa3c; // ShopItemViewMode_t
		constexpr uint32_t m_iStatsDropdownCategory = 0xa40; // int32
		constexpr uint32_t m_iStatsDropdownSort = 0xa44; // int32
		constexpr uint32_t m_szShopString = 0xa48; // char[64]
		constexpr uint32_t m_vecClientQuickBuyState = 0xa88; // C_UtlVectorEmbeddedNetworkVar< ClientQuickBuyItemState >
		constexpr uint32_t m_bInShowCaseMode = 0xad8; // bool
		constexpr uint32_t m_flCameraZoomAmount = 0xadc; // float32
		constexpr uint32_t m_iHighPriorityScore = 0xae0; // int32
		constexpr uint32_t m_quickBuyItems = 0xae4; // AbilityID_t[9]
		constexpr uint32_t m_quickBuyIsPurchasable = 0xb08; // bool[9]
		constexpr uint32_t m_flFrameTime = 0xb14; // float32
		constexpr uint32_t m_flFrameTimeStdDev = 0xb18; // float32
		constexpr uint32_t m_flUnfilteredFrameTime = 0xb1c; // float32
		constexpr uint32_t m_NeutralCampAlarms = 0xb20; // CUtlVector< NeutralCampStackPullAlarm_t >
		constexpr uint32_t m_iPrevCursor = 0xb38; // int32[2]
		constexpr uint32_t m_iPositionHistoryTail = 0xbe0; // int32
		constexpr uint32_t m_iMusicStatus = 0xbe4; // int32
		constexpr uint32_t m_iPreviousMusicStatus = 0xbe8; // int32
		constexpr uint32_t m_bRequestedInventory = 0xbec; // bool
		constexpr uint32_t m_flMusicOperatorVals = 0xbf0; // float32[3]
		constexpr uint32_t m_iMusicOperatorVals = 0xbfc; // int32[4]
		constexpr uint32_t m_ControlGroups = 0xc10; // CUtlVector< sControlGroupElem >[10]
		constexpr uint32_t m_pkvControlGroupKV = 0xd00; // KeyValues*
		constexpr uint32_t m_flAltHeldStartTime = 0xd60; // float32
	}
	namespace CSkeletonInstance {
		constexpr uint32_t m_bDirtyMotionType = 0x0; // bitfield:1
		constexpr uint32_t m_modelState = 0x170; // CModelState
		constexpr uint32_t m_bIsAnimationEnabled = 0x3a0; // bool
		constexpr uint32_t m_bUseParentRenderBounds = 0x3a1; // bool
		constexpr uint32_t m_bDisableSolidCollisionsForHierarchy = 0x3a2; // bool
		constexpr uint32_t m_materialGroup = 0x3a4; // CUtlStringToken
		constexpr uint32_t m_nHitboxSet = 0x3a8; // uint8
	}
	namespace CParticleFunction {
		constexpr uint32_t m_flOpStrength = 0x8; // CParticleCollectionFloatInput
		constexpr uint32_t m_nOpEndCapState = 0x168; // ParticleEndcapMode_t
		constexpr uint32_t m_flOpStartFadeInTime = 0x16c; // float32
		constexpr uint32_t m_flOpEndFadeInTime = 0x170; // float32
		constexpr uint32_t m_flOpStartFadeOutTime = 0x174; // float32
		constexpr uint32_t m_flOpEndFadeOutTime = 0x178; // float32
		constexpr uint32_t m_flOpFadeOscillatePeriod = 0x17c; // float32
		constexpr uint32_t m_bNormalizeToStopTime = 0x180; // bool
		constexpr uint32_t m_flOpTimeOffsetMin = 0x184; // float32
		constexpr uint32_t m_flOpTimeOffsetMax = 0x188; // float32
		constexpr uint32_t m_nOpTimeOffsetSeed = 0x18c; // int32
		constexpr uint32_t m_nOpTimeScaleSeed = 0x190; // int32
		constexpr uint32_t m_flOpTimeScaleMin = 0x194; // float32
		constexpr uint32_t m_flOpTimeScaleMax = 0x198; // float32
		constexpr uint32_t m_bDisableOperator = 0x19e; // bool
		constexpr uint32_t m_Notes = 0x1a0; // CUtlString
	}
	namespace CGameSceneNode {
		constexpr uint32_t m_bDirtyHierarchy = 0x0; // bitfield:1
		constexpr uint32_t m_nodeToWorld = 0x10; // CTransform
		constexpr uint32_t m_pOwner = 0x30; // CEntityInstance*
		constexpr uint32_t m_pParent = 0x38; // CGameSceneNode*
		constexpr uint32_t m_pChild = 0x40; // CGameSceneNode*
		constexpr uint32_t m_pNextSibling = 0x48; // CGameSceneNode*
		constexpr uint32_t m_hParent = 0x78; // CGameSceneNodeHandle
		constexpr uint32_t m_vecOrigin = 0x88; // CNetworkOriginCellCoordQuantizedVector
		constexpr uint32_t m_angRotation = 0xc0; // QAngle
		constexpr uint32_t m_flScale = 0xcc; // float32
		constexpr uint32_t m_vecAbsOrigin = 0xd0; // Vector
		constexpr uint32_t m_angAbsRotation = 0xdc; // QAngle
		constexpr uint32_t m_flAbsScale = 0xe8; // float32
		constexpr uint32_t m_nParentAttachmentOrBone = 0xec; // int16
		constexpr uint32_t m_bDebugAbsOriginChanges = 0xee; // bool
		constexpr uint32_t m_bDormant = 0xef; // bool
		constexpr uint32_t m_bForceParentToBeNetworked = 0xf0; // bool
		constexpr uint32_t m_nHierarchicalDepth = 0xf3; // uint8
		constexpr uint32_t m_nHierarchyType = 0xf4; // uint8
		constexpr uint32_t m_nDoNotSetAnimTimeInInvalidatePhysicsCount = 0xf5; // uint8
		constexpr uint32_t m_name = 0xf8; // CUtlStringToken
		constexpr uint32_t m_hierarchyAttachName = 0x138; // CUtlStringToken
		constexpr uint32_t m_flZOffset = 0x13c; // float32
		constexpr uint32_t m_flClientLocalScale = 0x140; // float32
		constexpr uint32_t m_vRenderOrigin = 0x144; // Vector
	}
	namespace CModelState {
		constexpr uint32_t m_hModel = 0xa0; // CStrongHandle< InfoForResourceTypeCModel >
		constexpr uint32_t m_ModelName = 0xa8; // CUtlSymbolLarge
		constexpr uint32_t m_bClientClothCreationSuppressed = 0xe8; // bool
		constexpr uint32_t m_MeshGroupMask = 0x198; // uint64
		constexpr uint32_t m_nIdealMotionType = 0x21a; // int8
		constexpr uint32_t m_nForceLOD = 0x21b; // int8
		constexpr uint32_t m_nClothUpdateFlags = 0x21c; // int8
	}
	namespace C_DOTA_PlayerResource {
		constexpr uint32_t m_bWasDataUpdateCreated = 0x548; // bool
		constexpr uint32_t m_vecPlayerTeamData = 0x550; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerTeamData_t >
		constexpr uint32_t m_vecPlayerData = 0x5a0; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerData_t >
		constexpr uint32_t m_vecBrodcasterData = 0x5f0; // C_UtlVectorEmbeddedNetworkVar< PlayerResourceBroadcasterData_t >
		constexpr uint32_t m_vecEventsForDisplay = 0x640; // C_NetworkUtlVectorBase< uint32 >
		constexpr uint32_t m_nPrimaryEventIndex = 0x658; // int8
		constexpr uint32_t m_nObsoleteEventIDAssociatedWithEventData = 0x65c; // uint32
		constexpr uint32_t m_playerIDToPlayer = 0x660; // CHandle< C_BaseEntity >[64]
		constexpr uint32_t m_iszName = 0x760; // CUtlSymbolLarge[64]
		constexpr uint32_t m_iszHTMLSafeName = 0x960; // CUtlSymbolLarge[64]
		constexpr uint32_t m_iszFilteredHTMLSafeName = 0xb60; // CUtlSymbolLarge[64]
		constexpr uint32_t m_bDirtySuggestedItems = 0x2660; // bool
		constexpr uint32_t m_bDirtyEstimatedMatchDuration = 0x2661; // bool
		constexpr uint32_t m_bDirtySelection = 0x2662; // bool
		constexpr uint32_t m_bHasWorldTreesChanged = 0x2663; // bool
		constexpr uint32_t m_bWorldTreeModelsChanged = 0x2664; // bool
		constexpr uint32_t m_bSwapWillingness = 0x2665; // bool[24]
		constexpr uint32_t m_hTeamCouriers = 0x26c0; // CUtlVector< CHandle< C_DOTA_Unit_Courier > >[15]
		constexpr uint32_t m_hPlayerCouriers = 0x2828; // CUtlVector< CHandle< C_DOTA_Unit_Courier > >[64]
		constexpr uint32_t m_vecOnstageHomeTeams = 0x2e28; // CUtlVector< uint32 >
		constexpr uint32_t m_pPlayerIDToOnstageSlot = 0x2e40; // PlayerSeatAssignment_t*[24]
		constexpr uint32_t m_vecOnstagePlayerSeats = 0x2f00; // CUtlVector< PlayerSeatAssignment_t >
		constexpr uint32_t m_nEventNPCReplaced = 0x2f18; // int32
		constexpr uint32_t m_nEventPlayerInfo = 0x2f1c; // int32
		constexpr uint32_t m_nInventoryUpdated = 0x2f20; // int32
	}
	namespace PlayerResourcePlayerTeamData_t {
		constexpr uint32_t m_ThreatLevelInfos = 0x30; // C_UtlVectorEmbeddedNetworkVar< DOTAThreatLevelInfo_t >
		constexpr uint32_t m_nSelectedHeroID = 0x80; // HeroID_t
		constexpr uint32_t m_nSelectedHeroVariant = 0x84; // HeroFacetID_t
		constexpr uint32_t m_iKills = 0x88; // int32
		constexpr uint32_t m_iAssists = 0x8c; // int32
		constexpr uint32_t m_iDeaths = 0x90; // int32
		constexpr uint32_t m_iStreak = 0x94; // int32
		constexpr uint32_t m_iLevel = 0x98; // int32
		constexpr uint32_t m_iCustomIntParam = 0x9c; // int32
		constexpr uint32_t m_iRespawnSeconds = 0xa0; // int32
		constexpr uint32_t m_flLastBuybackTime = 0xa4; // GameTime_t
		constexpr uint32_t m_iLastBuybackTime_Obsolete = 0xa8; // int32
		constexpr uint32_t m_hSelectedHero = 0xac; // CHandle< C_BaseEntity >
		constexpr uint32_t m_bAFK = 0xb0; // bool
		constexpr uint32_t m_nSuggestedHeroes = 0xb4; // HeroID_t[4]
		constexpr uint32_t m_bBanSuggestedHeroes = 0xc4; // bool[4]
		constexpr uint32_t m_unCompendiumLevel = 0xc8; // uint16
		constexpr uint32_t m_bCanRepick = 0xca; // bool
		constexpr uint32_t m_bCanEarnRewards = 0xcb; // bool
		constexpr uint32_t m_bHasRandomed = 0xcc; // bool
		constexpr uint32_t m_nRandomedHeroID = 0xd0; // HeroID_t
		constexpr uint32_t m_bBattleBonusActive = 0xd4; // bool
		constexpr uint32_t m_iBattleBonusRate = 0xd6; // uint16
		constexpr uint32_t m_iCustomBuybackCost = 0xd8; // int32
		constexpr uint32_t m_CustomPlayerColor = 0xdc; // Color
		constexpr uint32_t m_bQualifiesForPAContractReward = 0xe0; // bool
		constexpr uint32_t m_bHasPredictedVictory = 0xe1; // bool
		constexpr uint32_t m_UnitShareMasks = 0xe4; // int32
		constexpr uint32_t m_iTeamSlot = 0xe8; // int32
		constexpr uint32_t m_iBattleCupWinStreak = 0xec; // uint8
		constexpr uint32_t m_iBattleCupWinDate = 0xf0; // uint64
		constexpr uint32_t m_iBattleCupSkillLevel = 0xf8; // uint16
		constexpr uint32_t m_iBattleCupTeamID = 0xfc; // uint32
		constexpr uint32_t m_iBattleCupTournamentID = 0x100; // uint32
		constexpr uint32_t m_iBattleCupDivision = 0x104; // uint8
		constexpr uint32_t m_flTeamFightParticipation = 0x108; // float32
		constexpr uint32_t m_iFirstBloodClaimed = 0x10c; // int32
		constexpr uint32_t m_iFirstBloodGiven = 0x110; // int32
		constexpr uint32_t m_unPickOrder = 0x114; // uint32
		constexpr uint32_t m_flTimeOfLastSaluteSent = 0x118; // GameTime_t
		constexpr uint32_t m_vecPlayerEventData = 0x120; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerEventData_t >
		constexpr uint32_t m_unSelectedHeroBadgeXP = 0x170; // uint32
		constexpr uint32_t m_iBountyRunes = 0x174; // uint8
		constexpr uint32_t m_iPowerRunes = 0x175; // uint8
		constexpr uint32_t m_iWaterRunes = 0x176; // uint8
		constexpr uint32_t m_iOutpostsCaptured = 0x177; // uint8
		constexpr uint32_t m_unGuildTier = 0x178; // uint8
		constexpr uint32_t m_unGuildLevel = 0x17a; // uint16
		constexpr uint32_t m_unGuildPrimaryColor = 0x17c; // uint8
		constexpr uint32_t m_unGuildSecondaryColor = 0x17d; // uint8
		constexpr uint32_t m_unGuildPattern = 0x17e; // uint8
		constexpr uint32_t m_unGuildLogo = 0x180; // uint64
		constexpr uint32_t m_unGuildFlags = 0x188; // uint32
		constexpr uint32_t m_bIsPartyGuild = 0x18c; // bool
		constexpr uint32_t m_unGuildID = 0x190; // GuildID_t
		constexpr uint32_t m_unHeroStickerDefIndex = 0x194; // item_definition_index_t
		constexpr uint32_t m_eHeroStickerQuality = 0x198; // uint8
		constexpr uint32_t m_eLaneSelectionFlags = 0x199; // uint8
		constexpr uint32_t m_nPlayerDraftPreferredRoles = 0x19a; // uint8
		constexpr uint32_t m_nPlayerDraftPreferredTeam = 0x19b; // int8
		constexpr uint32_t m_nAvailableGifts = 0x19c; // uint8
		constexpr uint32_t m_unFowTeam = 0x19d; // uint8
		constexpr uint32_t m_iObsoleteEventPoints = 0x1a0; // uint32
		constexpr uint32_t m_iObsoleteEventPremiumPoints = 0x1a4; // uint32
		constexpr uint32_t m_iObsoleteEventWagerTokensRemaining = 0x1a8; // uint32
		constexpr uint32_t m_iObsoleteEventWagerTokensMax = 0x1ac; // uint32
		constexpr uint32_t m_iObsoleteEventEffectsMask = 0x1b0; // uint32
		constexpr uint32_t m_iObsoleteEventRanks = 0x1b4; // uint16
		constexpr uint32_t m_bObsoleteIsEventOwned = 0x1b6; // bool
		constexpr uint32_t m_iObsoleteRankWagersAvailable = 0x1b8; // uint32
		constexpr uint32_t m_iObsoleteRankWagersMax = 0x1bc; // uint32
		constexpr uint32_t m_iObsoleteEventPointAdjustmentsRemaining = 0x1c0; // uint32
		constexpr uint32_t m_iObsoleteAvailableSalutes = 0x1c4; // uint32
		constexpr uint32_t m_iObsoleteSaluteAmounts = 0x1c8; // uint32
	}
	namespace C_DOTAGamerules {
		constexpr uint32_t m_nRuneCycle = 0x40; // int32
		constexpr uint32_t m_iMiscHeroPickCounter = 0x44; // int32
		constexpr uint32_t m_hEndGameCinematicEntity = 0x48; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hOverlayHealthBarUnit = 0x4c; // CHandle< C_DOTA_BaseNPC >
		constexpr uint32_t m_nOverlayHealthBarType = 0x50; // int32
		constexpr uint32_t m_bIsInCinematicMode = 0x54; // bool
		constexpr uint32_t m_bIsInClientSideCinematicMode = 0x55; // bool
		constexpr uint32_t m_bFreeCourierMode = 0x56; // bool
		constexpr uint32_t m_nStartingGold = 0x58; // int32
		constexpr uint32_t m_nGoldPerTick = 0x5c; // int32
		constexpr uint32_t m_flGoldTickTime = 0x60; // float32
		constexpr uint32_t m_bItemWhiteListChanged = 0x64; // bool
		constexpr uint32_t m_bEnableSuggestAbilities = 0x65; // bool
		constexpr uint32_t m_bEnableSuggestItems = 0x66; // bool
		constexpr uint32_t m_unFanfareGoodGuys = 0x68; // uint32
		constexpr uint32_t m_unFanfareBadGuys = 0x6c; // uint32
		constexpr uint32_t m_iMapType = 0x70; // int32
		constexpr uint32_t m_nServerGameState = 0x74; // int32
		constexpr uint32_t m_nServerHeroPickState = 0x78; // DOTA_HeroPickState
		constexpr uint32_t m_nGameState = 0x7c; // int32
		constexpr uint32_t m_nHeroPickState = 0x80; // DOTA_HeroPickState
		constexpr uint32_t m_bAlternateHeroGridsEnabled = 0x84; // bool
		constexpr uint32_t m_flStateTransitionTime = 0x88; // GameTime_t
		constexpr uint32_t m_flOverride_dota_hero_selection_time = 0x8c; // float32
		constexpr uint32_t m_flOverride_dota_pregame_time = 0x90; // float32
		constexpr uint32_t m_flOverride_dota_postgame_time = 0x94; // float32
		constexpr uint32_t m_flOverride_dota_strategy_time = 0x98; // float32
		constexpr uint32_t m_flOverride_dota_team_showcase_duration = 0x9c; // float32
		constexpr uint32_t m_flOverride_dota_rune_spawn_time = 0xa0; // float32
		constexpr uint32_t m_flShowcaseTime = 0xa4; // float32[15]
		constexpr uint32_t m_flNeutralInitialSpawnOffset = 0xe0; // float32
		constexpr uint32_t m_iGameMode = 0xe4; // int32
		constexpr uint32_t m_hGameModeEntity = 0xe8; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hCustomHeroPickRulesEntity = 0xec; // CHandle< C_BaseEntity >
		constexpr uint32_t m_flHeroPickStateTransitionTime = 0xf0; // GameTime_t
		constexpr uint32_t m_iPlayerIDsInControl = 0xf8; // uint64
		constexpr uint32_t m_bSameHeroSelectionEnabled = 0x100; // bool
		constexpr uint32_t m_bUseCustomHeroXPValue = 0x101; // bool
		constexpr uint32_t m_bUseBaseGoldBountyOnHeroes = 0x102; // bool
		constexpr uint32_t m_bUseUniversalShopMode = 0x103; // bool
		constexpr uint32_t m_bHideKillMessageHeaders = 0x104; // bool
		constexpr uint32_t m_flHeroMinimapIconScale = 0x108; // float32
		constexpr uint32_t m_flCreepMinimapIconScale = 0x10c; // float32
		constexpr uint32_t m_bCreepSpawningEnabled = 0x110; // bool
		constexpr uint32_t m_flRuneMinimapIconScale = 0x114; // float32
		constexpr uint32_t m_CustomVictoryMessage = 0x118; // char[256]
		constexpr uint32_t m_flCustomGameEndDelay = 0x218; // float32
		constexpr uint32_t m_flCustomGameSetupAutoLaunchDelay = 0x21c; // float32
		constexpr uint32_t m_flCustomGameSetupTimeout = 0x220; // float32
		constexpr uint32_t m_flCustomVictoryMessageDuration = 0x224; // float32
		constexpr uint32_t m_flHeroSelectPenaltyTime = 0x228; // float32
		constexpr uint32_t m_bCustomGameSetupAutoLaunchEnabled = 0x22c; // bool
		constexpr uint32_t m_bCustomGameTeamSelectionLocked = 0x22d; // bool
		constexpr uint32_t m_bCustomGameEnablePickRules = 0x22e; // bool
		constexpr uint32_t m_bCustomGameAllowHeroPickMusic = 0x22f; // bool
		constexpr uint32_t m_bCustomGameAllowMusicAtGameStart = 0x230; // bool
		constexpr uint32_t m_bCustomGameAllowBattleMusic = 0x231; // bool
		constexpr uint32_t m_bCustomGameDisableIK = 0x232; // bool
		constexpr uint32_t m_bCustomGameAllowSecondaryAbilitiesOnOtherUnits = 0x233; // bool
		constexpr uint32_t m_iCMModePickBanOrder = 0x234; // int32
		constexpr uint32_t m_iCDModePickBanOrder = 0x238; // int32
		constexpr uint32_t m_nGGTeam = 0x23c; // int32
		constexpr uint32_t m_flGGEndsAtTime = 0x240; // GameTime_t
		constexpr uint32_t m_bGGCalled = 0x244; // bool
		constexpr uint32_t m_bWhiteListEnabled = 0x245; // bool
		constexpr uint32_t m_bItemWhiteList = 0x248; // uint64[4]
		constexpr uint32_t m_nLastHitUIMode = 0x268; // int32
		constexpr uint32_t m_bHUDTimerTutorialMode = 0x26c; // bool
		constexpr uint32_t m_HeroPickMiscTimer = 0x270; // CountdownTimer
		constexpr uint32_t m_ExtraTimeTimer = 0x288; // CountdownTimer
		constexpr uint32_t m_fExtraTimeRemaining = 0x2a0; // float32[2]
		constexpr uint32_t m_bHeroRespawnEnabled = 0x2a8; // bool
		constexpr uint32_t m_bIsRandomingEnabled = 0x2a9; // bool
		constexpr uint32_t m_iCaptainPlayerIDs = 0x2ac; // PlayerID_t[2]
		constexpr uint32_t m_BannedHeroes = 0x2b4; // HeroID_t[24]
		constexpr uint32_t m_SelectedHeroes = 0x314; // HeroID_t[24]
		constexpr uint32_t m_iActiveTeam = 0x374; // int32
		constexpr uint32_t m_iStartingTeam = 0x378; // int32
		constexpr uint32_t m_iPenaltyLevelRadiant = 0x37c; // int32
		constexpr uint32_t m_iPenaltyLevelDire = 0x380; // int32
		constexpr uint32_t m_bIsLoadingScenario = 0x384; // bool
		constexpr uint32_t m_vecNewBannedHeroes = 0x388; // C_NetworkUtlVectorBase< HeroID_t >
		constexpr uint32_t m_vecWhitelistedHeroes = 0x3a0; // C_NetworkUtlVectorBase< HeroID_t >
		constexpr uint32_t m_vecBlacklistedHeroes = 0x3b8; // C_NetworkUtlVectorBase< HeroID_t >
		constexpr uint32_t m_bHideBlacklistedHeroes = 0x3d0; // bool
		constexpr uint32_t m_nSeriesType = 0x3d4; // int32
		constexpr uint32_t m_nRadiantSeriesWins = 0x3d8; // int32
		constexpr uint32_t m_nDireSeriesWins = 0x3dc; // int32
		constexpr uint32_t m_vecAvailableHerosPerPlayerID = 0x3e0; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
		constexpr uint32_t m_vecLockedHerosByPlayerID = 0x430; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
		constexpr uint32_t m_vecDisabledRandomHerosByPlayerID = 0x480; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
		constexpr uint32_t m_CustomGameForceSelectHero = 0x4d0; // HeroID_t[24]
		constexpr uint32_t m_flGoldTime = 0x530; // float32
		constexpr uint32_t m_flXPTime = 0x534; // float32
		constexpr uint32_t m_flCreepSpawntime = 0x538; // GameTime_t
		constexpr uint32_t m_flAnnounceStartTime = 0x53c; // float32
		constexpr uint32_t m_iGoodTomeCount = 0x540; // int32
		constexpr uint32_t m_iBadTomeCount = 0x544; // int32
		constexpr uint32_t m_flPreGameStartTime = 0x548; // GameTime_t
		constexpr uint32_t m_flGameStartTime = 0x54c; // GameTime_t
		constexpr uint32_t m_flGameEndTime = 0x550; // GameTime_t
		constexpr uint32_t m_flGameLoadTime = 0x554; // float32
		constexpr uint32_t m_iCustomGameScore = 0x558; // int32[2]
		constexpr uint32_t m_nCustomGameDifficulty = 0x560; // int32
		constexpr uint32_t m_bEnemyModifiersEnabled = 0x564; // bool
		constexpr uint32_t m_iWaves = 0x568; // int32
		constexpr uint32_t m_iCreepUpgradeState = 0x56c; // int32
		constexpr uint32_t m_fGoodGlyphCooldown = 0x570; // GameTime_t
		constexpr uint32_t m_fBadGlyphCooldown = 0x574; // GameTime_t
		constexpr uint32_t m_flGlyphCooldowns = 0x578; // GameTime_t[15]
		constexpr uint32_t m_fGoodRadarCooldown = 0x5b4; // GameTime_t
		constexpr uint32_t m_fBadRadarCooldown = 0x5b8; // GameTime_t
		constexpr uint32_t m_flRadarCooldowns = 0x5bc; // GameTime_t[15]
		constexpr uint32_t m_iGoodRadarCharges = 0x5f8; // int32
		constexpr uint32_t m_iBadRadarCharges = 0x5fc; // int32
		constexpr uint32_t m_iRadarCharges = 0x600; // int32[15]
		constexpr uint32_t m_flOutpostTimes = 0x63c; // float32[24]
		constexpr uint32_t m_bIsNightstalkerNight = 0x69c; // bool
		constexpr uint32_t m_bIsTemporaryNight = 0x69d; // bool
		constexpr uint32_t m_bIsTemporaryDay = 0x69e; // bool
		constexpr uint32_t m_nRiverType = 0x6a0; // int32
		constexpr uint32_t m_nTeamFeaturedPlayerID = 0x6a4; // PlayerID_t[15]
		constexpr uint32_t m_nTeamVersusScreen = 0x6e0; // item_definition_index_t[15]
		constexpr uint32_t m_flGoldRedistributeTime = 0x71c; // float32
		constexpr uint32_t m_nGoldToRedistribute = 0x720; // int32[2]
		constexpr uint32_t m_flNextPreGameThink = 0x728; // GameTime_t
		constexpr uint32_t m_flNextAllDraftGoldThink = 0x72c; // GameTime_t
		constexpr uint32_t m_flTimeEnteredState = 0x730; // float64
		constexpr uint32_t m_unRiverAccountID = 0x738; // uint32
		constexpr uint32_t m_ulRiverItemID = 0x740; // itemid_t
		constexpr uint32_t m_vecItemStockInfo = 0x788; // C_UtlVectorEmbeddedNetworkVar< CDOTA_ItemStockInfo >
		constexpr uint32_t m_AssassinMiniGameNetData = 0x7d8; // DOTA_AssassinMinigameNetworkState
		constexpr uint32_t m_nGameWinner = 0x7e8; // int32
		constexpr uint32_t m_unMatchID64 = 0x7f0; // MatchID_t
		constexpr uint32_t m_bMatchSignoutComplete = 0x7f8; // bool
		constexpr uint32_t m_hSideShop1 = 0x7fc; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hSideShop2 = 0x800; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hSecretShop1 = 0x804; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hSecretShop2 = 0x808; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hTeamFountains = 0x80c; // CHandle< C_BaseEntity >[15]
		constexpr uint32_t m_hTeamForts = 0x848; // CHandle< C_BaseEntity >[15]
		constexpr uint32_t m_hTeamShops = 0x884; // CHandle< C_BaseEntity >[15]
		constexpr uint32_t m_hAnnouncerGood = 0x8c0; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerBad = 0x8c4; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerSpectator = 0x8c8; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerGood_KillingSpree = 0x8cc; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerBad_KillingSpree = 0x8d0; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerSpectator_KillingSpree = 0x8d4; // CHandle< C_BaseEntity >
		constexpr uint32_t m_arrTier1TowerDestroyed = 0x8d8; // bool[15]
		constexpr uint32_t m_arrTier2TowerDestroyed = 0x8e7; // bool[15]
		constexpr uint32_t m_arrTier3TowerDestroyed = 0x8f6; // bool[15]
		constexpr uint32_t m_arrMeleeBarracksDestroyed = 0x905; // bool[15]
		constexpr uint32_t m_bTier1TowerDestroyed = 0x914; // bool
		constexpr uint32_t m_bTier2TowerDestroyed = 0x915; // bool
		constexpr uint32_t m_bTier3TowerDestroyed = 0x916; // bool
		constexpr uint32_t m_bMeleeBarracksDestroyed = 0x917; // bool
		constexpr uint32_t m_fTimeOfDay = 0x918; // float32
		constexpr uint32_t m_iNetTimeOfDay = 0x91c; // int32
		constexpr uint32_t m_flDaytimeStart = 0x920; // float32
		constexpr uint32_t m_flNighttimeStart = 0x924; // float32
		constexpr uint32_t m_nLoadedPlayers = 0x928; // int32
		constexpr uint32_t m_nExpectedPlayers = 0x92c; // int32
		constexpr uint32_t m_iMinimapDebugGridState = 0x938; // int32
		constexpr uint32_t m_iFoWFrameNumber = 0x9b8; // int32
		constexpr uint32_t m_vWeatherWindDirection = 0x9bc; // Vector
		constexpr uint32_t m_vecRequiredPlaytestHeroesStorage = 0x9c8; // HeroID_t[24]
		constexpr uint32_t m_vecRecommendedPlaytestHeroesStorage = 0xa28; // HeroID_t[24]
		constexpr uint32_t m_bAllRequiredPlaytestHeroesPicked = 0xa88; // bool
		constexpr uint32_t m_nLastPlaytestPickPhase = 0xa8c; // int32
		constexpr uint32_t m_nCustomGameFowTeamCount = 0xa90; // int32
		constexpr uint32_t m_bUseAlternateABRules = 0xa94; // bool
		constexpr uint32_t m_bLobbyIsAssociatedWithGame = 0xa95; // bool
		constexpr uint32_t m_BotDebugTimer = 0xa98; // CountdownTimer
		constexpr uint32_t m_BotDebugPushLane = 0xab0; // uint8[18]
		constexpr uint32_t m_BotDebugDefendLane = 0xac2; // uint8[18]
		constexpr uint32_t m_BotDebugFarmLane = 0xad4; // uint8[6]
		constexpr uint32_t m_BotDebugRoam = 0xada; // uint8[8]
		constexpr uint32_t m_hBotDebugRoamTarget = 0xae4; // CHandle< C_BaseEntity >[2]
		constexpr uint32_t m_BotDebugRoshan = 0xaec; // uint8[2]
		constexpr uint32_t m_nRoshanRespawnPhase = 0xaf0; // ERoshanSpawnPhase
		constexpr uint32_t m_flRoshanRespawnPhaseEndTime = 0xaf4; // GameTime_t
		constexpr uint32_t m_AbilityDraftAbilities = 0xaf8; // C_UtlVectorEmbeddedNetworkVar< CDOTA_AbilityDraftAbilityState >
		constexpr uint32_t m_bAbilityDraftCurrentPlayerHasPicked = 0xb48; // bool
		constexpr uint32_t m_nAbilityDraftPlayerTracker = 0xb4c; // int32
		constexpr uint32_t m_nAbilityDraftRoundNumber = 0xb50; // int32
		constexpr uint32_t m_nAbilityDraftAdvanceSteps = 0xb54; // int32
		constexpr uint32_t m_nAbilityDraftPhase = 0xb58; // int32
		constexpr uint32_t m_bIsPlayerDraft = 0xb5c; // bool
		constexpr uint32_t m_ePlayerDraftState = 0xb60; // DOTA_PlayerDraftState
		constexpr uint32_t m_vecPlayerDraftPickOrder = 0xb68; // C_NetworkUtlVectorBase< uint8 >
		constexpr uint32_t m_nPlayerDraftPick = 0xb80; // int32
		constexpr uint32_t m_nPlayerDraftActiveTeam = 0xb84; // int32
		constexpr uint32_t m_flPlayerDraftTimeBank = 0xb88; // float32[2]
		constexpr uint32_t m_vecARDMHeroes = 0xb90; // CUtlVector< KeyValues* >[2]
		constexpr uint32_t m_nARDMHeroesPrecached = 0xbc0; // int32
		constexpr uint32_t m_fLastARDMPrecache = 0xbc4; // float32
		constexpr uint32_t m_nAllDraftPhase = 0xbc8; // int32
		constexpr uint32_t m_bAllDraftRadiantFirst = 0xbcc; // bool
		constexpr uint32_t m_bAllowOverrideVPK = 0xbcd; // bool
		constexpr uint32_t m_nARDMHeroesRemaining = 0xbd0; // int32[2]
		constexpr uint32_t m_bUpdateHeroStatues = 0xbd8; // bool
		constexpr uint32_t m_bExperimentalGameplay = 0xbf0; // bool
		constexpr uint32_t m_lobbyType = 0xc38; // uint32
		constexpr uint32_t m_lobbyLeagueID = 0xc3c; // LeagueID_t
		constexpr uint32_t m_lobbyGameName = 0xc40; // char[256]
		constexpr uint32_t m_vecHeroStatueLiked = 0xd40; // C_UtlVectorEmbeddedNetworkVar< CHeroStatueLiked >
		constexpr uint32_t m_CustomGameTeamMaxPlayers = 0xd90; // int32[15]
		constexpr uint32_t m_iMutations = 0xdcc; // int32[5]
		constexpr uint32_t m_vecIngameEvents = 0xde0; // C_NetworkUtlVectorBase< CHandle< C_IngameEvent_Base > >
		constexpr uint32_t m_nPrimaryIngameEventIndex = 0xdf8; // int8
		constexpr uint32_t m_hObsoleteIngameEvent = 0xdfc; // CHandle< C_IngameEvent_Base >
		constexpr uint32_t m_nOfrendaPledges = 0xe00; // uint32
		constexpr uint32_t m_nRadiantOfrendas = 0xe04; // uint32
		constexpr uint32_t m_nDireOfrendas = 0xe08; // uint32
		constexpr uint32_t m_bOfrendaEnabled = 0xe0c; // bool
		constexpr uint32_t m_NeutralSpawnBoxes = 0xe40; // C_NetworkUtlVectorBase< NeutralSpawnBoxes_t >
		constexpr uint32_t m_RegionTriggerBoxes = 0xe58; // C_NetworkUtlVectorBase< RegionTriggerBoxes_t >
		constexpr uint32_t m_flLastPerfSampleTime = 0x1e28; // float64
		constexpr uint32_t m_flLastPerfSampleSendTime = 0x1e30; // float64
		constexpr uint32_t m_bDidSeeStrategyTime = 0x1e38; // bool
		constexpr uint32_t m_flLastUnfocusedSleepTime = 0xab90; // float64
	}
	namespace C_GameRules {
		constexpr uint32_t __m_pChainEntity = 0x8; // CNetworkVarChainer
		constexpr uint32_t m_nTotalPausedTicks = 0x30; // int32
		constexpr uint32_t m_nPauseStartTick = 0x34; // int32
		constexpr uint32_t m_bGamePaused = 0x38; // bool
	}
	namespace C_DOTA_Item_Rune {
		constexpr uint32_t m_iRuneType = 0x800; // int32
		constexpr uint32_t m_flRuneTime = 0x804; // float32
		constexpr uint32_t m_nMapLocationTeam = 0x808; // int32
		constexpr uint32_t m_szLocation = 0x80c; // char[512]
		constexpr uint32_t m_iOldRuneType = 0xa0c; // int32
		constexpr uint32_t m_bShowingTooltip = 0xa10; // bool
	}
	namespace GameTime_t {
		constexpr uint32_t m_Value = 0x0; // float32
	}
	namespace C_DOTA_Item_EmptyBottle {
		constexpr uint32_t m_iStoredRuneType = 0x678; // int32
		constexpr uint32_t m_fStoredRuneTime = 0x67c; // GameTime_t
		constexpr uint32_t rune_expire_time = 0x680; // float32
	}
	namespace C_DOTAGamerulesProxy {
		constexpr uint32_t m_pGameRules = 0x538; // C_DOTAGamerules*
	}
	namespace CBaseRendererSource2 {
		constexpr uint32_t m_flRadiusScale = 0x210; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flAlphaScale = 0x370; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flRollScale = 0x4d0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_nAlpha2Field = 0x630; // ParticleAttributeIndex_t
		constexpr uint32_t m_vecColorScale = 0x638; // CParticleCollectionRendererVecInput
		constexpr uint32_t m_nColorBlendType = 0xcb0; // ParticleColorBlendType_t
		constexpr uint32_t m_nShaderType = 0xcb4; // SpriteCardShaderType_t
		constexpr uint32_t m_strShaderOverride = 0xcb8; // CUtlString
		constexpr uint32_t m_flCenterXOffset = 0xcc0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flCenterYOffset = 0xe20; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flBumpStrength = 0xf80; // float32
		constexpr uint32_t m_nCropTextureOverride = 0xf84; // ParticleSequenceCropOverride_t
		constexpr uint32_t m_vecTexturesInput = 0xf88; // CUtlVector< TextureGroup_t >
		constexpr uint32_t m_flAnimationRate = 0xfa0; // float32
		constexpr uint32_t m_nAnimationType = 0xfa4; // AnimationType_t
		constexpr uint32_t m_bAnimateInFPS = 0xfa8; // bool
		constexpr uint32_t m_flSelfIllumAmount = 0xfb0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flDiffuseAmount = 0x1110; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flDiffuseClamp = 0x1270; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_nLightingControlPoint = 0x13d0; // int32
		constexpr uint32_t m_nSelfIllumPerParticle = 0x13d4; // ParticleAttributeIndex_t
		constexpr uint32_t m_nOutputBlendMode = 0x13d8; // ParticleOutputBlendMode_t
		constexpr uint32_t m_bGammaCorrectVertexColors = 0x13dc; // bool
		constexpr uint32_t m_bSaturateColorPreAlphaBlend = 0x13dd; // bool
		constexpr uint32_t m_flAddSelfAmount = 0x13e0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flDesaturation = 0x1540; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flOverbrightFactor = 0x16a0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_nHSVShiftControlPoint = 0x1800; // int32
		constexpr uint32_t m_nFogType = 0x1804; // ParticleFogType_t
		constexpr uint32_t m_flFogAmount = 0x1808; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_bTintByFOW = 0x1968; // bool
		constexpr uint32_t m_bTintByGlobalLight = 0x1969; // bool
		constexpr uint32_t m_nPerParticleAlphaReference = 0x196c; // SpriteCardPerParticleScale_t
		constexpr uint32_t m_nPerParticleAlphaRefWindow = 0x1970; // SpriteCardPerParticleScale_t
		constexpr uint32_t m_nAlphaReferenceType = 0x1974; // ParticleAlphaReferenceType_t
		constexpr uint32_t m_flAlphaReferenceSoftness = 0x1978; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flSourceAlphaValueToMapToZero = 0x1ad8; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flSourceAlphaValueToMapToOne = 0x1c38; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_bRefract = 0x1d98; // bool
		constexpr uint32_t m_bRefractSolid = 0x1d99; // bool
		constexpr uint32_t m_flRefractAmount = 0x1da0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_nRefractBlurRadius = 0x1f00; // int32
		constexpr uint32_t m_nRefractBlurType = 0x1f04; // BlurFilterType_t
		constexpr uint32_t m_bOnlyRenderInEffectsBloomPass = 0x1f08; // bool
		constexpr uint32_t m_bOnlyRenderInEffectsWaterPass = 0x1f09; // bool
		constexpr uint32_t m_bUseMixedResolutionRendering = 0x1f0a; // bool
		constexpr uint32_t m_bOnlyRenderInEffecsGameOverlay = 0x1f0b; // bool
		constexpr uint32_t m_stencilTestID = 0x1f0c; // char[128]
		constexpr uint32_t m_bStencilTestExclude = 0x1f8c; // bool
		constexpr uint32_t m_stencilWriteID = 0x1f8d; // char[128]
		constexpr uint32_t m_bWriteStencilOnDepthPass = 0x200d; // bool
		constexpr uint32_t m_bWriteStencilOnDepthFail = 0x200e; // bool
		constexpr uint32_t m_bReverseZBuffering = 0x200f; // bool
		constexpr uint32_t m_bDisableZBuffering = 0x2010; // bool
		constexpr uint32_t m_nFeatheringMode = 0x2014; // ParticleDepthFeatheringMode_t
		constexpr uint32_t m_flFeatheringMinDist = 0x2018; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flFeatheringMaxDist = 0x2178; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flFeatheringFilter = 0x22d8; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flDepthBias = 0x2438; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_nSortMethod = 0x2598; // ParticleSortingChoiceList_t
		constexpr uint32_t m_bBlendFramesSeq0 = 0x259c; // bool
		constexpr uint32_t m_bMaxLuminanceBlendingSequence0 = 0x259d; // bool
	}
	namespace C_OP_RenderSprites {
		constexpr uint32_t m_nSequenceOverride = 0x27e8; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_nOrientationType = 0x2948; // ParticleOrientationChoiceList_t
		constexpr uint32_t m_nOrientationControlPoint = 0x294c; // int32
		constexpr uint32_t m_bUseYawWithNormalAligned = 0x2950; // bool
		constexpr uint32_t m_flMinSize = 0x2958; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flMaxSize = 0x2ab8; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flAlphaAdjustWithSizeAdjust = 0x2c18; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flStartFadeSize = 0x2d78; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flEndFadeSize = 0x2ed8; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flStartFadeDot = 0x3038; // float32
		constexpr uint32_t m_flEndFadeDot = 0x303c; // float32
		constexpr uint32_t m_bDistanceAlpha = 0x3040; // bool
		constexpr uint32_t m_bSoftEdges = 0x3041; // bool
		constexpr uint32_t m_flEdgeSoftnessStart = 0x3044; // float32
		constexpr uint32_t m_flEdgeSoftnessEnd = 0x3048; // float32
		constexpr uint32_t m_bOutline = 0x304c; // bool
		constexpr uint32_t m_OutlineColor = 0x304d; // Color
		constexpr uint32_t m_nOutlineAlpha = 0x3054; // int32
		constexpr uint32_t m_flOutlineStart0 = 0x3058; // float32
		constexpr uint32_t m_flOutlineStart1 = 0x305c; // float32
		constexpr uint32_t m_flOutlineEnd0 = 0x3060; // float32
		constexpr uint32_t m_flOutlineEnd1 = 0x3064; // float32
		constexpr uint32_t m_nLightingMode = 0x3068; // ParticleLightingQuality_t
		constexpr uint32_t m_flLightingTessellation = 0x3070; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flLightingDirectionality = 0x31d0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_bParticleShadows = 0x3330; // bool
		constexpr uint32_t m_flShadowDensity = 0x3334; // float32
		constexpr uint32_t m_replicationParameters = 0x3338; // CReplicationParameters
	}
	namespace C_DOTAWearableItem {
		constexpr uint32_t m_bOwnerModelChanged = 0xb18; // bool
		constexpr uint32_t m_bIsGeneratingEconItem = 0xb19; // bool
		constexpr uint32_t m_bIsItemVisibleOnGeneratedEntity = 0xb1a; // bool
		constexpr uint32_t m_bHideWearableButDrawAdditionalWearables = 0xb1b; // bool
		constexpr uint32_t m_hAdditionalWearable = 0xb1c; // CHandle< CBaseAnimatingActivity >
		constexpr uint32_t m_hDrawWearable = 0xb20; // CHandle< C_DOTAWearableItem >
		constexpr uint32_t m_bHiddenByCombiner = 0xb24; // bool
		constexpr uint32_t m_bHiddenByEquipmentSlot = 0xb25; // bool
		constexpr uint32_t m_bIsPortrait = 0xb26; // bool
		constexpr uint32_t m_fZDelta = 0xb28; // float32
		constexpr uint32_t m_combinerMaterialOverrideList = 0xb30; // CUtlVector< CStrongHandleCopyable< InfoForResourceTypeIMaterial2 > >
		constexpr uint32_t m_bCombinerMaterialOverrideListChanged = 0xb50; // bool
		constexpr uint32_t m_bRubickFollower = 0xb51; // bool
		constexpr uint32_t m_bHasPlayerModel = 0xb52; // bool
	}
	namespace C_EconItemView {
		constexpr uint32_t m_iItemDefinitionIndex = 0x8; // item_definition_index_t
		constexpr uint32_t m_iEntityQuality = 0xc; // int32
		constexpr uint32_t m_iEntityLevel = 0x10; // uint32
		constexpr uint32_t m_iItemID = 0x18; // itemid_t
		constexpr uint32_t m_iAccountID = 0x20; // uint32
		constexpr uint32_t m_iInventoryPosition = 0x24; // uint32
		constexpr uint32_t m_bInitialized = 0x30; // bool
		constexpr uint32_t m_nOverrideStyle = 0x31; // style_index_t
		constexpr uint32_t m_bIsStoreItem = 0x32; // bool
		constexpr uint32_t m_bIsTradeItem = 0x33; // bool
		constexpr uint32_t m_bHasComputedAttachedParticles = 0x34; // bool
		constexpr uint32_t m_bHasAttachedParticles = 0x35; // bool
		constexpr uint32_t m_iEntityQuantity = 0x38; // int32
		constexpr uint32_t m_unClientFlags = 0x3c; // uint8
		constexpr uint32_t m_unOverrideOrigin = 0x40; // eEconItemOrigin
		constexpr uint32_t m_AttributeList = 0x58; // CAttributeList
	}
	namespace C_DOTA_Item_Physical {
		constexpr uint32_t m_hItem = 0x800; // CHandle< C_DOTA_Item >
		constexpr uint32_t m_bIsLowPriorityHoverItem = 0x804; // bool
		constexpr uint32_t m_hOldItem = 0x808; // CHandle< C_DOTA_Item >
		constexpr uint32_t m_pszParticleName = 0x810; // char*
		constexpr uint32_t m_nFXIndex = 0x818; // ParticleIndex_t
		constexpr uint32_t m_bShowingTooltip = 0x81c; // bool
		constexpr uint32_t m_bShowingSimpleTooltip = 0x81d; // bool
	}
	namespace CDOTA_Buff {
		constexpr uint32_t m_bIsAura = 0x0; // bitfield:1
		constexpr uint32_t m_name = 0x28; // CUtlSymbolLarge
		constexpr uint32_t m_iszModifierAura = 0x38; // CUtlSymbolLarge
		constexpr uint32_t m_iSerialNumber = 0x48; // int32
		constexpr uint32_t m_iStringIndex = 0x4c; // int32
		constexpr uint32_t m_iIndex = 0x50; // int32
		constexpr uint32_t m_flCreationTime = 0x54; // GameTime_t
		constexpr uint32_t m_iCreationFrame = 0x58; // int32
		constexpr uint32_t m_flLastAppliedTime = 0x5c; // GameTime_t
		constexpr uint32_t m_flDuration = 0x60; // float32
		constexpr uint32_t m_flDieTime = 0x64; // GameTime_t
		constexpr uint32_t m_hCaster = 0x68; // CHandle< CBaseEntity >
		constexpr uint32_t m_hAbility = 0x6c; // CHandle< CBaseEntity >
		constexpr uint32_t m_hParent = 0x70; // CHandle< CBaseEntity >
		constexpr uint32_t m_hAuraOwner = 0x74; // CHandle< CBaseEntity >
		constexpr uint32_t m_iStackCount = 0x78; // int32
		constexpr uint32_t m_iAuraSearchTeam = 0x7c; // int16
		constexpr uint32_t m_iAuraSearchType = 0x7e; // int16
		constexpr uint32_t m_iAuraSearchFlags = 0x80; // int32
		constexpr uint32_t m_iAuraRadius = 0x84; // int32
		constexpr uint32_t m_iTeam = 0x88; // int32
		constexpr uint32_t m_iAttributes = 0x8c; // int32
		constexpr uint32_t m_iPaddingToMakeSchemaHappy2 = 0x90; // int16
		constexpr uint32_t m_bPurgedDestroy = 0x93; // bool
		constexpr uint32_t m_flPreviousTick = 0x94; // GameTime_t
		constexpr uint32_t m_flThinkInterval = 0x98; // float32
		constexpr uint32_t m_flThinkTimeAccumulator = 0x9c; // float32
		constexpr uint32_t m_iParticles = 0xa0; // CUtlVector< CDOTA_BuffParticle >
		constexpr uint32_t m_hAuraUnits = 0xb8; // CUtlVector< CHandle< CBaseEntity > >
		constexpr uint32_t m_hScriptScope = 0x16e0; // HSCRIPT
	}
	namespace CParticleFunctionRenderer {
		constexpr uint32_t VisibilityInputs = 0x1c0; // CParticleVisibilityInputs
		constexpr uint32_t m_bCannotBeRefracted = 0x208; // bool
		constexpr uint32_t m_bSkipRenderingOnMobile = 0x209; // bool
	}
	namespace CNewParticleEffect {
		constexpr uint32_t m_bDontRemove = 0x0; // bitfield:1
		constexpr uint32_t m_pNext = 0x10; // CNewParticleEffect*
		constexpr uint32_t m_pPrev = 0x18; // CNewParticleEffect*
		constexpr uint32_t m_pParticles = 0x20; // IParticleCollection*
		constexpr uint32_t m_pDebugName = 0x28; // char*
		constexpr uint32_t m_vSortOrigin = 0x40; // Vector
		constexpr uint32_t m_flScale = 0x4c; // float32
		constexpr uint32_t m_hOwner = 0x50; // PARTICLE_EHANDLE__*
		constexpr uint32_t m_pOwningParticleProperty = 0x58; // CParticleProperty*
		constexpr uint32_t m_flFreezeTransitionStart = 0x70; // float32
		constexpr uint32_t m_flFreezeTransitionDuration = 0x74; // float32
		constexpr uint32_t m_flFreezeTransitionOverride = 0x78; // float32
		constexpr uint32_t m_bFreezeTransitionActive = 0x7c; // bool
		constexpr uint32_t m_bFreezeTargetState = 0x7d; // bool
		constexpr uint32_t m_bCanFreeze = 0x7e; // bool
		constexpr uint32_t m_LastMin = 0x80; // Vector
		constexpr uint32_t m_LastMax = 0x8c; // Vector
		constexpr uint32_t m_nSplitScreenUser = 0x98; // CSplitScreenSlot
		constexpr uint32_t m_vecAggregationCenter = 0x9c; // Vector
		constexpr uint32_t m_RefCount = 0xc0; // int32
	}
	namespace CParticleSystemDefinition {
		constexpr uint32_t m_nBehaviorVersion = 0x8; // int32
		constexpr uint32_t m_PreEmissionOperators = 0x10; // CUtlVector< CParticleFunctionPreEmission* >
		constexpr uint32_t m_Emitters = 0x28; // CUtlVector< CParticleFunctionEmitter* >
		constexpr uint32_t m_Initializers = 0x40; // CUtlVector< CParticleFunctionInitializer* >
		constexpr uint32_t m_Operators = 0x58; // CUtlVector< CParticleFunctionOperator* >
		constexpr uint32_t m_ForceGenerators = 0x70; // CUtlVector< CParticleFunctionForce* >
		constexpr uint32_t m_Constraints = 0x88; // CUtlVector< CParticleFunctionConstraint* >
		constexpr uint32_t m_Renderers = 0xa0; // CUtlVector< CParticleFunctionRenderer* >
		constexpr uint32_t m_Children = 0xb8; // CUtlVector< ParticleChildrenInfo_t >
		constexpr uint32_t m_nFirstMultipleOverride_BackwardCompat = 0x178; // int32
		constexpr uint32_t m_nInitialParticles = 0x210; // int32
		constexpr uint32_t m_nMaxParticles = 0x214; // int32
		constexpr uint32_t m_nGroupID = 0x218; // int32
		constexpr uint32_t m_BoundingBoxMin = 0x21c; // Vector
		constexpr uint32_t m_BoundingBoxMax = 0x228; // Vector
		constexpr uint32_t m_flDepthSortBias = 0x234; // float32
		constexpr uint32_t m_nSortOverridePositionCP = 0x238; // int32
		constexpr uint32_t m_bInfiniteBounds = 0x23c; // bool
		constexpr uint32_t m_bEnableNamedValues = 0x23d; // bool
		constexpr uint32_t m_NamedValueDomain = 0x240; // CUtlString
		constexpr uint32_t m_NamedValueLocals = 0x248; // CUtlVector< ParticleNamedValueSource_t* >
		constexpr uint32_t m_ConstantColor = 0x260; // Color
		constexpr uint32_t m_ConstantNormal = 0x264; // Vector
		constexpr uint32_t m_flConstantRadius = 0x270; // float32
		constexpr uint32_t m_flConstantRotation = 0x274; // float32
		constexpr uint32_t m_flConstantRotationSpeed = 0x278; // float32
		constexpr uint32_t m_flConstantLifespan = 0x27c; // float32
		constexpr uint32_t m_nConstantSequenceNumber = 0x280; // int32
		constexpr uint32_t m_nConstantSequenceNumber1 = 0x284; // int32
		constexpr uint32_t m_nSnapshotControlPoint = 0x288; // int32
		constexpr uint32_t m_hSnapshot = 0x290; // CStrongHandle< InfoForResourceTypeIParticleSnapshot >
		constexpr uint32_t m_pszCullReplacementName = 0x298; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
		constexpr uint32_t m_flCullRadius = 0x2a0; // float32
		constexpr uint32_t m_flCullFillCost = 0x2a4; // float32
		constexpr uint32_t m_nCullControlPoint = 0x2a8; // int32
		constexpr uint32_t m_hFallback = 0x2b0; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
		constexpr uint32_t m_nFallbackMaxCount = 0x2b8; // int32
		constexpr uint32_t m_hLowViolenceDef = 0x2c0; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
		constexpr uint32_t m_hReferenceReplacement = 0x2c8; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
		constexpr uint32_t m_flPreSimulationTime = 0x2d0; // float32
		constexpr uint32_t m_flStopSimulationAfterTime = 0x2d4; // float32
		constexpr uint32_t m_flMaximumTimeStep = 0x2d8; // float32
		constexpr uint32_t m_flMaximumSimTime = 0x2dc; // float32
		constexpr uint32_t m_flMinimumSimTime = 0x2e0; // float32
		constexpr uint32_t m_flMinimumTimeStep = 0x2e4; // float32
		constexpr uint32_t m_nMinimumFrames = 0x2e8; // int32
		constexpr uint32_t m_nMinCPULevel = 0x2ec; // int32
		constexpr uint32_t m_nMinGPULevel = 0x2f0; // int32
		constexpr uint32_t m_flNoDrawTimeToGoToSleep = 0x2f4; // float32
		constexpr uint32_t m_flMaxDrawDistance = 0x2f8; // float32
		constexpr uint32_t m_flStartFadeDistance = 0x2fc; // float32
		constexpr uint32_t m_flMaxCreationDistance = 0x300; // float32
		constexpr uint32_t m_nAggregationMinAvailableParticles = 0x304; // int32
		constexpr uint32_t m_flAggregateRadius = 0x308; // float32
		constexpr uint32_t m_bShouldBatch = 0x30c; // bool
		constexpr uint32_t m_bShouldHitboxesFallbackToRenderBounds = 0x30d; // bool
		constexpr uint32_t m_bShouldHitboxesFallbackToSnapshot = 0x30e; // bool
		constexpr uint32_t m_bShouldHitboxesFallbackToCollisionHulls = 0x30f; // bool
		constexpr uint32_t m_nViewModelEffect = 0x310; // InheritableBoolType_t
		constexpr uint32_t m_bScreenSpaceEffect = 0x314; // bool
		constexpr uint32_t m_pszTargetLayerID = 0x318; // CUtlSymbolLarge
		constexpr uint32_t m_nSkipRenderControlPoint = 0x320; // int32
		constexpr uint32_t m_nAllowRenderControlPoint = 0x324; // int32
		constexpr uint32_t m_bShouldSort = 0x328; // bool
		constexpr uint32_t m_controlPointConfigurations = 0x370; // CUtlVector< ParticleControlPointConfiguration_t >
	}
	namespace CParticleVecInput {
		constexpr uint32_t m_nType = 0x10; // ParticleVecType_t
		constexpr uint32_t m_vLiteralValue = 0x14; // Vector
		constexpr uint32_t m_LiteralColor = 0x20; // Color
		constexpr uint32_t m_NamedValue = 0x28; // CParticleNamedValueRef
		constexpr uint32_t m_bFollowNamedValue = 0x68; // bool
		constexpr uint32_t m_nVectorAttribute = 0x6c; // ParticleAttributeIndex_t
		constexpr uint32_t m_vVectorAttributeScale = 0x70; // Vector
		constexpr uint32_t m_nControlPoint = 0x7c; // int32
		constexpr uint32_t m_nDeltaControlPoint = 0x80; // int32
		constexpr uint32_t m_vCPValueScale = 0x84; // Vector
		constexpr uint32_t m_vCPRelativePosition = 0x90; // Vector
		constexpr uint32_t m_vCPRelativeDir = 0x9c; // Vector
		constexpr uint32_t m_FloatComponentX = 0xa8; // CParticleFloatInput
		constexpr uint32_t m_FloatComponentY = 0x208; // CParticleFloatInput
		constexpr uint32_t m_FloatComponentZ = 0x368; // CParticleFloatInput
		constexpr uint32_t m_FloatInterp = 0x4c8; // CParticleFloatInput
		constexpr uint32_t m_flInterpInput0 = 0x628; // float32
		constexpr uint32_t m_flInterpInput1 = 0x62c; // float32
		constexpr uint32_t m_vInterpOutput0 = 0x630; // Vector
		constexpr uint32_t m_vInterpOutput1 = 0x63c; // Vector
		constexpr uint32_t m_Gradient = 0x648; // CColorGradient
		constexpr uint32_t m_vRandomMin = 0x660; // Vector
		constexpr uint32_t m_vRandomMax = 0x66c; // Vector
	}
}