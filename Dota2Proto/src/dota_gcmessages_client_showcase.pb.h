// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_showcase.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fshowcase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fshowcase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "dota_shared_enums.pb.h"
#include "dota_gcmessages_common.pb.h"
#include "dota_gcmessages_webapi.pb.h"
#include "gcsdk_gcmessages.pb.h"
#include "base_gcmessages.pb.h"
#include "econ_gcmessages.pb.h"
#include "dota_gcmessages_client.pb.h"
#include "valveextensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fshowcase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
class CMsgClientToGCShowcaseAdminConvict;
struct CMsgClientToGCShowcaseAdminConvictDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminConvictDefaultTypeInternal _CMsgClientToGCShowcaseAdminConvict_default_instance_;
class CMsgClientToGCShowcaseAdminConvictResponse;
struct CMsgClientToGCShowcaseAdminConvictResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminConvictResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminConvictResponse_default_instance_;
class CMsgClientToGCShowcaseAdminExonerate;
struct CMsgClientToGCShowcaseAdminExonerateDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminExonerateDefaultTypeInternal _CMsgClientToGCShowcaseAdminExonerate_default_instance_;
class CMsgClientToGCShowcaseAdminExonerateResponse;
struct CMsgClientToGCShowcaseAdminExonerateResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminExonerateResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminExonerateResponse_default_instance_;
class CMsgClientToGCShowcaseAdminGetReportsRollup;
struct CMsgClientToGCShowcaseAdminGetReportsRollupDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminGetReportsRollupDefaultTypeInternal _CMsgClientToGCShowcaseAdminGetReportsRollup_default_instance_;
class CMsgClientToGCShowcaseAdminGetReportsRollupList;
struct CMsgClientToGCShowcaseAdminGetReportsRollupListDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminGetReportsRollupListDefaultTypeInternal _CMsgClientToGCShowcaseAdminGetReportsRollupList_default_instance_;
class CMsgClientToGCShowcaseAdminGetReportsRollupListResponse;
struct CMsgClientToGCShowcaseAdminGetReportsRollupListResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminGetReportsRollupListResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_default_instance_;
class CMsgClientToGCShowcaseAdminGetReportsRollupResponse;
struct CMsgClientToGCShowcaseAdminGetReportsRollupResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminGetReportsRollupResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminGetReportsRollupResponse_default_instance_;
class CMsgClientToGCShowcaseAdminGetUserDetails;
struct CMsgClientToGCShowcaseAdminGetUserDetailsDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminGetUserDetailsDefaultTypeInternal _CMsgClientToGCShowcaseAdminGetUserDetails_default_instance_;
class CMsgClientToGCShowcaseAdminGetUserDetailsResponse;
struct CMsgClientToGCShowcaseAdminGetUserDetailsResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminGetUserDetailsResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminGetUserDetailsResponse_default_instance_;
class CMsgClientToGCShowcaseAdminLockAccount;
struct CMsgClientToGCShowcaseAdminLockAccountDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminLockAccountDefaultTypeInternal _CMsgClientToGCShowcaseAdminLockAccount_default_instance_;
class CMsgClientToGCShowcaseAdminLockAccountResponse;
struct CMsgClientToGCShowcaseAdminLockAccountResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminLockAccountResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminLockAccountResponse_default_instance_;
class CMsgClientToGCShowcaseAdminReset;
struct CMsgClientToGCShowcaseAdminResetDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminResetDefaultTypeInternal _CMsgClientToGCShowcaseAdminReset_default_instance_;
class CMsgClientToGCShowcaseAdminResetResponse;
struct CMsgClientToGCShowcaseAdminResetResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseAdminResetResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminResetResponse_default_instance_;
class CMsgClientToGCShowcaseGetUserData;
struct CMsgClientToGCShowcaseGetUserDataDefaultTypeInternal;
extern CMsgClientToGCShowcaseGetUserDataDefaultTypeInternal _CMsgClientToGCShowcaseGetUserData_default_instance_;
class CMsgClientToGCShowcaseGetUserDataResponse;
struct CMsgClientToGCShowcaseGetUserDataResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseGetUserDataResponseDefaultTypeInternal _CMsgClientToGCShowcaseGetUserDataResponse_default_instance_;
class CMsgClientToGCShowcaseModerationApplyModeration;
struct CMsgClientToGCShowcaseModerationApplyModerationDefaultTypeInternal;
extern CMsgClientToGCShowcaseModerationApplyModerationDefaultTypeInternal _CMsgClientToGCShowcaseModerationApplyModeration_default_instance_;
class CMsgClientToGCShowcaseModerationApplyModerationResponse;
struct CMsgClientToGCShowcaseModerationApplyModerationResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseModerationApplyModerationResponseDefaultTypeInternal _CMsgClientToGCShowcaseModerationApplyModerationResponse_default_instance_;
class CMsgClientToGCShowcaseModerationGetQueue;
struct CMsgClientToGCShowcaseModerationGetQueueDefaultTypeInternal;
extern CMsgClientToGCShowcaseModerationGetQueueDefaultTypeInternal _CMsgClientToGCShowcaseModerationGetQueue_default_instance_;
class CMsgClientToGCShowcaseModerationGetQueueResponse;
struct CMsgClientToGCShowcaseModerationGetQueueResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseModerationGetQueueResponseDefaultTypeInternal _CMsgClientToGCShowcaseModerationGetQueueResponse_default_instance_;
class CMsgClientToGCShowcaseSetUserData;
struct CMsgClientToGCShowcaseSetUserDataDefaultTypeInternal;
extern CMsgClientToGCShowcaseSetUserDataDefaultTypeInternal _CMsgClientToGCShowcaseSetUserData_default_instance_;
class CMsgClientToGCShowcaseSetUserDataResponse;
struct CMsgClientToGCShowcaseSetUserDataResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseSetUserDataResponseDefaultTypeInternal _CMsgClientToGCShowcaseSetUserDataResponse_default_instance_;
class CMsgClientToGCShowcaseSubmitReport;
struct CMsgClientToGCShowcaseSubmitReportDefaultTypeInternal;
extern CMsgClientToGCShowcaseSubmitReportDefaultTypeInternal _CMsgClientToGCShowcaseSubmitReport_default_instance_;
class CMsgClientToGCShowcaseSubmitReportResponse;
struct CMsgClientToGCShowcaseSubmitReportResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseSubmitReportResponseDefaultTypeInternal _CMsgClientToGCShowcaseSubmitReportResponse_default_instance_;
class CMsgHeroPlusInfo;
struct CMsgHeroPlusInfoDefaultTypeInternal;
extern CMsgHeroPlusInfoDefaultTypeInternal _CMsgHeroPlusInfo_default_instance_;
class CMsgShowcase;
struct CMsgShowcaseDefaultTypeInternal;
extern CMsgShowcaseDefaultTypeInternal _CMsgShowcase_default_instance_;
class CMsgShowcaseAdminUserDetails;
struct CMsgShowcaseAdminUserDetailsDefaultTypeInternal;
extern CMsgShowcaseAdminUserDetailsDefaultTypeInternal _CMsgShowcaseAdminUserDetails_default_instance_;
class CMsgShowcaseAuditEntry;
struct CMsgShowcaseAuditEntryDefaultTypeInternal;
extern CMsgShowcaseAuditEntryDefaultTypeInternal _CMsgShowcaseAuditEntry_default_instance_;
class CMsgShowcaseBackground;
struct CMsgShowcaseBackgroundDefaultTypeInternal;
extern CMsgShowcaseBackgroundDefaultTypeInternal _CMsgShowcaseBackground_default_instance_;
class CMsgShowcaseBackground_Data;
struct CMsgShowcaseBackground_DataDefaultTypeInternal;
extern CMsgShowcaseBackground_DataDefaultTypeInternal _CMsgShowcaseBackground_Data_default_instance_;
class CMsgShowcaseEconItemReference;
struct CMsgShowcaseEconItemReferenceDefaultTypeInternal;
extern CMsgShowcaseEconItemReferenceDefaultTypeInternal _CMsgShowcaseEconItemReference_default_instance_;
class CMsgShowcaseItem;
struct CMsgShowcaseItemDefaultTypeInternal;
extern CMsgShowcaseItemDefaultTypeInternal _CMsgShowcaseItem_default_instance_;
class CMsgShowcaseItemData;
struct CMsgShowcaseItemDataDefaultTypeInternal;
extern CMsgShowcaseItemDataDefaultTypeInternal _CMsgShowcaseItemData_default_instance_;
class CMsgShowcaseItemPosition;
struct CMsgShowcaseItemPositionDefaultTypeInternal;
extern CMsgShowcaseItemPositionDefaultTypeInternal _CMsgShowcaseItemPosition_default_instance_;
class CMsgShowcaseItem_ChatWheel;
struct CMsgShowcaseItem_ChatWheelDefaultTypeInternal;
extern CMsgShowcaseItem_ChatWheelDefaultTypeInternal _CMsgShowcaseItem_ChatWheel_default_instance_;
class CMsgShowcaseItem_ChatWheel_Data;
struct CMsgShowcaseItem_ChatWheel_DataDefaultTypeInternal;
extern CMsgShowcaseItem_ChatWheel_DataDefaultTypeInternal _CMsgShowcaseItem_ChatWheel_Data_default_instance_;
class CMsgShowcaseItem_EconItem;
struct CMsgShowcaseItem_EconItemDefaultTypeInternal;
extern CMsgShowcaseItem_EconItemDefaultTypeInternal _CMsgShowcaseItem_EconItem_default_instance_;
class CMsgShowcaseItem_EconItem_Data;
struct CMsgShowcaseItem_EconItem_DataDefaultTypeInternal;
extern CMsgShowcaseItem_EconItem_DataDefaultTypeInternal _CMsgShowcaseItem_EconItem_Data_default_instance_;
class CMsgShowcaseItem_Emoticon;
struct CMsgShowcaseItem_EmoticonDefaultTypeInternal;
extern CMsgShowcaseItem_EmoticonDefaultTypeInternal _CMsgShowcaseItem_Emoticon_default_instance_;
class CMsgShowcaseItem_Emoticon_Data;
struct CMsgShowcaseItem_Emoticon_DataDefaultTypeInternal;
extern CMsgShowcaseItem_Emoticon_DataDefaultTypeInternal _CMsgShowcaseItem_Emoticon_Data_default_instance_;
class CMsgShowcaseItem_Hero;
struct CMsgShowcaseItem_HeroDefaultTypeInternal;
extern CMsgShowcaseItem_HeroDefaultTypeInternal _CMsgShowcaseItem_Hero_default_instance_;
class CMsgShowcaseItem_HeroIcon;
struct CMsgShowcaseItem_HeroIconDefaultTypeInternal;
extern CMsgShowcaseItem_HeroIconDefaultTypeInternal _CMsgShowcaseItem_HeroIcon_default_instance_;
class CMsgShowcaseItem_HeroIcon_Data;
struct CMsgShowcaseItem_HeroIcon_DataDefaultTypeInternal;
extern CMsgShowcaseItem_HeroIcon_DataDefaultTypeInternal _CMsgShowcaseItem_HeroIcon_Data_default_instance_;
class CMsgShowcaseItem_Hero_Data;
struct CMsgShowcaseItem_Hero_DataDefaultTypeInternal;
extern CMsgShowcaseItem_Hero_DataDefaultTypeInternal _CMsgShowcaseItem_Hero_Data_default_instance_;
class CMsgShowcaseItem_PlayerMatch;
struct CMsgShowcaseItem_PlayerMatchDefaultTypeInternal;
extern CMsgShowcaseItem_PlayerMatchDefaultTypeInternal _CMsgShowcaseItem_PlayerMatch_default_instance_;
class CMsgShowcaseItem_PlayerMatch_Data;
struct CMsgShowcaseItem_PlayerMatch_DataDefaultTypeInternal;
extern CMsgShowcaseItem_PlayerMatch_DataDefaultTypeInternal _CMsgShowcaseItem_PlayerMatch_Data_default_instance_;
class CMsgShowcaseItem_SpiderGraph;
struct CMsgShowcaseItem_SpiderGraphDefaultTypeInternal;
extern CMsgShowcaseItem_SpiderGraphDefaultTypeInternal _CMsgShowcaseItem_SpiderGraph_default_instance_;
class CMsgShowcaseItem_SpiderGraph_Data;
struct CMsgShowcaseItem_SpiderGraph_DataDefaultTypeInternal;
extern CMsgShowcaseItem_SpiderGraph_DataDefaultTypeInternal _CMsgShowcaseItem_SpiderGraph_Data_default_instance_;
class CMsgShowcaseItem_Stat;
struct CMsgShowcaseItem_StatDefaultTypeInternal;
extern CMsgShowcaseItem_StatDefaultTypeInternal _CMsgShowcaseItem_Stat_default_instance_;
class CMsgShowcaseItem_Stat_Data;
struct CMsgShowcaseItem_Stat_DataDefaultTypeInternal;
extern CMsgShowcaseItem_Stat_DataDefaultTypeInternal _CMsgShowcaseItem_Stat_Data_default_instance_;
class CMsgShowcaseItem_Trophy;
struct CMsgShowcaseItem_TrophyDefaultTypeInternal;
extern CMsgShowcaseItem_TrophyDefaultTypeInternal _CMsgShowcaseItem_Trophy_default_instance_;
class CMsgShowcaseItem_Trophy_Data;
struct CMsgShowcaseItem_Trophy_DataDefaultTypeInternal;
extern CMsgShowcaseItem_Trophy_DataDefaultTypeInternal _CMsgShowcaseItem_Trophy_Data_default_instance_;
class CMsgShowcaseItem_UserFeed;
struct CMsgShowcaseItem_UserFeedDefaultTypeInternal;
extern CMsgShowcaseItem_UserFeedDefaultTypeInternal _CMsgShowcaseItem_UserFeed_default_instance_;
class CMsgShowcaseItem_UserFeed_Data;
struct CMsgShowcaseItem_UserFeed_DataDefaultTypeInternal;
extern CMsgShowcaseItem_UserFeed_DataDefaultTypeInternal _CMsgShowcaseItem_UserFeed_Data_default_instance_;
class CMsgShowcaseModerationInfo;
struct CMsgShowcaseModerationInfoDefaultTypeInternal;
extern CMsgShowcaseModerationInfoDefaultTypeInternal _CMsgShowcaseModerationInfo_default_instance_;
class CMsgShowcaseReport;
struct CMsgShowcaseReportDefaultTypeInternal;
extern CMsgShowcaseReportDefaultTypeInternal _CMsgShowcaseReport_default_instance_;
class CMsgShowcaseReportsRollup;
struct CMsgShowcaseReportsRollupDefaultTypeInternal;
extern CMsgShowcaseReportsRollupDefaultTypeInternal _CMsgShowcaseReportsRollup_default_instance_;
class CMsgShowcaseReportsRollupEntry;
struct CMsgShowcaseReportsRollupEntryDefaultTypeInternal;
extern CMsgShowcaseReportsRollupEntryDefaultTypeInternal _CMsgShowcaseReportsRollupEntry_default_instance_;
class CMsgShowcaseReportsRollupInfo;
struct CMsgShowcaseReportsRollupInfoDefaultTypeInternal;
extern CMsgShowcaseReportsRollupInfoDefaultTypeInternal _CMsgShowcaseReportsRollupInfo_default_instance_;
class CMsgShowcaseReportsRollupList;
struct CMsgShowcaseReportsRollupListDefaultTypeInternal;
extern CMsgShowcaseReportsRollupListDefaultTypeInternal _CMsgShowcaseReportsRollupList_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientToGCShowcaseAdminConvict* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminConvict>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminConvictResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminConvictResponse>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminExonerate* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminExonerate>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminExonerateResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminExonerateResponse>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminGetReportsRollup* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminGetReportsRollup>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminGetReportsRollupList* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminGetReportsRollupList>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminGetReportsRollupResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminGetReportsRollupResponse>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminGetUserDetails* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminGetUserDetails>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminGetUserDetailsResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminGetUserDetailsResponse>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminLockAccount* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminLockAccount>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminLockAccountResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminLockAccountResponse>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminReset* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminReset>(Arena*);
template<> ::CMsgClientToGCShowcaseAdminResetResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseAdminResetResponse>(Arena*);
template<> ::CMsgClientToGCShowcaseGetUserData* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseGetUserData>(Arena*);
template<> ::CMsgClientToGCShowcaseGetUserDataResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseGetUserDataResponse>(Arena*);
template<> ::CMsgClientToGCShowcaseModerationApplyModeration* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseModerationApplyModeration>(Arena*);
template<> ::CMsgClientToGCShowcaseModerationApplyModerationResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseModerationApplyModerationResponse>(Arena*);
template<> ::CMsgClientToGCShowcaseModerationGetQueue* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseModerationGetQueue>(Arena*);
template<> ::CMsgClientToGCShowcaseModerationGetQueueResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseModerationGetQueueResponse>(Arena*);
template<> ::CMsgClientToGCShowcaseSetUserData* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseSetUserData>(Arena*);
template<> ::CMsgClientToGCShowcaseSetUserDataResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseSetUserDataResponse>(Arena*);
template<> ::CMsgClientToGCShowcaseSubmitReport* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseSubmitReport>(Arena*);
template<> ::CMsgClientToGCShowcaseSubmitReportResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseSubmitReportResponse>(Arena*);
template<> ::CMsgHeroPlusInfo* Arena::CreateMaybeMessage<::CMsgHeroPlusInfo>(Arena*);
template<> ::CMsgShowcase* Arena::CreateMaybeMessage<::CMsgShowcase>(Arena*);
template<> ::CMsgShowcaseAdminUserDetails* Arena::CreateMaybeMessage<::CMsgShowcaseAdminUserDetails>(Arena*);
template<> ::CMsgShowcaseAuditEntry* Arena::CreateMaybeMessage<::CMsgShowcaseAuditEntry>(Arena*);
template<> ::CMsgShowcaseBackground* Arena::CreateMaybeMessage<::CMsgShowcaseBackground>(Arena*);
template<> ::CMsgShowcaseBackground_Data* Arena::CreateMaybeMessage<::CMsgShowcaseBackground_Data>(Arena*);
template<> ::CMsgShowcaseEconItemReference* Arena::CreateMaybeMessage<::CMsgShowcaseEconItemReference>(Arena*);
template<> ::CMsgShowcaseItem* Arena::CreateMaybeMessage<::CMsgShowcaseItem>(Arena*);
template<> ::CMsgShowcaseItemData* Arena::CreateMaybeMessage<::CMsgShowcaseItemData>(Arena*);
template<> ::CMsgShowcaseItemPosition* Arena::CreateMaybeMessage<::CMsgShowcaseItemPosition>(Arena*);
template<> ::CMsgShowcaseItem_ChatWheel* Arena::CreateMaybeMessage<::CMsgShowcaseItem_ChatWheel>(Arena*);
template<> ::CMsgShowcaseItem_ChatWheel_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_ChatWheel_Data>(Arena*);
template<> ::CMsgShowcaseItem_EconItem* Arena::CreateMaybeMessage<::CMsgShowcaseItem_EconItem>(Arena*);
template<> ::CMsgShowcaseItem_EconItem_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_EconItem_Data>(Arena*);
template<> ::CMsgShowcaseItem_Emoticon* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Emoticon>(Arena*);
template<> ::CMsgShowcaseItem_Emoticon_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Emoticon_Data>(Arena*);
template<> ::CMsgShowcaseItem_Hero* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Hero>(Arena*);
template<> ::CMsgShowcaseItem_HeroIcon* Arena::CreateMaybeMessage<::CMsgShowcaseItem_HeroIcon>(Arena*);
template<> ::CMsgShowcaseItem_HeroIcon_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_HeroIcon_Data>(Arena*);
template<> ::CMsgShowcaseItem_Hero_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Hero_Data>(Arena*);
template<> ::CMsgShowcaseItem_PlayerMatch* Arena::CreateMaybeMessage<::CMsgShowcaseItem_PlayerMatch>(Arena*);
template<> ::CMsgShowcaseItem_PlayerMatch_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_PlayerMatch_Data>(Arena*);
template<> ::CMsgShowcaseItem_SpiderGraph* Arena::CreateMaybeMessage<::CMsgShowcaseItem_SpiderGraph>(Arena*);
template<> ::CMsgShowcaseItem_SpiderGraph_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_SpiderGraph_Data>(Arena*);
template<> ::CMsgShowcaseItem_Stat* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Stat>(Arena*);
template<> ::CMsgShowcaseItem_Stat_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Stat_Data>(Arena*);
template<> ::CMsgShowcaseItem_Trophy* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Trophy>(Arena*);
template<> ::CMsgShowcaseItem_Trophy_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Trophy_Data>(Arena*);
template<> ::CMsgShowcaseItem_UserFeed* Arena::CreateMaybeMessage<::CMsgShowcaseItem_UserFeed>(Arena*);
template<> ::CMsgShowcaseItem_UserFeed_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_UserFeed_Data>(Arena*);
template<> ::CMsgShowcaseModerationInfo* Arena::CreateMaybeMessage<::CMsgShowcaseModerationInfo>(Arena*);
template<> ::CMsgShowcaseReport* Arena::CreateMaybeMessage<::CMsgShowcaseReport>(Arena*);
template<> ::CMsgShowcaseReportsRollup* Arena::CreateMaybeMessage<::CMsgShowcaseReportsRollup>(Arena*);
template<> ::CMsgShowcaseReportsRollupEntry* Arena::CreateMaybeMessage<::CMsgShowcaseReportsRollupEntry>(Arena*);
template<> ::CMsgShowcaseReportsRollupInfo* Arena::CreateMaybeMessage<::CMsgShowcaseReportsRollupInfo>(Arena*);
template<> ::CMsgShowcaseReportsRollupList* Arena::CreateMaybeMessage<::CMsgShowcaseReportsRollupList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgShowcaseItem_PlayerMatch_EPlayerOutcome : int {
  CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eInvalid = 0,
  CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eWin = 1,
  CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eLoss = 2,
  CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eNotScored = 3
};
bool CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_IsValid(int value);
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_MIN = CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eInvalid;
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_MAX = CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eNotScored;
constexpr int CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_ARRAYSIZE = CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_descriptor();
template<typename T>
inline const std::string& CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgShowcaseItem_PlayerMatch_EPlayerOutcome>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_descriptor(), enum_t_value);
}
inline bool CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgShowcaseItem_PlayerMatch_EPlayerOutcome* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgShowcaseItem_PlayerMatch_EPlayerOutcome>(
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_descriptor(), name, value);
}
enum CMsgShowcase_EModerationState : int {
  CMsgShowcase_EModerationState_k_eModerationState_Ok = 0,
  CMsgShowcase_EModerationState_k_eModerationState_PendingApproval = 1
};
bool CMsgShowcase_EModerationState_IsValid(int value);
constexpr CMsgShowcase_EModerationState CMsgShowcase_EModerationState_EModerationState_MIN = CMsgShowcase_EModerationState_k_eModerationState_Ok;
constexpr CMsgShowcase_EModerationState CMsgShowcase_EModerationState_EModerationState_MAX = CMsgShowcase_EModerationState_k_eModerationState_PendingApproval;
constexpr int CMsgShowcase_EModerationState_EModerationState_ARRAYSIZE = CMsgShowcase_EModerationState_EModerationState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgShowcase_EModerationState_descriptor();
template<typename T>
inline const std::string& CMsgShowcase_EModerationState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgShowcase_EModerationState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgShowcase_EModerationState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgShowcase_EModerationState_descriptor(), enum_t_value);
}
inline bool CMsgShowcase_EModerationState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgShowcase_EModerationState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgShowcase_EModerationState>(
    CMsgShowcase_EModerationState_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseGetUserDataResponse_EResponse : int {
  CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eUnknownShowcase = 5
};
bool CMsgClientToGCShowcaseGetUserDataResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eUnknownShowcase;
constexpr int CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseGetUserDataResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseGetUserDataResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseGetUserDataResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseGetUserDataResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseGetUserDataResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseGetUserDataResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseGetUserDataResponse_EResponse>(
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseSetUserDataResponse_EResponse : int {
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eInvalid = 5,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eLockedFromEditing = 6,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eBudgetExceeded = 7,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eCommunicationScoreTooLow = 8
};
bool CMsgClientToGCShowcaseSetUserDataResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eCommunicationScoreTooLow;
constexpr int CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseSetUserDataResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseSetUserDataResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseSetUserDataResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseSetUserDataResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseSetUserDataResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseSetUserDataResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseSetUserDataResponse_EResponse>(
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseSubmitReportResponse_EResponse : int {
  CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eAlreadyReported = 5
};
bool CMsgClientToGCShowcaseSubmitReportResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseSubmitReportResponse_EResponse CMsgClientToGCShowcaseSubmitReportResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseSubmitReportResponse_EResponse CMsgClientToGCShowcaseSubmitReportResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eAlreadyReported;
constexpr int CMsgClientToGCShowcaseSubmitReportResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseSubmitReportResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseSubmitReportResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseSubmitReportResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseSubmitReportResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseSubmitReportResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseSubmitReportResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseSubmitReportResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseSubmitReportResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseSubmitReportResponse_EResponse>(
    CMsgClientToGCShowcaseSubmitReportResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse : int {
  CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eNoPermission = 5
};
bool CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eNoPermission;
constexpr int CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse>(
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse : int {
  CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eNoPermission = 5,
  CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eNotFound = 6
};
bool CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eNotFound;
constexpr int CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse>(
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse : int {
  CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eNoPermission = 5
};
bool CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eNoPermission;
constexpr int CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse>(
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseAdminResetResponse_EResponse : int {
  CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eNoPermission = 5
};
bool CMsgClientToGCShowcaseAdminResetResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseAdminResetResponse_EResponse CMsgClientToGCShowcaseAdminResetResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminResetResponse_EResponse CMsgClientToGCShowcaseAdminResetResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eNoPermission;
constexpr int CMsgClientToGCShowcaseAdminResetResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseAdminResetResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminResetResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseAdminResetResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseAdminResetResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseAdminResetResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseAdminResetResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseAdminResetResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseAdminResetResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseAdminResetResponse_EResponse>(
    CMsgClientToGCShowcaseAdminResetResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse : int {
  CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eNoPermission = 5
};
bool CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eNoPermission;
constexpr int CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse>(
    CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseAdminConvictResponse_EResponse : int {
  CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eNoPermission = 5,
  CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eAlreadyConvicted = 6
};
bool CMsgClientToGCShowcaseAdminConvictResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eAlreadyConvicted;
constexpr int CMsgClientToGCShowcaseAdminConvictResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseAdminConvictResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminConvictResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseAdminConvictResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseAdminConvictResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseAdminConvictResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseAdminConvictResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseAdminConvictResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseAdminConvictResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseAdminConvictResponse_EResponse>(
    CMsgClientToGCShowcaseAdminConvictResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseAdminExonerateResponse_EResponse : int {
  CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eNoPermission = 5,
  CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eAlreadyExonerated = 6
};
bool CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eAlreadyExonerated;
constexpr int CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseAdminExonerateResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseAdminExonerateResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseAdminExonerateResponse_EResponse>(
    CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse : int {
  CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eNoPermission = 5
};
bool CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eNoPermission;
constexpr int CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse>(
    CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse : int {
  CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eNoPermission = 5,
  CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eGone = 6
};
bool CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eGone;
constexpr int CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse>(
    CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_descriptor(), name, value);
}
enum EShowcaseHeroPlusFlag : int {
  k_eShowcaseHeroPlusFlag_None = 0,
  k_eShowcaseHeroPlusFlag_BadgePosTop = 1,
  k_eShowcaseHeroPlusFlag_BadgePosBottom = 2,
  k_eShowcaseHeroPlusFlag_BadgePosLeft = 4,
  k_eShowcaseHeroPlusFlag_BadgePosRight = 8,
  k_eShowcaseHeroPlusFlag_ShowRelics = 16
};
bool EShowcaseHeroPlusFlag_IsValid(int value);
constexpr EShowcaseHeroPlusFlag EShowcaseHeroPlusFlag_MIN = k_eShowcaseHeroPlusFlag_None;
constexpr EShowcaseHeroPlusFlag EShowcaseHeroPlusFlag_MAX = k_eShowcaseHeroPlusFlag_ShowRelics;
constexpr int EShowcaseHeroPlusFlag_ARRAYSIZE = EShowcaseHeroPlusFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseHeroPlusFlag_descriptor();
template<typename T>
inline const std::string& EShowcaseHeroPlusFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EShowcaseHeroPlusFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EShowcaseHeroPlusFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EShowcaseHeroPlusFlag_descriptor(), enum_t_value);
}
inline bool EShowcaseHeroPlusFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EShowcaseHeroPlusFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EShowcaseHeroPlusFlag>(
    EShowcaseHeroPlusFlag_descriptor(), name, value);
}
enum EShowcaseType : int {
  k_eShowcaseType_Invalid = 0,
  k_eShowcaseType_Profile = 1,
  k_eShowcaseType_MiniProfile = 2,
  k_eShowcaseType_DefaultProfile = 3,
  k_eShowcaseType_DefaultMiniProfile = 4
};
bool EShowcaseType_IsValid(int value);
constexpr EShowcaseType EShowcaseType_MIN = k_eShowcaseType_Invalid;
constexpr EShowcaseType EShowcaseType_MAX = k_eShowcaseType_DefaultMiniProfile;
constexpr int EShowcaseType_ARRAYSIZE = EShowcaseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseType_descriptor();
template<typename T>
inline const std::string& EShowcaseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EShowcaseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EShowcaseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EShowcaseType_descriptor(), enum_t_value);
}
inline bool EShowcaseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EShowcaseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EShowcaseType>(
    EShowcaseType_descriptor(), name, value);
}
enum EShowcaseItemState : int {
  k_eShowcaseItemState_Ok = 0,
  k_eShowcaseItemState_MinorModifications = 1,
  k_eShowcaseItemState_ValidityUnknown = 2,
  k_eShowcaseItemState_PartiallyInvalid = 3,
  k_eShowcaseItemState_Invalid = 4,
  k_eShowcaseItemState_Failure = 5
};
bool EShowcaseItemState_IsValid(int value);
constexpr EShowcaseItemState EShowcaseItemState_MIN = k_eShowcaseItemState_Ok;
constexpr EShowcaseItemState EShowcaseItemState_MAX = k_eShowcaseItemState_Failure;
constexpr int EShowcaseItemState_ARRAYSIZE = EShowcaseItemState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseItemState_descriptor();
template<typename T>
inline const std::string& EShowcaseItemState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EShowcaseItemState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EShowcaseItemState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EShowcaseItemState_descriptor(), enum_t_value);
}
inline bool EShowcaseItemState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EShowcaseItemState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EShowcaseItemState>(
    EShowcaseItemState_descriptor(), name, value);
}
enum EShowcaseAuditAction : int {
  k_eShowcaseAuditAction_Invalid = 0,
  k_eShowcaseAuditAction_ShowcaseChanged = 1,
  k_eShowcaseAuditAction_AdminShowcaseReset = 2,
  k_eShowcaseAuditAction_AdminShowcaseAccountLocked = 3,
  k_eShowcaseAuditAction_AdminShowcaseExonerated = 4,
  k_eShowcaseAuditAction_AdminShowcaseConvicted = 5,
  k_eShowcaseAuditAction_AdminModerationApproved = 6,
  k_eShowcaseAuditAction_AdminModerationRejected = 7
};
bool EShowcaseAuditAction_IsValid(int value);
constexpr EShowcaseAuditAction EShowcaseAuditAction_MIN = k_eShowcaseAuditAction_Invalid;
constexpr EShowcaseAuditAction EShowcaseAuditAction_MAX = k_eShowcaseAuditAction_AdminModerationRejected;
constexpr int EShowcaseAuditAction_ARRAYSIZE = EShowcaseAuditAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseAuditAction_descriptor();
template<typename T>
inline const std::string& EShowcaseAuditAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EShowcaseAuditAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EShowcaseAuditAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EShowcaseAuditAction_descriptor(), enum_t_value);
}
inline bool EShowcaseAuditAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EShowcaseAuditAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EShowcaseAuditAction>(
    EShowcaseAuditAction_descriptor(), name, value);
}
enum EShowcaseItemFlag : int {
  k_eShowcaseItemFlag_None = 0,
  k_eShowcaseItemFlag_FlipHorizontally = 1
};
bool EShowcaseItemFlag_IsValid(int value);
constexpr EShowcaseItemFlag EShowcaseItemFlag_MIN = k_eShowcaseItemFlag_None;
constexpr EShowcaseItemFlag EShowcaseItemFlag_MAX = k_eShowcaseItemFlag_FlipHorizontally;
constexpr int EShowcaseItemFlag_ARRAYSIZE = EShowcaseItemFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseItemFlag_descriptor();
template<typename T>
inline const std::string& EShowcaseItemFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EShowcaseItemFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EShowcaseItemFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EShowcaseItemFlag_descriptor(), enum_t_value);
}
inline bool EShowcaseItemFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EShowcaseItemFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EShowcaseItemFlag>(
    EShowcaseItemFlag_descriptor(), name, value);
}
enum EShowcaseItemFlag_Hero : int {
  k_eShowcaseItemFlag_Hero_None = 0,
  k_eShowcaseItemFlag_Hero_ShowPedestal = 1,
  k_eShowcaseItemFlag_Hero_UseCurrentLoadout = 2,
  k_eShowcaseItemFlag_Hero_ShowHeroCard = 4,
  k_eShowcaseItemFlag_Hero_HeroCardHideName = 8,
  k_eShowcaseItemFlag_Hero_HeroCardUseMovie = 16
};
bool EShowcaseItemFlag_Hero_IsValid(int value);
constexpr EShowcaseItemFlag_Hero EShowcaseItemFlag_Hero_MIN = k_eShowcaseItemFlag_Hero_None;
constexpr EShowcaseItemFlag_Hero EShowcaseItemFlag_Hero_MAX = k_eShowcaseItemFlag_Hero_HeroCardUseMovie;
constexpr int EShowcaseItemFlag_Hero_ARRAYSIZE = EShowcaseItemFlag_Hero_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseItemFlag_Hero_descriptor();
template<typename T>
inline const std::string& EShowcaseItemFlag_Hero_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EShowcaseItemFlag_Hero>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EShowcaseItemFlag_Hero_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EShowcaseItemFlag_Hero_descriptor(), enum_t_value);
}
inline bool EShowcaseItemFlag_Hero_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EShowcaseItemFlag_Hero* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EShowcaseItemFlag_Hero>(
    EShowcaseItemFlag_Hero_descriptor(), name, value);
}
// ===================================================================

class CMsgShowcaseEconItemReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseEconItemReference) */ {
 public:
  inline CMsgShowcaseEconItemReference() : CMsgShowcaseEconItemReference(nullptr) {}
  ~CMsgShowcaseEconItemReference() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseEconItemReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseEconItemReference(const CMsgShowcaseEconItemReference& from);
  CMsgShowcaseEconItemReference(CMsgShowcaseEconItemReference&& from) noexcept
    : CMsgShowcaseEconItemReference() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseEconItemReference& operator=(const CMsgShowcaseEconItemReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseEconItemReference& operator=(CMsgShowcaseEconItemReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseEconItemReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseEconItemReference* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseEconItemReference*>(
               &_CMsgShowcaseEconItemReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgShowcaseEconItemReference& a, CMsgShowcaseEconItemReference& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseEconItemReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseEconItemReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseEconItemReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseEconItemReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseEconItemReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseEconItemReference& from) {
    CMsgShowcaseEconItemReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseEconItemReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseEconItemReference";
  }
  protected:
  explicit CMsgShowcaseEconItemReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOriginalIdFieldNumber = 2,
    kDefinitionIndexFieldNumber = 3,
    kEquipmentSlotIndexFieldNumber = 4,
  };
  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint64 original_id = 2;
  bool has_original_id() const;
  private:
  bool _internal_has_original_id() const;
  public:
  void clear_original_id();
  uint64_t original_id() const;
  void set_original_id(uint64_t value);
  private:
  uint64_t _internal_original_id() const;
  void _internal_set_original_id(uint64_t value);
  public:

  // optional uint32 definition_index = 3;
  bool has_definition_index() const;
  private:
  bool _internal_has_definition_index() const;
  public:
  void clear_definition_index();
  uint32_t definition_index() const;
  void set_definition_index(uint32_t value);
  private:
  uint32_t _internal_definition_index() const;
  void _internal_set_definition_index(uint32_t value);
  public:

  // optional int32 equipment_slot_index = 4 [default = -1];
  bool has_equipment_slot_index() const;
  private:
  bool _internal_has_equipment_slot_index() const;
  public:
  void clear_equipment_slot_index();
  int32_t equipment_slot_index() const;
  void set_equipment_slot_index(int32_t value);
  private:
  int32_t _internal_equipment_slot_index() const;
  void _internal_set_equipment_slot_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseEconItemReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t id_;
    uint64_t original_id_;
    uint32_t definition_index_;
    int32_t equipment_slot_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgHeroPlusInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHeroPlusInfo) */ {
 public:
  inline CMsgHeroPlusInfo() : CMsgHeroPlusInfo(nullptr) {}
  ~CMsgHeroPlusInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgHeroPlusInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHeroPlusInfo(const CMsgHeroPlusInfo& from);
  CMsgHeroPlusInfo(CMsgHeroPlusInfo&& from) noexcept
    : CMsgHeroPlusInfo() {
    *this = ::std::move(from);
  }

  inline CMsgHeroPlusInfo& operator=(const CMsgHeroPlusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHeroPlusInfo& operator=(CMsgHeroPlusInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHeroPlusInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHeroPlusInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgHeroPlusInfo*>(
               &_CMsgHeroPlusInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgHeroPlusInfo& a, CMsgHeroPlusInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHeroPlusInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHeroPlusInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHeroPlusInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHeroPlusInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHeroPlusInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgHeroPlusInfo& from) {
    CMsgHeroPlusInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHeroPlusInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHeroPlusInfo";
  }
  protected:
  explicit CMsgHeroPlusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // optional uint32 flags = 1;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHeroPlusInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Trophy_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Trophy.Data) */ {
 public:
  inline CMsgShowcaseItem_Trophy_Data() : CMsgShowcaseItem_Trophy_Data(nullptr) {}
  ~CMsgShowcaseItem_Trophy_Data() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Trophy_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Trophy_Data(const CMsgShowcaseItem_Trophy_Data& from);
  CMsgShowcaseItem_Trophy_Data(CMsgShowcaseItem_Trophy_Data&& from) noexcept
    : CMsgShowcaseItem_Trophy_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Trophy_Data& operator=(const CMsgShowcaseItem_Trophy_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Trophy_Data& operator=(CMsgShowcaseItem_Trophy_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Trophy_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Trophy_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Trophy_Data*>(
               &_CMsgShowcaseItem_Trophy_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgShowcaseItem_Trophy_Data& a, CMsgShowcaseItem_Trophy_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Trophy_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Trophy_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Trophy_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Trophy_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Trophy_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Trophy_Data& from) {
    CMsgShowcaseItem_Trophy_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Trophy_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Trophy.Data";
  }
  protected:
  explicit CMsgShowcaseItem_Trophy_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrophyScoreFieldNumber = 1,
  };
  // optional uint32 trophy_score = 1;
  bool has_trophy_score() const;
  private:
  bool _internal_has_trophy_score() const;
  public:
  void clear_trophy_score();
  uint32_t trophy_score() const;
  void set_trophy_score(uint32_t value);
  private:
  uint32_t _internal_trophy_score() const;
  void _internal_set_trophy_score(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Trophy.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t trophy_score_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Trophy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Trophy) */ {
 public:
  inline CMsgShowcaseItem_Trophy() : CMsgShowcaseItem_Trophy(nullptr) {}
  ~CMsgShowcaseItem_Trophy() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Trophy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Trophy(const CMsgShowcaseItem_Trophy& from);
  CMsgShowcaseItem_Trophy(CMsgShowcaseItem_Trophy&& from) noexcept
    : CMsgShowcaseItem_Trophy() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Trophy& operator=(const CMsgShowcaseItem_Trophy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Trophy& operator=(CMsgShowcaseItem_Trophy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Trophy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Trophy* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Trophy*>(
               &_CMsgShowcaseItem_Trophy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgShowcaseItem_Trophy& a, CMsgShowcaseItem_Trophy& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Trophy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Trophy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Trophy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Trophy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Trophy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Trophy& from) {
    CMsgShowcaseItem_Trophy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Trophy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Trophy";
  }
  protected:
  explicit CMsgShowcaseItem_Trophy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_Trophy_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTrophyIdFieldNumber = 2,
  };
  // optional .CMsgShowcaseItem_Trophy.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_Trophy_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Trophy_Data* release_data();
  ::CMsgShowcaseItem_Trophy_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_Trophy_Data* data);
  private:
  const ::CMsgShowcaseItem_Trophy_Data& _internal_data() const;
  ::CMsgShowcaseItem_Trophy_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_Trophy_Data* data);
  ::CMsgShowcaseItem_Trophy_Data* unsafe_arena_release_data();

  // optional uint32 trophy_id = 2;
  bool has_trophy_id() const;
  private:
  bool _internal_has_trophy_id() const;
  public:
  void clear_trophy_id();
  uint32_t trophy_id() const;
  void set_trophy_id(uint32_t value);
  private:
  uint32_t _internal_trophy_id() const;
  void _internal_set_trophy_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Trophy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_Trophy_Data* data_;
    uint32_t trophy_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_EconItem_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_EconItem.Data) */ {
 public:
  inline CMsgShowcaseItem_EconItem_Data() : CMsgShowcaseItem_EconItem_Data(nullptr) {}
  ~CMsgShowcaseItem_EconItem_Data() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_EconItem_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_EconItem_Data(const CMsgShowcaseItem_EconItem_Data& from);
  CMsgShowcaseItem_EconItem_Data(CMsgShowcaseItem_EconItem_Data&& from) noexcept
    : CMsgShowcaseItem_EconItem_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_EconItem_Data& operator=(const CMsgShowcaseItem_EconItem_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_EconItem_Data& operator=(CMsgShowcaseItem_EconItem_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_EconItem_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_EconItem_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_EconItem_Data*>(
               &_CMsgShowcaseItem_EconItem_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgShowcaseItem_EconItem_Data& a, CMsgShowcaseItem_EconItem_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_EconItem_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_EconItem_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_EconItem_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_EconItem_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_EconItem_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_EconItem_Data& from) {
    CMsgShowcaseItem_EconItem_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_EconItem_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_EconItem.Data";
  }
  protected:
  explicit CMsgShowcaseItem_EconItem_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEconItemFieldNumber = 1,
  };
  // optional .CSOEconItem econ_item = 1;
  bool has_econ_item() const;
  private:
  bool _internal_has_econ_item() const;
  public:
  void clear_econ_item();
  const ::CSOEconItem& econ_item() const;
  PROTOBUF_NODISCARD ::CSOEconItem* release_econ_item();
  ::CSOEconItem* mutable_econ_item();
  void set_allocated_econ_item(::CSOEconItem* econ_item);
  private:
  const ::CSOEconItem& _internal_econ_item() const;
  ::CSOEconItem* _internal_mutable_econ_item();
  public:
  void unsafe_arena_set_allocated_econ_item(
      ::CSOEconItem* econ_item);
  ::CSOEconItem* unsafe_arena_release_econ_item();

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_EconItem.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CSOEconItem* econ_item_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_EconItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_EconItem) */ {
 public:
  inline CMsgShowcaseItem_EconItem() : CMsgShowcaseItem_EconItem(nullptr) {}
  ~CMsgShowcaseItem_EconItem() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_EconItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_EconItem(const CMsgShowcaseItem_EconItem& from);
  CMsgShowcaseItem_EconItem(CMsgShowcaseItem_EconItem&& from) noexcept
    : CMsgShowcaseItem_EconItem() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_EconItem& operator=(const CMsgShowcaseItem_EconItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_EconItem& operator=(CMsgShowcaseItem_EconItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_EconItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_EconItem* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_EconItem*>(
               &_CMsgShowcaseItem_EconItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgShowcaseItem_EconItem& a, CMsgShowcaseItem_EconItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_EconItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_EconItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_EconItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_EconItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_EconItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_EconItem& from) {
    CMsgShowcaseItem_EconItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_EconItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_EconItem";
  }
  protected:
  explicit CMsgShowcaseItem_EconItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_EconItem_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kRefFieldNumber = 2,
  };
  // optional .CMsgShowcaseItem_EconItem.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_EconItem_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem_Data* release_data();
  ::CMsgShowcaseItem_EconItem_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_EconItem_Data* data);
  private:
  const ::CMsgShowcaseItem_EconItem_Data& _internal_data() const;
  ::CMsgShowcaseItem_EconItem_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_EconItem_Data* data);
  ::CMsgShowcaseItem_EconItem_Data* unsafe_arena_release_data();

  // optional .CMsgShowcaseEconItemReference ref = 2;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::CMsgShowcaseEconItemReference& ref() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseEconItemReference* release_ref();
  ::CMsgShowcaseEconItemReference* mutable_ref();
  void set_allocated_ref(::CMsgShowcaseEconItemReference* ref);
  private:
  const ::CMsgShowcaseEconItemReference& _internal_ref() const;
  ::CMsgShowcaseEconItemReference* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::CMsgShowcaseEconItemReference* ref);
  ::CMsgShowcaseEconItemReference* unsafe_arena_release_ref();

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_EconItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_EconItem_Data* data_;
    ::CMsgShowcaseEconItemReference* ref_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Hero_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Hero.Data) */ {
 public:
  inline CMsgShowcaseItem_Hero_Data() : CMsgShowcaseItem_Hero_Data(nullptr) {}
  ~CMsgShowcaseItem_Hero_Data() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Hero_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Hero_Data(const CMsgShowcaseItem_Hero_Data& from);
  CMsgShowcaseItem_Hero_Data(CMsgShowcaseItem_Hero_Data&& from) noexcept
    : CMsgShowcaseItem_Hero_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Hero_Data& operator=(const CMsgShowcaseItem_Hero_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Hero_Data& operator=(CMsgShowcaseItem_Hero_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Hero_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Hero_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Hero_Data*>(
               &_CMsgShowcaseItem_Hero_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgShowcaseItem_Hero_Data& a, CMsgShowcaseItem_Hero_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Hero_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Hero_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Hero_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Hero_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Hero_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Hero_Data& from) {
    CMsgShowcaseItem_Hero_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Hero_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Hero.Data";
  }
  protected:
  explicit CMsgShowcaseItem_Hero_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEconItemsFieldNumber = 1,
    kActualHeroIdFieldNumber = 2,
    kPlusHeroXpFieldNumber = 3,
  };
  // repeated .CSOEconItem econ_items = 1;
  int econ_items_size() const;
  private:
  int _internal_econ_items_size() const;
  public:
  void clear_econ_items();
  ::CSOEconItem* mutable_econ_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >*
      mutable_econ_items();
  private:
  const ::CSOEconItem& _internal_econ_items(int index) const;
  ::CSOEconItem* _internal_add_econ_items();
  public:
  const ::CSOEconItem& econ_items(int index) const;
  ::CSOEconItem* add_econ_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >&
      econ_items() const;

  // optional int32 actual_hero_id = 2;
  bool has_actual_hero_id() const;
  private:
  bool _internal_has_actual_hero_id() const;
  public:
  void clear_actual_hero_id();
  int32_t actual_hero_id() const;
  void set_actual_hero_id(int32_t value);
  private:
  int32_t _internal_actual_hero_id() const;
  void _internal_set_actual_hero_id(int32_t value);
  public:

  // optional uint32 plus_hero_xp = 3;
  bool has_plus_hero_xp() const;
  private:
  bool _internal_has_plus_hero_xp() const;
  public:
  void clear_plus_hero_xp();
  uint32_t plus_hero_xp() const;
  void set_plus_hero_xp(uint32_t value);
  private:
  uint32_t _internal_plus_hero_xp() const;
  void _internal_set_plus_hero_xp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Hero.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem > econ_items_;
    int32_t actual_hero_id_;
    uint32_t plus_hero_xp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Hero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Hero) */ {
 public:
  inline CMsgShowcaseItem_Hero() : CMsgShowcaseItem_Hero(nullptr) {}
  ~CMsgShowcaseItem_Hero() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Hero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Hero(const CMsgShowcaseItem_Hero& from);
  CMsgShowcaseItem_Hero(CMsgShowcaseItem_Hero&& from) noexcept
    : CMsgShowcaseItem_Hero() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Hero& operator=(const CMsgShowcaseItem_Hero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Hero& operator=(CMsgShowcaseItem_Hero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Hero& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Hero* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Hero*>(
               &_CMsgShowcaseItem_Hero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgShowcaseItem_Hero& a, CMsgShowcaseItem_Hero& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Hero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Hero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Hero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Hero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Hero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Hero& from) {
    CMsgShowcaseItem_Hero::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Hero* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Hero";
  }
  protected:
  explicit CMsgShowcaseItem_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_Hero_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kEconItemRefsFieldNumber = 3,
    kAnimationNameFieldNumber = 7,
    kDataFieldNumber = 1,
    kPlusInfoFieldNumber = 6,
    kHeroIdFieldNumber = 2,
    kRotationFieldNumber = 4,
    kFlagsFieldNumber = 5,
    kAnimationOffsetFieldNumber = 9,
    kSlotIndexFieldNumber = 11,
    kModelIndexFieldNumber = 12,
    kAnimationPlaybackSpeedFieldNumber = 8,
    kZoomFieldNumber = 10,
  };
  // repeated .CMsgShowcaseEconItemReference econ_item_refs = 3;
  int econ_item_refs_size() const;
  private:
  int _internal_econ_item_refs_size() const;
  public:
  void clear_econ_item_refs();
  ::CMsgShowcaseEconItemReference* mutable_econ_item_refs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseEconItemReference >*
      mutable_econ_item_refs();
  private:
  const ::CMsgShowcaseEconItemReference& _internal_econ_item_refs(int index) const;
  ::CMsgShowcaseEconItemReference* _internal_add_econ_item_refs();
  public:
  const ::CMsgShowcaseEconItemReference& econ_item_refs(int index) const;
  ::CMsgShowcaseEconItemReference* add_econ_item_refs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseEconItemReference >&
      econ_item_refs() const;

  // optional string animation_name = 7;
  bool has_animation_name() const;
  private:
  bool _internal_has_animation_name() const;
  public:
  void clear_animation_name();
  const std::string& animation_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animation_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animation_name();
  PROTOBUF_NODISCARD std::string* release_animation_name();
  void set_allocated_animation_name(std::string* animation_name);
  private:
  const std::string& _internal_animation_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animation_name(const std::string& value);
  std::string* _internal_mutable_animation_name();
  public:

  // optional .CMsgShowcaseItem_Hero.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_Hero_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Hero_Data* release_data();
  ::CMsgShowcaseItem_Hero_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_Hero_Data* data);
  private:
  const ::CMsgShowcaseItem_Hero_Data& _internal_data() const;
  ::CMsgShowcaseItem_Hero_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_Hero_Data* data);
  ::CMsgShowcaseItem_Hero_Data* unsafe_arena_release_data();

  // optional .CMsgHeroPlusInfo plus_info = 6;
  bool has_plus_info() const;
  private:
  bool _internal_has_plus_info() const;
  public:
  void clear_plus_info();
  const ::CMsgHeroPlusInfo& plus_info() const;
  PROTOBUF_NODISCARD ::CMsgHeroPlusInfo* release_plus_info();
  ::CMsgHeroPlusInfo* mutable_plus_info();
  void set_allocated_plus_info(::CMsgHeroPlusInfo* plus_info);
  private:
  const ::CMsgHeroPlusInfo& _internal_plus_info() const;
  ::CMsgHeroPlusInfo* _internal_mutable_plus_info();
  public:
  void unsafe_arena_set_allocated_plus_info(
      ::CMsgHeroPlusInfo* plus_info);
  ::CMsgHeroPlusInfo* unsafe_arena_release_plus_info();

  // optional int32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  int32_t hero_id() const;
  void set_hero_id(int32_t value);
  private:
  int32_t _internal_hero_id() const;
  void _internal_set_hero_id(int32_t value);
  public:

  // optional uint32 rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  uint32_t rotation() const;
  void set_rotation(uint32_t value);
  private:
  uint32_t _internal_rotation() const;
  void _internal_set_rotation(uint32_t value);
  public:

  // optional uint32 flags = 5;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional uint32 animation_offset = 9;
  bool has_animation_offset() const;
  private:
  bool _internal_has_animation_offset() const;
  public:
  void clear_animation_offset();
  uint32_t animation_offset() const;
  void set_animation_offset(uint32_t value);
  private:
  uint32_t _internal_animation_offset() const;
  void _internal_set_animation_offset(uint32_t value);
  public:

  // optional uint32 slot_index = 11;
  bool has_slot_index() const;
  private:
  bool _internal_has_slot_index() const;
  public:
  void clear_slot_index();
  uint32_t slot_index() const;
  void set_slot_index(uint32_t value);
  private:
  uint32_t _internal_slot_index() const;
  void _internal_set_slot_index(uint32_t value);
  public:

  // optional uint32 model_index = 12;
  bool has_model_index() const;
  private:
  bool _internal_has_model_index() const;
  public:
  void clear_model_index();
  uint32_t model_index() const;
  void set_model_index(uint32_t value);
  private:
  uint32_t _internal_model_index() const;
  void _internal_set_model_index(uint32_t value);
  public:

  // optional uint32 animation_playback_speed = 8 [default = 100];
  bool has_animation_playback_speed() const;
  private:
  bool _internal_has_animation_playback_speed() const;
  public:
  void clear_animation_playback_speed();
  uint32_t animation_playback_speed() const;
  void set_animation_playback_speed(uint32_t value);
  private:
  uint32_t _internal_animation_playback_speed() const;
  void _internal_set_animation_playback_speed(uint32_t value);
  public:

  // optional uint32 zoom = 10 [default = 100];
  bool has_zoom() const;
  private:
  bool _internal_has_zoom() const;
  public:
  void clear_zoom();
  uint32_t zoom() const;
  void set_zoom(uint32_t value);
  private:
  uint32_t _internal_zoom() const;
  void _internal_set_zoom(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Hero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseEconItemReference > econ_item_refs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animation_name_;
    ::CMsgShowcaseItem_Hero_Data* data_;
    ::CMsgHeroPlusInfo* plus_info_;
    int32_t hero_id_;
    uint32_t rotation_;
    uint32_t flags_;
    uint32_t animation_offset_;
    uint32_t slot_index_;
    uint32_t model_index_;
    uint32_t animation_playback_speed_;
    uint32_t zoom_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_HeroIcon_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_HeroIcon.Data) */ {
 public:
  inline CMsgShowcaseItem_HeroIcon_Data() : CMsgShowcaseItem_HeroIcon_Data(nullptr) {}
  ~CMsgShowcaseItem_HeroIcon_Data() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_HeroIcon_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_HeroIcon_Data(const CMsgShowcaseItem_HeroIcon_Data& from);
  CMsgShowcaseItem_HeroIcon_Data(CMsgShowcaseItem_HeroIcon_Data&& from) noexcept
    : CMsgShowcaseItem_HeroIcon_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_HeroIcon_Data& operator=(const CMsgShowcaseItem_HeroIcon_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_HeroIcon_Data& operator=(CMsgShowcaseItem_HeroIcon_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_HeroIcon_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_HeroIcon_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_HeroIcon_Data*>(
               &_CMsgShowcaseItem_HeroIcon_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgShowcaseItem_HeroIcon_Data& a, CMsgShowcaseItem_HeroIcon_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_HeroIcon_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_HeroIcon_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_HeroIcon_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_HeroIcon_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_HeroIcon_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_HeroIcon_Data& from) {
    CMsgShowcaseItem_HeroIcon_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_HeroIcon_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_HeroIcon.Data";
  }
  protected:
  explicit CMsgShowcaseItem_HeroIcon_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEconItemFieldNumber = 1,
  };
  // optional .CSOEconItem econ_item = 1;
  bool has_econ_item() const;
  private:
  bool _internal_has_econ_item() const;
  public:
  void clear_econ_item();
  const ::CSOEconItem& econ_item() const;
  PROTOBUF_NODISCARD ::CSOEconItem* release_econ_item();
  ::CSOEconItem* mutable_econ_item();
  void set_allocated_econ_item(::CSOEconItem* econ_item);
  private:
  const ::CSOEconItem& _internal_econ_item() const;
  ::CSOEconItem* _internal_mutable_econ_item();
  public:
  void unsafe_arena_set_allocated_econ_item(
      ::CSOEconItem* econ_item);
  ::CSOEconItem* unsafe_arena_release_econ_item();

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_HeroIcon.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CSOEconItem* econ_item_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_HeroIcon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_HeroIcon) */ {
 public:
  inline CMsgShowcaseItem_HeroIcon() : CMsgShowcaseItem_HeroIcon(nullptr) {}
  ~CMsgShowcaseItem_HeroIcon() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_HeroIcon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_HeroIcon(const CMsgShowcaseItem_HeroIcon& from);
  CMsgShowcaseItem_HeroIcon(CMsgShowcaseItem_HeroIcon&& from) noexcept
    : CMsgShowcaseItem_HeroIcon() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_HeroIcon& operator=(const CMsgShowcaseItem_HeroIcon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_HeroIcon& operator=(CMsgShowcaseItem_HeroIcon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_HeroIcon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_HeroIcon* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_HeroIcon*>(
               &_CMsgShowcaseItem_HeroIcon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgShowcaseItem_HeroIcon& a, CMsgShowcaseItem_HeroIcon& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_HeroIcon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_HeroIcon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_HeroIcon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_HeroIcon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_HeroIcon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_HeroIcon& from) {
    CMsgShowcaseItem_HeroIcon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_HeroIcon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_HeroIcon";
  }
  protected:
  explicit CMsgShowcaseItem_HeroIcon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_HeroIcon_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kEconItemRefFieldNumber = 3,
    kHeroIdFieldNumber = 2,
  };
  // optional .CMsgShowcaseItem_HeroIcon.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_HeroIcon_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_HeroIcon_Data* release_data();
  ::CMsgShowcaseItem_HeroIcon_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_HeroIcon_Data* data);
  private:
  const ::CMsgShowcaseItem_HeroIcon_Data& _internal_data() const;
  ::CMsgShowcaseItem_HeroIcon_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_HeroIcon_Data* data);
  ::CMsgShowcaseItem_HeroIcon_Data* unsafe_arena_release_data();

  // optional .CMsgShowcaseEconItemReference econ_item_ref = 3;
  bool has_econ_item_ref() const;
  private:
  bool _internal_has_econ_item_ref() const;
  public:
  void clear_econ_item_ref();
  const ::CMsgShowcaseEconItemReference& econ_item_ref() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseEconItemReference* release_econ_item_ref();
  ::CMsgShowcaseEconItemReference* mutable_econ_item_ref();
  void set_allocated_econ_item_ref(::CMsgShowcaseEconItemReference* econ_item_ref);
  private:
  const ::CMsgShowcaseEconItemReference& _internal_econ_item_ref() const;
  ::CMsgShowcaseEconItemReference* _internal_mutable_econ_item_ref();
  public:
  void unsafe_arena_set_allocated_econ_item_ref(
      ::CMsgShowcaseEconItemReference* econ_item_ref);
  ::CMsgShowcaseEconItemReference* unsafe_arena_release_econ_item_ref();

  // optional int32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  int32_t hero_id() const;
  void set_hero_id(int32_t value);
  private:
  int32_t _internal_hero_id() const;
  void _internal_set_hero_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_HeroIcon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_HeroIcon_Data* data_;
    ::CMsgShowcaseEconItemReference* econ_item_ref_;
    int32_t hero_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_PlayerMatch_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_PlayerMatch.Data) */ {
 public:
  inline CMsgShowcaseItem_PlayerMatch_Data() : CMsgShowcaseItem_PlayerMatch_Data(nullptr) {}
  ~CMsgShowcaseItem_PlayerMatch_Data() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_PlayerMatch_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_PlayerMatch_Data(const CMsgShowcaseItem_PlayerMatch_Data& from);
  CMsgShowcaseItem_PlayerMatch_Data(CMsgShowcaseItem_PlayerMatch_Data&& from) noexcept
    : CMsgShowcaseItem_PlayerMatch_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_PlayerMatch_Data& operator=(const CMsgShowcaseItem_PlayerMatch_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_PlayerMatch_Data& operator=(CMsgShowcaseItem_PlayerMatch_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_PlayerMatch_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_PlayerMatch_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_PlayerMatch_Data*>(
               &_CMsgShowcaseItem_PlayerMatch_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgShowcaseItem_PlayerMatch_Data& a, CMsgShowcaseItem_PlayerMatch_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_PlayerMatch_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_PlayerMatch_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_PlayerMatch_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_PlayerMatch_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_PlayerMatch_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_PlayerMatch_Data& from) {
    CMsgShowcaseItem_PlayerMatch_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_PlayerMatch_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_PlayerMatch.Data";
  }
  protected:
  explicit CMsgShowcaseItem_PlayerMatch_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDurationFieldNumber = 3,
    kGameModeFieldNumber = 4,
    kOutcomeFieldNumber = 5,
    kKillsFieldNumber = 6,
    kDeathsFieldNumber = 7,
    kAssistsFieldNumber = 8,
  };
  // optional int32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  int32_t hero_id() const;
  void set_hero_id(int32_t value);
  private:
  int32_t _internal_hero_id() const;
  void _internal_set_hero_id(int32_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::DOTA_GameMode game_mode() const;
  void set_game_mode(::DOTA_GameMode value);
  private:
  ::DOTA_GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::DOTA_GameMode value);
  public:

  // optional .CMsgShowcaseItem_PlayerMatch.EPlayerOutcome outcome = 5 [default = k_eInvalid];
  bool has_outcome() const;
  private:
  bool _internal_has_outcome() const;
  public:
  void clear_outcome();
  ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome outcome() const;
  void set_outcome(::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome value);
  private:
  ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome _internal_outcome() const;
  void _internal_set_outcome(::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome value);
  public:

  // optional uint32 kills = 6;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 7;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 8;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_PlayerMatch.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t hero_id_;
    uint32_t timestamp_;
    uint32_t duration_;
    int game_mode_;
    int outcome_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_PlayerMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_PlayerMatch) */ {
 public:
  inline CMsgShowcaseItem_PlayerMatch() : CMsgShowcaseItem_PlayerMatch(nullptr) {}
  ~CMsgShowcaseItem_PlayerMatch() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_PlayerMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_PlayerMatch(const CMsgShowcaseItem_PlayerMatch& from);
  CMsgShowcaseItem_PlayerMatch(CMsgShowcaseItem_PlayerMatch&& from) noexcept
    : CMsgShowcaseItem_PlayerMatch() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_PlayerMatch& operator=(const CMsgShowcaseItem_PlayerMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_PlayerMatch& operator=(CMsgShowcaseItem_PlayerMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_PlayerMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_PlayerMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_PlayerMatch*>(
               &_CMsgShowcaseItem_PlayerMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgShowcaseItem_PlayerMatch& a, CMsgShowcaseItem_PlayerMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_PlayerMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_PlayerMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_PlayerMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_PlayerMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_PlayerMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_PlayerMatch& from) {
    CMsgShowcaseItem_PlayerMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_PlayerMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_PlayerMatch";
  }
  protected:
  explicit CMsgShowcaseItem_PlayerMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_PlayerMatch_Data Data;

  typedef CMsgShowcaseItem_PlayerMatch_EPlayerOutcome EPlayerOutcome;
  static constexpr EPlayerOutcome k_eInvalid =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eInvalid;
  static constexpr EPlayerOutcome k_eWin =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eWin;
  static constexpr EPlayerOutcome k_eLoss =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eLoss;
  static constexpr EPlayerOutcome k_eNotScored =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eNotScored;
  static inline bool EPlayerOutcome_IsValid(int value) {
    return CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_IsValid(value);
  }
  static constexpr EPlayerOutcome EPlayerOutcome_MIN =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_MIN;
  static constexpr EPlayerOutcome EPlayerOutcome_MAX =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_MAX;
  static constexpr int EPlayerOutcome_ARRAYSIZE =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EPlayerOutcome_descriptor() {
    return CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_descriptor();
  }
  template<typename T>
  static inline const std::string& EPlayerOutcome_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EPlayerOutcome>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EPlayerOutcome_Name.");
    return CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_Name(enum_t_value);
  }
  static inline bool EPlayerOutcome_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EPlayerOutcome* value) {
    return CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kMatchIdFieldNumber = 2,
    kPlayerSlotFieldNumber = 3,
  };
  // optional .CMsgShowcaseItem_PlayerMatch.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_PlayerMatch_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_PlayerMatch_Data* release_data();
  ::CMsgShowcaseItem_PlayerMatch_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_PlayerMatch_Data* data);
  private:
  const ::CMsgShowcaseItem_PlayerMatch_Data& _internal_data() const;
  ::CMsgShowcaseItem_PlayerMatch_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_PlayerMatch_Data* data);
  ::CMsgShowcaseItem_PlayerMatch_Data* unsafe_arena_release_data();

  // optional uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 player_slot = 3;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_PlayerMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_PlayerMatch_Data* data_;
    uint64_t match_id_;
    uint32_t player_slot_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_ChatWheel_Data final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_ChatWheel.Data) */ {
 public:
  inline CMsgShowcaseItem_ChatWheel_Data() : CMsgShowcaseItem_ChatWheel_Data(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_ChatWheel_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_ChatWheel_Data(const CMsgShowcaseItem_ChatWheel_Data& from);
  CMsgShowcaseItem_ChatWheel_Data(CMsgShowcaseItem_ChatWheel_Data&& from) noexcept
    : CMsgShowcaseItem_ChatWheel_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_ChatWheel_Data& operator=(const CMsgShowcaseItem_ChatWheel_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_ChatWheel_Data& operator=(CMsgShowcaseItem_ChatWheel_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_ChatWheel_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_ChatWheel_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_ChatWheel_Data*>(
               &_CMsgShowcaseItem_ChatWheel_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgShowcaseItem_ChatWheel_Data& a, CMsgShowcaseItem_ChatWheel_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_ChatWheel_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_ChatWheel_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_ChatWheel_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_ChatWheel_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgShowcaseItem_ChatWheel_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgShowcaseItem_ChatWheel_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_ChatWheel.Data";
  }
  protected:
  explicit CMsgShowcaseItem_ChatWheel_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_ChatWheel.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_ChatWheel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_ChatWheel) */ {
 public:
  inline CMsgShowcaseItem_ChatWheel() : CMsgShowcaseItem_ChatWheel(nullptr) {}
  ~CMsgShowcaseItem_ChatWheel() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_ChatWheel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_ChatWheel(const CMsgShowcaseItem_ChatWheel& from);
  CMsgShowcaseItem_ChatWheel(CMsgShowcaseItem_ChatWheel&& from) noexcept
    : CMsgShowcaseItem_ChatWheel() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_ChatWheel& operator=(const CMsgShowcaseItem_ChatWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_ChatWheel& operator=(CMsgShowcaseItem_ChatWheel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_ChatWheel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_ChatWheel* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_ChatWheel*>(
               &_CMsgShowcaseItem_ChatWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgShowcaseItem_ChatWheel& a, CMsgShowcaseItem_ChatWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_ChatWheel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_ChatWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_ChatWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_ChatWheel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_ChatWheel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_ChatWheel& from) {
    CMsgShowcaseItem_ChatWheel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_ChatWheel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_ChatWheel";
  }
  protected:
  explicit CMsgShowcaseItem_ChatWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_ChatWheel_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kChatWheelMessageIdFieldNumber = 2,
  };
  // optional .CMsgShowcaseItem_ChatWheel.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_ChatWheel_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_ChatWheel_Data* release_data();
  ::CMsgShowcaseItem_ChatWheel_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_ChatWheel_Data* data);
  private:
  const ::CMsgShowcaseItem_ChatWheel_Data& _internal_data() const;
  ::CMsgShowcaseItem_ChatWheel_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_ChatWheel_Data* data);
  ::CMsgShowcaseItem_ChatWheel_Data* unsafe_arena_release_data();

  // optional uint32 chat_wheel_message_id = 2 [default = 4294967295];
  bool has_chat_wheel_message_id() const;
  private:
  bool _internal_has_chat_wheel_message_id() const;
  public:
  void clear_chat_wheel_message_id();
  uint32_t chat_wheel_message_id() const;
  void set_chat_wheel_message_id(uint32_t value);
  private:
  uint32_t _internal_chat_wheel_message_id() const;
  void _internal_set_chat_wheel_message_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_ChatWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_ChatWheel_Data* data_;
    uint32_t chat_wheel_message_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Emoticon_Data final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Emoticon.Data) */ {
 public:
  inline CMsgShowcaseItem_Emoticon_Data() : CMsgShowcaseItem_Emoticon_Data(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Emoticon_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Emoticon_Data(const CMsgShowcaseItem_Emoticon_Data& from);
  CMsgShowcaseItem_Emoticon_Data(CMsgShowcaseItem_Emoticon_Data&& from) noexcept
    : CMsgShowcaseItem_Emoticon_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Emoticon_Data& operator=(const CMsgShowcaseItem_Emoticon_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Emoticon_Data& operator=(CMsgShowcaseItem_Emoticon_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Emoticon_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Emoticon_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Emoticon_Data*>(
               &_CMsgShowcaseItem_Emoticon_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgShowcaseItem_Emoticon_Data& a, CMsgShowcaseItem_Emoticon_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Emoticon_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Emoticon_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Emoticon_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Emoticon_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgShowcaseItem_Emoticon_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgShowcaseItem_Emoticon_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Emoticon.Data";
  }
  protected:
  explicit CMsgShowcaseItem_Emoticon_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Emoticon.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Emoticon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Emoticon) */ {
 public:
  inline CMsgShowcaseItem_Emoticon() : CMsgShowcaseItem_Emoticon(nullptr) {}
  ~CMsgShowcaseItem_Emoticon() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Emoticon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Emoticon(const CMsgShowcaseItem_Emoticon& from);
  CMsgShowcaseItem_Emoticon(CMsgShowcaseItem_Emoticon&& from) noexcept
    : CMsgShowcaseItem_Emoticon() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Emoticon& operator=(const CMsgShowcaseItem_Emoticon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Emoticon& operator=(CMsgShowcaseItem_Emoticon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Emoticon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Emoticon* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Emoticon*>(
               &_CMsgShowcaseItem_Emoticon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgShowcaseItem_Emoticon& a, CMsgShowcaseItem_Emoticon& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Emoticon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Emoticon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Emoticon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Emoticon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Emoticon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Emoticon& from) {
    CMsgShowcaseItem_Emoticon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Emoticon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Emoticon";
  }
  protected:
  explicit CMsgShowcaseItem_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_Emoticon_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kEmoticonIdFieldNumber = 2,
  };
  // optional .CMsgShowcaseItem_Emoticon.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_Emoticon_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Emoticon_Data* release_data();
  ::CMsgShowcaseItem_Emoticon_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_Emoticon_Data* data);
  private:
  const ::CMsgShowcaseItem_Emoticon_Data& _internal_data() const;
  ::CMsgShowcaseItem_Emoticon_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_Emoticon_Data* data);
  ::CMsgShowcaseItem_Emoticon_Data* unsafe_arena_release_data();

  // optional uint32 emoticon_id = 2;
  bool has_emoticon_id() const;
  private:
  bool _internal_has_emoticon_id() const;
  public:
  void clear_emoticon_id();
  uint32_t emoticon_id() const;
  void set_emoticon_id(uint32_t value);
  private:
  uint32_t _internal_emoticon_id() const;
  void _internal_set_emoticon_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Emoticon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_Emoticon_Data* data_;
    uint32_t emoticon_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_SpiderGraph_Data final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_SpiderGraph.Data) */ {
 public:
  inline CMsgShowcaseItem_SpiderGraph_Data() : CMsgShowcaseItem_SpiderGraph_Data(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_SpiderGraph_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_SpiderGraph_Data(const CMsgShowcaseItem_SpiderGraph_Data& from);
  CMsgShowcaseItem_SpiderGraph_Data(CMsgShowcaseItem_SpiderGraph_Data&& from) noexcept
    : CMsgShowcaseItem_SpiderGraph_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_SpiderGraph_Data& operator=(const CMsgShowcaseItem_SpiderGraph_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_SpiderGraph_Data& operator=(CMsgShowcaseItem_SpiderGraph_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_SpiderGraph_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_SpiderGraph_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_SpiderGraph_Data*>(
               &_CMsgShowcaseItem_SpiderGraph_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgShowcaseItem_SpiderGraph_Data& a, CMsgShowcaseItem_SpiderGraph_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_SpiderGraph_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_SpiderGraph_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_SpiderGraph_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_SpiderGraph_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgShowcaseItem_SpiderGraph_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgShowcaseItem_SpiderGraph_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_SpiderGraph.Data";
  }
  protected:
  explicit CMsgShowcaseItem_SpiderGraph_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_SpiderGraph.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_SpiderGraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_SpiderGraph) */ {
 public:
  inline CMsgShowcaseItem_SpiderGraph() : CMsgShowcaseItem_SpiderGraph(nullptr) {}
  ~CMsgShowcaseItem_SpiderGraph() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_SpiderGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_SpiderGraph(const CMsgShowcaseItem_SpiderGraph& from);
  CMsgShowcaseItem_SpiderGraph(CMsgShowcaseItem_SpiderGraph&& from) noexcept
    : CMsgShowcaseItem_SpiderGraph() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_SpiderGraph& operator=(const CMsgShowcaseItem_SpiderGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_SpiderGraph& operator=(CMsgShowcaseItem_SpiderGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_SpiderGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_SpiderGraph* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_SpiderGraph*>(
               &_CMsgShowcaseItem_SpiderGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgShowcaseItem_SpiderGraph& a, CMsgShowcaseItem_SpiderGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_SpiderGraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_SpiderGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_SpiderGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_SpiderGraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_SpiderGraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_SpiderGraph& from) {
    CMsgShowcaseItem_SpiderGraph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_SpiderGraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_SpiderGraph";
  }
  protected:
  explicit CMsgShowcaseItem_SpiderGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_SpiderGraph_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional .CMsgShowcaseItem_SpiderGraph.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_SpiderGraph_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_SpiderGraph_Data* release_data();
  ::CMsgShowcaseItem_SpiderGraph_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_SpiderGraph_Data* data);
  private:
  const ::CMsgShowcaseItem_SpiderGraph_Data& _internal_data() const;
  ::CMsgShowcaseItem_SpiderGraph_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_SpiderGraph_Data* data);
  ::CMsgShowcaseItem_SpiderGraph_Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_SpiderGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_SpiderGraph_Data* data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_UserFeed_Data final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_UserFeed.Data) */ {
 public:
  inline CMsgShowcaseItem_UserFeed_Data() : CMsgShowcaseItem_UserFeed_Data(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_UserFeed_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_UserFeed_Data(const CMsgShowcaseItem_UserFeed_Data& from);
  CMsgShowcaseItem_UserFeed_Data(CMsgShowcaseItem_UserFeed_Data&& from) noexcept
    : CMsgShowcaseItem_UserFeed_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_UserFeed_Data& operator=(const CMsgShowcaseItem_UserFeed_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_UserFeed_Data& operator=(CMsgShowcaseItem_UserFeed_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_UserFeed_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_UserFeed_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_UserFeed_Data*>(
               &_CMsgShowcaseItem_UserFeed_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgShowcaseItem_UserFeed_Data& a, CMsgShowcaseItem_UserFeed_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_UserFeed_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_UserFeed_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_UserFeed_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_UserFeed_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgShowcaseItem_UserFeed_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgShowcaseItem_UserFeed_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_UserFeed.Data";
  }
  protected:
  explicit CMsgShowcaseItem_UserFeed_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_UserFeed.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_UserFeed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_UserFeed) */ {
 public:
  inline CMsgShowcaseItem_UserFeed() : CMsgShowcaseItem_UserFeed(nullptr) {}
  ~CMsgShowcaseItem_UserFeed() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_UserFeed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_UserFeed(const CMsgShowcaseItem_UserFeed& from);
  CMsgShowcaseItem_UserFeed(CMsgShowcaseItem_UserFeed&& from) noexcept
    : CMsgShowcaseItem_UserFeed() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_UserFeed& operator=(const CMsgShowcaseItem_UserFeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_UserFeed& operator=(CMsgShowcaseItem_UserFeed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_UserFeed& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_UserFeed* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_UserFeed*>(
               &_CMsgShowcaseItem_UserFeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgShowcaseItem_UserFeed& a, CMsgShowcaseItem_UserFeed& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_UserFeed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_UserFeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_UserFeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_UserFeed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_UserFeed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_UserFeed& from) {
    CMsgShowcaseItem_UserFeed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_UserFeed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_UserFeed";
  }
  protected:
  explicit CMsgShowcaseItem_UserFeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_UserFeed_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional .CMsgShowcaseItem_UserFeed.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_UserFeed_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_UserFeed_Data* release_data();
  ::CMsgShowcaseItem_UserFeed_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_UserFeed_Data* data);
  private:
  const ::CMsgShowcaseItem_UserFeed_Data& _internal_data() const;
  ::CMsgShowcaseItem_UserFeed_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_UserFeed_Data* data);
  ::CMsgShowcaseItem_UserFeed_Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_UserFeed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_UserFeed_Data* data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Stat_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Stat.Data) */ {
 public:
  inline CMsgShowcaseItem_Stat_Data() : CMsgShowcaseItem_Stat_Data(nullptr) {}
  ~CMsgShowcaseItem_Stat_Data() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Stat_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Stat_Data(const CMsgShowcaseItem_Stat_Data& from);
  CMsgShowcaseItem_Stat_Data(CMsgShowcaseItem_Stat_Data&& from) noexcept
    : CMsgShowcaseItem_Stat_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Stat_Data& operator=(const CMsgShowcaseItem_Stat_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Stat_Data& operator=(CMsgShowcaseItem_Stat_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Stat_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Stat_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Stat_Data*>(
               &_CMsgShowcaseItem_Stat_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgShowcaseItem_Stat_Data& a, CMsgShowcaseItem_Stat_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Stat_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Stat_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Stat_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Stat_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Stat_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Stat_Data& from) {
    CMsgShowcaseItem_Stat_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Stat_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Stat.Data";
  }
  protected:
  explicit CMsgShowcaseItem_Stat_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatScoreFieldNumber = 1,
  };
  // optional uint32 stat_score = 1;
  bool has_stat_score() const;
  private:
  bool _internal_has_stat_score() const;
  public:
  void clear_stat_score();
  uint32_t stat_score() const;
  void set_stat_score(uint32_t value);
  private:
  uint32_t _internal_stat_score() const;
  void _internal_set_stat_score(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Stat.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t stat_score_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Stat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Stat) */ {
 public:
  inline CMsgShowcaseItem_Stat() : CMsgShowcaseItem_Stat(nullptr) {}
  ~CMsgShowcaseItem_Stat() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Stat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Stat(const CMsgShowcaseItem_Stat& from);
  CMsgShowcaseItem_Stat(CMsgShowcaseItem_Stat&& from) noexcept
    : CMsgShowcaseItem_Stat() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Stat& operator=(const CMsgShowcaseItem_Stat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Stat& operator=(CMsgShowcaseItem_Stat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Stat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Stat* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Stat*>(
               &_CMsgShowcaseItem_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgShowcaseItem_Stat& a, CMsgShowcaseItem_Stat& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Stat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Stat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Stat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Stat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Stat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Stat& from) {
    CMsgShowcaseItem_Stat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Stat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Stat";
  }
  protected:
  explicit CMsgShowcaseItem_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_Stat_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kStatIdFieldNumber = 2,
  };
  // optional .CMsgShowcaseItem_Stat.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_Stat_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Stat_Data* release_data();
  ::CMsgShowcaseItem_Stat_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_Stat_Data* data);
  private:
  const ::CMsgShowcaseItem_Stat_Data& _internal_data() const;
  ::CMsgShowcaseItem_Stat_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_Stat_Data* data);
  ::CMsgShowcaseItem_Stat_Data* unsafe_arena_release_data();

  // optional .CMsgDOTAProfileCard.EStatID stat_id = 2 [default = k_eStat_Wins];
  bool has_stat_id() const;
  private:
  bool _internal_has_stat_id() const;
  public:
  void clear_stat_id();
  ::CMsgDOTAProfileCard_EStatID stat_id() const;
  void set_stat_id(::CMsgDOTAProfileCard_EStatID value);
  private:
  ::CMsgDOTAProfileCard_EStatID _internal_stat_id() const;
  void _internal_set_stat_id(::CMsgDOTAProfileCard_EStatID value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Stat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_Stat_Data* data_;
    int stat_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseBackground_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseBackground.Data) */ {
 public:
  inline CMsgShowcaseBackground_Data() : CMsgShowcaseBackground_Data(nullptr) {}
  ~CMsgShowcaseBackground_Data() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseBackground_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseBackground_Data(const CMsgShowcaseBackground_Data& from);
  CMsgShowcaseBackground_Data(CMsgShowcaseBackground_Data&& from) noexcept
    : CMsgShowcaseBackground_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseBackground_Data& operator=(const CMsgShowcaseBackground_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseBackground_Data& operator=(CMsgShowcaseBackground_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseBackground_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseBackground_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseBackground_Data*>(
               &_CMsgShowcaseBackground_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgShowcaseBackground_Data& a, CMsgShowcaseBackground_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseBackground_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseBackground_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseBackground_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseBackground_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseBackground_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseBackground_Data& from) {
    CMsgShowcaseBackground_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseBackground_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseBackground.Data";
  }
  protected:
  explicit CMsgShowcaseBackground_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadingScreenFieldNumber = 1,
  };
  // optional .CSOEconItem loading_screen = 1;
  bool has_loading_screen() const;
  private:
  bool _internal_has_loading_screen() const;
  public:
  void clear_loading_screen();
  const ::CSOEconItem& loading_screen() const;
  PROTOBUF_NODISCARD ::CSOEconItem* release_loading_screen();
  ::CSOEconItem* mutable_loading_screen();
  void set_allocated_loading_screen(::CSOEconItem* loading_screen);
  private:
  const ::CSOEconItem& _internal_loading_screen() const;
  ::CSOEconItem* _internal_mutable_loading_screen();
  public:
  void unsafe_arena_set_allocated_loading_screen(
      ::CSOEconItem* loading_screen);
  ::CSOEconItem* unsafe_arena_release_loading_screen();

  // @@protoc_insertion_point(class_scope:CMsgShowcaseBackground.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CSOEconItem* loading_screen_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseBackground final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseBackground) */ {
 public:
  inline CMsgShowcaseBackground() : CMsgShowcaseBackground(nullptr) {}
  ~CMsgShowcaseBackground() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseBackground(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseBackground(const CMsgShowcaseBackground& from);
  CMsgShowcaseBackground(CMsgShowcaseBackground&& from) noexcept
    : CMsgShowcaseBackground() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseBackground& operator=(const CMsgShowcaseBackground& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseBackground& operator=(CMsgShowcaseBackground&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseBackground& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseBackground* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseBackground*>(
               &_CMsgShowcaseBackground_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgShowcaseBackground& a, CMsgShowcaseBackground& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseBackground* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseBackground* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseBackground* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseBackground>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseBackground& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseBackground& from) {
    CMsgShowcaseBackground::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseBackground* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseBackground";
  }
  protected:
  explicit CMsgShowcaseBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseBackground_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kLoadingScreenRefFieldNumber = 2,
    kDimFieldNumber = 3,
    kBlurFieldNumber = 4,
    kBackgroundIdFieldNumber = 5,
  };
  // optional .CMsgShowcaseBackground.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseBackground_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseBackground_Data* release_data();
  ::CMsgShowcaseBackground_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseBackground_Data* data);
  private:
  const ::CMsgShowcaseBackground_Data& _internal_data() const;
  ::CMsgShowcaseBackground_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseBackground_Data* data);
  ::CMsgShowcaseBackground_Data* unsafe_arena_release_data();

  // optional .CMsgShowcaseEconItemReference loading_screen_ref = 2;
  bool has_loading_screen_ref() const;
  private:
  bool _internal_has_loading_screen_ref() const;
  public:
  void clear_loading_screen_ref();
  const ::CMsgShowcaseEconItemReference& loading_screen_ref() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseEconItemReference* release_loading_screen_ref();
  ::CMsgShowcaseEconItemReference* mutable_loading_screen_ref();
  void set_allocated_loading_screen_ref(::CMsgShowcaseEconItemReference* loading_screen_ref);
  private:
  const ::CMsgShowcaseEconItemReference& _internal_loading_screen_ref() const;
  ::CMsgShowcaseEconItemReference* _internal_mutable_loading_screen_ref();
  public:
  void unsafe_arena_set_allocated_loading_screen_ref(
      ::CMsgShowcaseEconItemReference* loading_screen_ref);
  ::CMsgShowcaseEconItemReference* unsafe_arena_release_loading_screen_ref();

  // optional uint32 dim = 3;
  bool has_dim() const;
  private:
  bool _internal_has_dim() const;
  public:
  void clear_dim();
  uint32_t dim() const;
  void set_dim(uint32_t value);
  private:
  uint32_t _internal_dim() const;
  void _internal_set_dim(uint32_t value);
  public:

  // optional uint32 blur = 4;
  bool has_blur() const;
  private:
  bool _internal_has_blur() const;
  public:
  void clear_blur();
  uint32_t blur() const;
  void set_blur(uint32_t value);
  private:
  uint32_t _internal_blur() const;
  void _internal_set_blur(uint32_t value);
  public:

  // optional uint32 background_id = 5;
  bool has_background_id() const;
  private:
  bool _internal_has_background_id() const;
  public:
  void clear_background_id();
  uint32_t background_id() const;
  void set_background_id(uint32_t value);
  private:
  uint32_t _internal_background_id() const;
  void _internal_set_background_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseBackground)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseBackground_Data* data_;
    ::CMsgShowcaseEconItemReference* loading_screen_ref_;
    uint32_t dim_;
    uint32_t blur_;
    uint32_t background_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItemData) */ {
 public:
  inline CMsgShowcaseItemData() : CMsgShowcaseItemData(nullptr) {}
  ~CMsgShowcaseItemData() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItemData(const CMsgShowcaseItemData& from);
  CMsgShowcaseItemData(CMsgShowcaseItemData&& from) noexcept
    : CMsgShowcaseItemData() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItemData& operator=(const CMsgShowcaseItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItemData& operator=(CMsgShowcaseItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItemData& default_instance() {
    return *internal_default_instance();
  }
  enum ItemCase {
    kTrophy = 1,
    kEconItemIcon = 2,
    kSticker = 3,
    kHeroModel = 4,
    kPlayerMatch = 5,
    kChatWheel = 6,
    kSpray = 7,
    kEmoticon = 8,
    kCourier = 10,
    kWard = 11,
    kHeroIcon = 12,
    kSpiderGraph = 13,
    kUserFeed = 14,
    kStat = 15,
    kRoshan = 16,
    kCreep = 17,
    kTower = 18,
    kEffigy = 19,
    kDecoration = 20,
    kBackground = 100,
    ITEM_NOT_SET = 0,
  };

  static inline const CMsgShowcaseItemData* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItemData*>(
               &_CMsgShowcaseItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgShowcaseItemData& a, CMsgShowcaseItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItemData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItemData& from) {
    CMsgShowcaseItemData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItemData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItemData";
  }
  protected:
  explicit CMsgShowcaseItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrophyFieldNumber = 1,
    kEconItemIconFieldNumber = 2,
    kStickerFieldNumber = 3,
    kHeroModelFieldNumber = 4,
    kPlayerMatchFieldNumber = 5,
    kChatWheelFieldNumber = 6,
    kSprayFieldNumber = 7,
    kEmoticonFieldNumber = 8,
    kCourierFieldNumber = 10,
    kWardFieldNumber = 11,
    kHeroIconFieldNumber = 12,
    kSpiderGraphFieldNumber = 13,
    kUserFeedFieldNumber = 14,
    kStatFieldNumber = 15,
    kRoshanFieldNumber = 16,
    kCreepFieldNumber = 17,
    kTowerFieldNumber = 18,
    kEffigyFieldNumber = 19,
    kDecorationFieldNumber = 20,
    kBackgroundFieldNumber = 100,
  };
  // .CMsgShowcaseItem_Trophy trophy = 1;
  bool has_trophy() const;
  private:
  bool _internal_has_trophy() const;
  public:
  void clear_trophy();
  const ::CMsgShowcaseItem_Trophy& trophy() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Trophy* release_trophy();
  ::CMsgShowcaseItem_Trophy* mutable_trophy();
  void set_allocated_trophy(::CMsgShowcaseItem_Trophy* trophy);
  private:
  const ::CMsgShowcaseItem_Trophy& _internal_trophy() const;
  ::CMsgShowcaseItem_Trophy* _internal_mutable_trophy();
  public:
  void unsafe_arena_set_allocated_trophy(
      ::CMsgShowcaseItem_Trophy* trophy);
  ::CMsgShowcaseItem_Trophy* unsafe_arena_release_trophy();

  // .CMsgShowcaseItem_EconItem econ_item_icon = 2;
  bool has_econ_item_icon() const;
  private:
  bool _internal_has_econ_item_icon() const;
  public:
  void clear_econ_item_icon();
  const ::CMsgShowcaseItem_EconItem& econ_item_icon() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem* release_econ_item_icon();
  ::CMsgShowcaseItem_EconItem* mutable_econ_item_icon();
  void set_allocated_econ_item_icon(::CMsgShowcaseItem_EconItem* econ_item_icon);
  private:
  const ::CMsgShowcaseItem_EconItem& _internal_econ_item_icon() const;
  ::CMsgShowcaseItem_EconItem* _internal_mutable_econ_item_icon();
  public:
  void unsafe_arena_set_allocated_econ_item_icon(
      ::CMsgShowcaseItem_EconItem* econ_item_icon);
  ::CMsgShowcaseItem_EconItem* unsafe_arena_release_econ_item_icon();

  // .CMsgShowcaseItem_EconItem sticker = 3;
  bool has_sticker() const;
  private:
  bool _internal_has_sticker() const;
  public:
  void clear_sticker();
  const ::CMsgShowcaseItem_EconItem& sticker() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem* release_sticker();
  ::CMsgShowcaseItem_EconItem* mutable_sticker();
  void set_allocated_sticker(::CMsgShowcaseItem_EconItem* sticker);
  private:
  const ::CMsgShowcaseItem_EconItem& _internal_sticker() const;
  ::CMsgShowcaseItem_EconItem* _internal_mutable_sticker();
  public:
  void unsafe_arena_set_allocated_sticker(
      ::CMsgShowcaseItem_EconItem* sticker);
  ::CMsgShowcaseItem_EconItem* unsafe_arena_release_sticker();

  // .CMsgShowcaseItem_Hero hero_model = 4;
  bool has_hero_model() const;
  private:
  bool _internal_has_hero_model() const;
  public:
  void clear_hero_model();
  const ::CMsgShowcaseItem_Hero& hero_model() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Hero* release_hero_model();
  ::CMsgShowcaseItem_Hero* mutable_hero_model();
  void set_allocated_hero_model(::CMsgShowcaseItem_Hero* hero_model);
  private:
  const ::CMsgShowcaseItem_Hero& _internal_hero_model() const;
  ::CMsgShowcaseItem_Hero* _internal_mutable_hero_model();
  public:
  void unsafe_arena_set_allocated_hero_model(
      ::CMsgShowcaseItem_Hero* hero_model);
  ::CMsgShowcaseItem_Hero* unsafe_arena_release_hero_model();

  // .CMsgShowcaseItem_PlayerMatch player_match = 5;
  bool has_player_match() const;
  private:
  bool _internal_has_player_match() const;
  public:
  void clear_player_match();
  const ::CMsgShowcaseItem_PlayerMatch& player_match() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_PlayerMatch* release_player_match();
  ::CMsgShowcaseItem_PlayerMatch* mutable_player_match();
  void set_allocated_player_match(::CMsgShowcaseItem_PlayerMatch* player_match);
  private:
  const ::CMsgShowcaseItem_PlayerMatch& _internal_player_match() const;
  ::CMsgShowcaseItem_PlayerMatch* _internal_mutable_player_match();
  public:
  void unsafe_arena_set_allocated_player_match(
      ::CMsgShowcaseItem_PlayerMatch* player_match);
  ::CMsgShowcaseItem_PlayerMatch* unsafe_arena_release_player_match();

  // .CMsgShowcaseItem_ChatWheel chat_wheel = 6;
  bool has_chat_wheel() const;
  private:
  bool _internal_has_chat_wheel() const;
  public:
  void clear_chat_wheel();
  const ::CMsgShowcaseItem_ChatWheel& chat_wheel() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_ChatWheel* release_chat_wheel();
  ::CMsgShowcaseItem_ChatWheel* mutable_chat_wheel();
  void set_allocated_chat_wheel(::CMsgShowcaseItem_ChatWheel* chat_wheel);
  private:
  const ::CMsgShowcaseItem_ChatWheel& _internal_chat_wheel() const;
  ::CMsgShowcaseItem_ChatWheel* _internal_mutable_chat_wheel();
  public:
  void unsafe_arena_set_allocated_chat_wheel(
      ::CMsgShowcaseItem_ChatWheel* chat_wheel);
  ::CMsgShowcaseItem_ChatWheel* unsafe_arena_release_chat_wheel();

  // .CMsgShowcaseItem_ChatWheel spray = 7;
  bool has_spray() const;
  private:
  bool _internal_has_spray() const;
  public:
  void clear_spray();
  const ::CMsgShowcaseItem_ChatWheel& spray() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_ChatWheel* release_spray();
  ::CMsgShowcaseItem_ChatWheel* mutable_spray();
  void set_allocated_spray(::CMsgShowcaseItem_ChatWheel* spray);
  private:
  const ::CMsgShowcaseItem_ChatWheel& _internal_spray() const;
  ::CMsgShowcaseItem_ChatWheel* _internal_mutable_spray();
  public:
  void unsafe_arena_set_allocated_spray(
      ::CMsgShowcaseItem_ChatWheel* spray);
  ::CMsgShowcaseItem_ChatWheel* unsafe_arena_release_spray();

  // .CMsgShowcaseItem_Emoticon emoticon = 8;
  bool has_emoticon() const;
  private:
  bool _internal_has_emoticon() const;
  public:
  void clear_emoticon();
  const ::CMsgShowcaseItem_Emoticon& emoticon() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Emoticon* release_emoticon();
  ::CMsgShowcaseItem_Emoticon* mutable_emoticon();
  void set_allocated_emoticon(::CMsgShowcaseItem_Emoticon* emoticon);
  private:
  const ::CMsgShowcaseItem_Emoticon& _internal_emoticon() const;
  ::CMsgShowcaseItem_Emoticon* _internal_mutable_emoticon();
  public:
  void unsafe_arena_set_allocated_emoticon(
      ::CMsgShowcaseItem_Emoticon* emoticon);
  ::CMsgShowcaseItem_Emoticon* unsafe_arena_release_emoticon();

  // .CMsgShowcaseItem_EconItem courier = 10;
  bool has_courier() const;
  private:
  bool _internal_has_courier() const;
  public:
  void clear_courier();
  const ::CMsgShowcaseItem_EconItem& courier() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem* release_courier();
  ::CMsgShowcaseItem_EconItem* mutable_courier();
  void set_allocated_courier(::CMsgShowcaseItem_EconItem* courier);
  private:
  const ::CMsgShowcaseItem_EconItem& _internal_courier() const;
  ::CMsgShowcaseItem_EconItem* _internal_mutable_courier();
  public:
  void unsafe_arena_set_allocated_courier(
      ::CMsgShowcaseItem_EconItem* courier);
  ::CMsgShowcaseItem_EconItem* unsafe_arena_release_courier();

  // .CMsgShowcaseItem_EconItem ward = 11;
  bool has_ward() const;
  private:
  bool _internal_has_ward() const;
  public:
  void clear_ward();
  const ::CMsgShowcaseItem_EconItem& ward() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem* release_ward();
  ::CMsgShowcaseItem_EconItem* mutable_ward();
  void set_allocated_ward(::CMsgShowcaseItem_EconItem* ward);
  private:
  const ::CMsgShowcaseItem_EconItem& _internal_ward() const;
  ::CMsgShowcaseItem_EconItem* _internal_mutable_ward();
  public:
  void unsafe_arena_set_allocated_ward(
      ::CMsgShowcaseItem_EconItem* ward);
  ::CMsgShowcaseItem_EconItem* unsafe_arena_release_ward();

  // .CMsgShowcaseItem_HeroIcon hero_icon = 12;
  bool has_hero_icon() const;
  private:
  bool _internal_has_hero_icon() const;
  public:
  void clear_hero_icon();
  const ::CMsgShowcaseItem_HeroIcon& hero_icon() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_HeroIcon* release_hero_icon();
  ::CMsgShowcaseItem_HeroIcon* mutable_hero_icon();
  void set_allocated_hero_icon(::CMsgShowcaseItem_HeroIcon* hero_icon);
  private:
  const ::CMsgShowcaseItem_HeroIcon& _internal_hero_icon() const;
  ::CMsgShowcaseItem_HeroIcon* _internal_mutable_hero_icon();
  public:
  void unsafe_arena_set_allocated_hero_icon(
      ::CMsgShowcaseItem_HeroIcon* hero_icon);
  ::CMsgShowcaseItem_HeroIcon* unsafe_arena_release_hero_icon();

  // .CMsgShowcaseItem_SpiderGraph spider_graph = 13;
  bool has_spider_graph() const;
  private:
  bool _internal_has_spider_graph() const;
  public:
  void clear_spider_graph();
  const ::CMsgShowcaseItem_SpiderGraph& spider_graph() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_SpiderGraph* release_spider_graph();
  ::CMsgShowcaseItem_SpiderGraph* mutable_spider_graph();
  void set_allocated_spider_graph(::CMsgShowcaseItem_SpiderGraph* spider_graph);
  private:
  const ::CMsgShowcaseItem_SpiderGraph& _internal_spider_graph() const;
  ::CMsgShowcaseItem_SpiderGraph* _internal_mutable_spider_graph();
  public:
  void unsafe_arena_set_allocated_spider_graph(
      ::CMsgShowcaseItem_SpiderGraph* spider_graph);
  ::CMsgShowcaseItem_SpiderGraph* unsafe_arena_release_spider_graph();

  // .CMsgShowcaseItem_UserFeed user_feed = 14;
  bool has_user_feed() const;
  private:
  bool _internal_has_user_feed() const;
  public:
  void clear_user_feed();
  const ::CMsgShowcaseItem_UserFeed& user_feed() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_UserFeed* release_user_feed();
  ::CMsgShowcaseItem_UserFeed* mutable_user_feed();
  void set_allocated_user_feed(::CMsgShowcaseItem_UserFeed* user_feed);
  private:
  const ::CMsgShowcaseItem_UserFeed& _internal_user_feed() const;
  ::CMsgShowcaseItem_UserFeed* _internal_mutable_user_feed();
  public:
  void unsafe_arena_set_allocated_user_feed(
      ::CMsgShowcaseItem_UserFeed* user_feed);
  ::CMsgShowcaseItem_UserFeed* unsafe_arena_release_user_feed();

  // .CMsgShowcaseItem_Stat stat = 15;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::CMsgShowcaseItem_Stat& stat() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Stat* release_stat();
  ::CMsgShowcaseItem_Stat* mutable_stat();
  void set_allocated_stat(::CMsgShowcaseItem_Stat* stat);
  private:
  const ::CMsgShowcaseItem_Stat& _internal_stat() const;
  ::CMsgShowcaseItem_Stat* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::CMsgShowcaseItem_Stat* stat);
  ::CMsgShowcaseItem_Stat* unsafe_arena_release_stat();

  // .CMsgShowcaseItem_EconItem roshan = 16;
  bool has_roshan() const;
  private:
  bool _internal_has_roshan() const;
  public:
  void clear_roshan();
  const ::CMsgShowcaseItem_EconItem& roshan() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem* release_roshan();
  ::CMsgShowcaseItem_EconItem* mutable_roshan();
  void set_allocated_roshan(::CMsgShowcaseItem_EconItem* roshan);
  private:
  const ::CMsgShowcaseItem_EconItem& _internal_roshan() const;
  ::CMsgShowcaseItem_EconItem* _internal_mutable_roshan();
  public:
  void unsafe_arena_set_allocated_roshan(
      ::CMsgShowcaseItem_EconItem* roshan);
  ::CMsgShowcaseItem_EconItem* unsafe_arena_release_roshan();

  // .CMsgShowcaseItem_EconItem creep = 17;
  bool has_creep() const;
  private:
  bool _internal_has_creep() const;
  public:
  void clear_creep();
  const ::CMsgShowcaseItem_EconItem& creep() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem* release_creep();
  ::CMsgShowcaseItem_EconItem* mutable_creep();
  void set_allocated_creep(::CMsgShowcaseItem_EconItem* creep);
  private:
  const ::CMsgShowcaseItem_EconItem& _internal_creep() const;
  ::CMsgShowcaseItem_EconItem* _internal_mutable_creep();
  public:
  void unsafe_arena_set_allocated_creep(
      ::CMsgShowcaseItem_EconItem* creep);
  ::CMsgShowcaseItem_EconItem* unsafe_arena_release_creep();

  // .CMsgShowcaseItem_EconItem tower = 18;
  bool has_tower() const;
  private:
  bool _internal_has_tower() const;
  public:
  void clear_tower();
  const ::CMsgShowcaseItem_EconItem& tower() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem* release_tower();
  ::CMsgShowcaseItem_EconItem* mutable_tower();
  void set_allocated_tower(::CMsgShowcaseItem_EconItem* tower);
  private:
  const ::CMsgShowcaseItem_EconItem& _internal_tower() const;
  ::CMsgShowcaseItem_EconItem* _internal_mutable_tower();
  public:
  void unsafe_arena_set_allocated_tower(
      ::CMsgShowcaseItem_EconItem* tower);
  ::CMsgShowcaseItem_EconItem* unsafe_arena_release_tower();

  // .CMsgShowcaseItem_EconItem effigy = 19;
  bool has_effigy() const;
  private:
  bool _internal_has_effigy() const;
  public:
  void clear_effigy();
  const ::CMsgShowcaseItem_EconItem& effigy() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem* release_effigy();
  ::CMsgShowcaseItem_EconItem* mutable_effigy();
  void set_allocated_effigy(::CMsgShowcaseItem_EconItem* effigy);
  private:
  const ::CMsgShowcaseItem_EconItem& _internal_effigy() const;
  ::CMsgShowcaseItem_EconItem* _internal_mutable_effigy();
  public:
  void unsafe_arena_set_allocated_effigy(
      ::CMsgShowcaseItem_EconItem* effigy);
  ::CMsgShowcaseItem_EconItem* unsafe_arena_release_effigy();

  // .CMsgShowcaseItem_EconItem decoration = 20;
  bool has_decoration() const;
  private:
  bool _internal_has_decoration() const;
  public:
  void clear_decoration();
  const ::CMsgShowcaseItem_EconItem& decoration() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem* release_decoration();
  ::CMsgShowcaseItem_EconItem* mutable_decoration();
  void set_allocated_decoration(::CMsgShowcaseItem_EconItem* decoration);
  private:
  const ::CMsgShowcaseItem_EconItem& _internal_decoration() const;
  ::CMsgShowcaseItem_EconItem* _internal_mutable_decoration();
  public:
  void unsafe_arena_set_allocated_decoration(
      ::CMsgShowcaseItem_EconItem* decoration);
  ::CMsgShowcaseItem_EconItem* unsafe_arena_release_decoration();

  // .CMsgShowcaseBackground background = 100;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  const ::CMsgShowcaseBackground& background() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseBackground* release_background();
  ::CMsgShowcaseBackground* mutable_background();
  void set_allocated_background(::CMsgShowcaseBackground* background);
  private:
  const ::CMsgShowcaseBackground& _internal_background() const;
  ::CMsgShowcaseBackground* _internal_mutable_background();
  public:
  void unsafe_arena_set_allocated_background(
      ::CMsgShowcaseBackground* background);
  ::CMsgShowcaseBackground* unsafe_arena_release_background();

  void clear_item();
  ItemCase item_case() const;
  // @@protoc_insertion_point(class_scope:CMsgShowcaseItemData)
 private:
  class _Internal;
  void set_has_trophy();
  void set_has_econ_item_icon();
  void set_has_sticker();
  void set_has_hero_model();
  void set_has_player_match();
  void set_has_chat_wheel();
  void set_has_spray();
  void set_has_emoticon();
  void set_has_courier();
  void set_has_ward();
  void set_has_hero_icon();
  void set_has_spider_graph();
  void set_has_user_feed();
  void set_has_stat();
  void set_has_roshan();
  void set_has_creep();
  void set_has_tower();
  void set_has_effigy();
  void set_has_decoration();
  void set_has_background();

  inline bool has_item() const;
  inline void clear_has_item();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ItemUnion {
      constexpr ItemUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::CMsgShowcaseItem_Trophy* trophy_;
      ::CMsgShowcaseItem_EconItem* econ_item_icon_;
      ::CMsgShowcaseItem_EconItem* sticker_;
      ::CMsgShowcaseItem_Hero* hero_model_;
      ::CMsgShowcaseItem_PlayerMatch* player_match_;
      ::CMsgShowcaseItem_ChatWheel* chat_wheel_;
      ::CMsgShowcaseItem_ChatWheel* spray_;
      ::CMsgShowcaseItem_Emoticon* emoticon_;
      ::CMsgShowcaseItem_EconItem* courier_;
      ::CMsgShowcaseItem_EconItem* ward_;
      ::CMsgShowcaseItem_HeroIcon* hero_icon_;
      ::CMsgShowcaseItem_SpiderGraph* spider_graph_;
      ::CMsgShowcaseItem_UserFeed* user_feed_;
      ::CMsgShowcaseItem_Stat* stat_;
      ::CMsgShowcaseItem_EconItem* roshan_;
      ::CMsgShowcaseItem_EconItem* creep_;
      ::CMsgShowcaseItem_EconItem* tower_;
      ::CMsgShowcaseItem_EconItem* effigy_;
      ::CMsgShowcaseItem_EconItem* decoration_;
      ::CMsgShowcaseBackground* background_;
    } item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItemPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItemPosition) */ {
 public:
  inline CMsgShowcaseItemPosition() : CMsgShowcaseItemPosition(nullptr) {}
  ~CMsgShowcaseItemPosition() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItemPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItemPosition(const CMsgShowcaseItemPosition& from);
  CMsgShowcaseItemPosition(CMsgShowcaseItemPosition&& from) noexcept
    : CMsgShowcaseItemPosition() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItemPosition& operator=(const CMsgShowcaseItemPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItemPosition& operator=(CMsgShowcaseItemPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItemPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItemPosition* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItemPosition*>(
               &_CMsgShowcaseItemPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgShowcaseItemPosition& a, CMsgShowcaseItemPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItemPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItemPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItemPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItemPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItemPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItemPosition& from) {
    CMsgShowcaseItemPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItemPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItemPosition";
  }
  protected:
  explicit CMsgShowcaseItemPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionXFieldNumber = 1,
    kPositionYFieldNumber = 2,
    kScaleFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kRotationFieldNumber = 6,
    kParentIdFieldNumber = 7,
    kParentAttachmentPointIdFieldNumber = 8,
    kAttachmentAnchorXFieldNumber = 9,
    kAttachmentAnchorYFieldNumber = 10,
  };
  // optional int32 position_x = 1;
  bool has_position_x() const;
  private:
  bool _internal_has_position_x() const;
  public:
  void clear_position_x();
  int32_t position_x() const;
  void set_position_x(int32_t value);
  private:
  int32_t _internal_position_x() const;
  void _internal_set_position_x(int32_t value);
  public:

  // optional int32 position_y = 2;
  bool has_position_y() const;
  private:
  bool _internal_has_position_y() const;
  public:
  void clear_position_y();
  int32_t position_y() const;
  void set_position_y(int32_t value);
  private:
  int32_t _internal_position_y() const;
  void _internal_set_position_y(int32_t value);
  public:

  // optional uint32 scale = 3;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  uint32_t scale() const;
  void set_scale(uint32_t value);
  private:
  uint32_t _internal_scale() const;
  void _internal_set_scale(uint32_t value);
  public:

  // optional uint32 width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional uint32 rotation = 6;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  uint32_t rotation() const;
  void set_rotation(uint32_t value);
  private:
  uint32_t _internal_rotation() const;
  void _internal_set_rotation(uint32_t value);
  public:

  // optional uint32 parent_id = 7;
  bool has_parent_id() const;
  private:
  bool _internal_has_parent_id() const;
  public:
  void clear_parent_id();
  uint32_t parent_id() const;
  void set_parent_id(uint32_t value);
  private:
  uint32_t _internal_parent_id() const;
  void _internal_set_parent_id(uint32_t value);
  public:

  // optional uint32 parent_attachment_point_id = 8;
  bool has_parent_attachment_point_id() const;
  private:
  bool _internal_has_parent_attachment_point_id() const;
  public:
  void clear_parent_attachment_point_id();
  uint32_t parent_attachment_point_id() const;
  void set_parent_attachment_point_id(uint32_t value);
  private:
  uint32_t _internal_parent_attachment_point_id() const;
  void _internal_set_parent_attachment_point_id(uint32_t value);
  public:

  // optional uint32 attachment_anchor_x = 9;
  bool has_attachment_anchor_x() const;
  private:
  bool _internal_has_attachment_anchor_x() const;
  public:
  void clear_attachment_anchor_x();
  uint32_t attachment_anchor_x() const;
  void set_attachment_anchor_x(uint32_t value);
  private:
  uint32_t _internal_attachment_anchor_x() const;
  void _internal_set_attachment_anchor_x(uint32_t value);
  public:

  // optional uint32 attachment_anchor_y = 10;
  bool has_attachment_anchor_y() const;
  private:
  bool _internal_has_attachment_anchor_y() const;
  public:
  void clear_attachment_anchor_y();
  uint32_t attachment_anchor_y() const;
  void set_attachment_anchor_y(uint32_t value);
  private:
  uint32_t _internal_attachment_anchor_y() const;
  void _internal_set_attachment_anchor_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItemPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t position_x_;
    int32_t position_y_;
    uint32_t scale_;
    uint32_t width_;
    uint32_t height_;
    uint32_t rotation_;
    uint32_t parent_id_;
    uint32_t parent_attachment_point_id_;
    uint32_t attachment_anchor_x_;
    uint32_t attachment_anchor_y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem) */ {
 public:
  inline CMsgShowcaseItem() : CMsgShowcaseItem(nullptr) {}
  ~CMsgShowcaseItem() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem(const CMsgShowcaseItem& from);
  CMsgShowcaseItem(CMsgShowcaseItem&& from) noexcept
    : CMsgShowcaseItem() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem& operator=(const CMsgShowcaseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem& operator=(CMsgShowcaseItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem*>(
               &_CMsgShowcaseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgShowcaseItem& a, CMsgShowcaseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem& from) {
    CMsgShowcaseItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem";
  }
  protected:
  explicit CMsgShowcaseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemPositionFieldNumber = 2,
    kItemDataFieldNumber = 3,
    kShowcaseItemIdFieldNumber = 1,
    kStateFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional .CMsgShowcaseItemPosition item_position = 2;
  bool has_item_position() const;
  private:
  bool _internal_has_item_position() const;
  public:
  void clear_item_position();
  const ::CMsgShowcaseItemPosition& item_position() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItemPosition* release_item_position();
  ::CMsgShowcaseItemPosition* mutable_item_position();
  void set_allocated_item_position(::CMsgShowcaseItemPosition* item_position);
  private:
  const ::CMsgShowcaseItemPosition& _internal_item_position() const;
  ::CMsgShowcaseItemPosition* _internal_mutable_item_position();
  public:
  void unsafe_arena_set_allocated_item_position(
      ::CMsgShowcaseItemPosition* item_position);
  ::CMsgShowcaseItemPosition* unsafe_arena_release_item_position();

  // optional .CMsgShowcaseItemData item_data = 3;
  bool has_item_data() const;
  private:
  bool _internal_has_item_data() const;
  public:
  void clear_item_data();
  const ::CMsgShowcaseItemData& item_data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItemData* release_item_data();
  ::CMsgShowcaseItemData* mutable_item_data();
  void set_allocated_item_data(::CMsgShowcaseItemData* item_data);
  private:
  const ::CMsgShowcaseItemData& _internal_item_data() const;
  ::CMsgShowcaseItemData* _internal_mutable_item_data();
  public:
  void unsafe_arena_set_allocated_item_data(
      ::CMsgShowcaseItemData* item_data);
  ::CMsgShowcaseItemData* unsafe_arena_release_item_data();

  // optional uint32 showcase_item_id = 1;
  bool has_showcase_item_id() const;
  private:
  bool _internal_has_showcase_item_id() const;
  public:
  void clear_showcase_item_id();
  uint32_t showcase_item_id() const;
  void set_showcase_item_id(uint32_t value);
  private:
  uint32_t _internal_showcase_item_id() const;
  void _internal_set_showcase_item_id(uint32_t value);
  public:

  // optional .EShowcaseItemState state = 4 [default = k_eShowcaseItemState_Ok];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::EShowcaseItemState state() const;
  void set_state(::EShowcaseItemState value);
  private:
  ::EShowcaseItemState _internal_state() const;
  void _internal_set_state(::EShowcaseItemState value);
  public:

  // optional uint32 flags = 5;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItemPosition* item_position_;
    ::CMsgShowcaseItemData* item_data_;
    uint32_t showcase_item_id_;
    int state_;
    uint32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcase) */ {
 public:
  inline CMsgShowcase() : CMsgShowcase(nullptr) {}
  ~CMsgShowcase() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcase(const CMsgShowcase& from);
  CMsgShowcase(CMsgShowcase&& from) noexcept
    : CMsgShowcase() {
    *this = ::std::move(from);
  }

  inline CMsgShowcase& operator=(const CMsgShowcase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcase& operator=(CMsgShowcase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcase& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcase* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcase*>(
               &_CMsgShowcase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgShowcase& a, CMsgShowcase& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcase& from) {
    CMsgShowcase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcase";
  }
  protected:
  explicit CMsgShowcase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcase_EModerationState EModerationState;
  static constexpr EModerationState k_eModerationState_Ok =
    CMsgShowcase_EModerationState_k_eModerationState_Ok;
  static constexpr EModerationState k_eModerationState_PendingApproval =
    CMsgShowcase_EModerationState_k_eModerationState_PendingApproval;
  static inline bool EModerationState_IsValid(int value) {
    return CMsgShowcase_EModerationState_IsValid(value);
  }
  static constexpr EModerationState EModerationState_MIN =
    CMsgShowcase_EModerationState_EModerationState_MIN;
  static constexpr EModerationState EModerationState_MAX =
    CMsgShowcase_EModerationState_EModerationState_MAX;
  static constexpr int EModerationState_ARRAYSIZE =
    CMsgShowcase_EModerationState_EModerationState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EModerationState_descriptor() {
    return CMsgShowcase_EModerationState_descriptor();
  }
  template<typename T>
  static inline const std::string& EModerationState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EModerationState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EModerationState_Name.");
    return CMsgShowcase_EModerationState_Name(enum_t_value);
  }
  static inline bool EModerationState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EModerationState* value) {
    return CMsgShowcase_EModerationState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kShowcaseItemsFieldNumber = 1,
    kBackgroundFieldNumber = 3,
    kModerationStateFieldNumber = 4,
  };
  // repeated .CMsgShowcaseItem showcase_items = 1;
  int showcase_items_size() const;
  private:
  int _internal_showcase_items_size() const;
  public:
  void clear_showcase_items();
  ::CMsgShowcaseItem* mutable_showcase_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseItem >*
      mutable_showcase_items();
  private:
  const ::CMsgShowcaseItem& _internal_showcase_items(int index) const;
  ::CMsgShowcaseItem* _internal_add_showcase_items();
  public:
  const ::CMsgShowcaseItem& showcase_items(int index) const;
  ::CMsgShowcaseItem* add_showcase_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseItem >&
      showcase_items() const;

  // optional .CMsgShowcaseItem background = 3;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  const ::CMsgShowcaseItem& background() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem* release_background();
  ::CMsgShowcaseItem* mutable_background();
  void set_allocated_background(::CMsgShowcaseItem* background);
  private:
  const ::CMsgShowcaseItem& _internal_background() const;
  ::CMsgShowcaseItem* _internal_mutable_background();
  public:
  void unsafe_arena_set_allocated_background(
      ::CMsgShowcaseItem* background);
  ::CMsgShowcaseItem* unsafe_arena_release_background();

  // optional .CMsgShowcase.EModerationState moderation_state = 4 [default = k_eModerationState_Ok];
  bool has_moderation_state() const;
  private:
  bool _internal_has_moderation_state() const;
  public:
  void clear_moderation_state();
  ::CMsgShowcase_EModerationState moderation_state() const;
  void set_moderation_state(::CMsgShowcase_EModerationState value);
  private:
  ::CMsgShowcase_EModerationState _internal_moderation_state() const;
  void _internal_set_moderation_state(::CMsgShowcase_EModerationState value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseItem > showcase_items_;
    ::CMsgShowcaseItem* background_;
    int moderation_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseGetUserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseGetUserData) */ {
 public:
  inline CMsgClientToGCShowcaseGetUserData() : CMsgClientToGCShowcaseGetUserData(nullptr) {}
  ~CMsgClientToGCShowcaseGetUserData() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseGetUserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseGetUserData(const CMsgClientToGCShowcaseGetUserData& from);
  CMsgClientToGCShowcaseGetUserData(CMsgClientToGCShowcaseGetUserData&& from) noexcept
    : CMsgClientToGCShowcaseGetUserData() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseGetUserData& operator=(const CMsgClientToGCShowcaseGetUserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseGetUserData& operator=(CMsgClientToGCShowcaseGetUserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseGetUserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseGetUserData* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseGetUserData*>(
               &_CMsgClientToGCShowcaseGetUserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgClientToGCShowcaseGetUserData& a, CMsgClientToGCShowcaseGetUserData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseGetUserData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseGetUserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseGetUserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseGetUserData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseGetUserData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseGetUserData& from) {
    CMsgClientToGCShowcaseGetUserData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseGetUserData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseGetUserData";
  }
  protected:
  explicit CMsgClientToGCShowcaseGetUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kShowcaseTypeFieldNumber = 2,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseGetUserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    int showcase_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseGetUserDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseGetUserDataResponse) */ {
 public:
  inline CMsgClientToGCShowcaseGetUserDataResponse() : CMsgClientToGCShowcaseGetUserDataResponse(nullptr) {}
  ~CMsgClientToGCShowcaseGetUserDataResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseGetUserDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseGetUserDataResponse(const CMsgClientToGCShowcaseGetUserDataResponse& from);
  CMsgClientToGCShowcaseGetUserDataResponse(CMsgClientToGCShowcaseGetUserDataResponse&& from) noexcept
    : CMsgClientToGCShowcaseGetUserDataResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseGetUserDataResponse& operator=(const CMsgClientToGCShowcaseGetUserDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseGetUserDataResponse& operator=(CMsgClientToGCShowcaseGetUserDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseGetUserDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseGetUserDataResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseGetUserDataResponse*>(
               &_CMsgClientToGCShowcaseGetUserDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgClientToGCShowcaseGetUserDataResponse& a, CMsgClientToGCShowcaseGetUserDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseGetUserDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseGetUserDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseGetUserDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseGetUserDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseGetUserDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseGetUserDataResponse& from) {
    CMsgClientToGCShowcaseGetUserDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseGetUserDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseGetUserDataResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseGetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseGetUserDataResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eUnknownShowcase =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eUnknownShowcase;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseGetUserDataResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseGetUserDataResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseGetUserDataResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseGetUserDataResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kShowcaseFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // optional .CMsgShowcase showcase = 2;
  bool has_showcase() const;
  private:
  bool _internal_has_showcase() const;
  public:
  void clear_showcase();
  const ::CMsgShowcase& showcase() const;
  PROTOBUF_NODISCARD ::CMsgShowcase* release_showcase();
  ::CMsgShowcase* mutable_showcase();
  void set_allocated_showcase(::CMsgShowcase* showcase);
  private:
  const ::CMsgShowcase& _internal_showcase() const;
  ::CMsgShowcase* _internal_mutable_showcase();
  public:
  void unsafe_arena_set_allocated_showcase(
      ::CMsgShowcase* showcase);
  ::CMsgShowcase* unsafe_arena_release_showcase();

  // optional .CMsgClientToGCShowcaseGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseGetUserDataResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseGetUserDataResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseGetUserDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcase* showcase_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseSetUserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseSetUserData) */ {
 public:
  inline CMsgClientToGCShowcaseSetUserData() : CMsgClientToGCShowcaseSetUserData(nullptr) {}
  ~CMsgClientToGCShowcaseSetUserData() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSetUserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseSetUserData(const CMsgClientToGCShowcaseSetUserData& from);
  CMsgClientToGCShowcaseSetUserData(CMsgClientToGCShowcaseSetUserData&& from) noexcept
    : CMsgClientToGCShowcaseSetUserData() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseSetUserData& operator=(const CMsgClientToGCShowcaseSetUserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseSetUserData& operator=(CMsgClientToGCShowcaseSetUserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseSetUserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseSetUserData* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseSetUserData*>(
               &_CMsgClientToGCShowcaseSetUserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgClientToGCShowcaseSetUserData& a, CMsgClientToGCShowcaseSetUserData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseSetUserData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseSetUserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseSetUserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseSetUserData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseSetUserData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseSetUserData& from) {
    CMsgClientToGCShowcaseSetUserData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseSetUserData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseSetUserData";
  }
  protected:
  explicit CMsgClientToGCShowcaseSetUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowcaseFieldNumber = 2,
    kShowcaseTypeFieldNumber = 1,
    kFormatVersionFieldNumber = 3,
  };
  // optional .CMsgShowcase showcase = 2;
  bool has_showcase() const;
  private:
  bool _internal_has_showcase() const;
  public:
  void clear_showcase();
  const ::CMsgShowcase& showcase() const;
  PROTOBUF_NODISCARD ::CMsgShowcase* release_showcase();
  ::CMsgShowcase* mutable_showcase();
  void set_allocated_showcase(::CMsgShowcase* showcase);
  private:
  const ::CMsgShowcase& _internal_showcase() const;
  ::CMsgShowcase* _internal_mutable_showcase();
  public:
  void unsafe_arena_set_allocated_showcase(
      ::CMsgShowcase* showcase);
  ::CMsgShowcase* unsafe_arena_release_showcase();

  // optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // optional uint32 format_version = 3;
  bool has_format_version() const;
  private:
  bool _internal_has_format_version() const;
  public:
  void clear_format_version();
  uint32_t format_version() const;
  void set_format_version(uint32_t value);
  private:
  uint32_t _internal_format_version() const;
  void _internal_set_format_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseSetUserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcase* showcase_;
    int showcase_type_;
    uint32_t format_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseSetUserDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseSetUserDataResponse) */ {
 public:
  inline CMsgClientToGCShowcaseSetUserDataResponse() : CMsgClientToGCShowcaseSetUserDataResponse(nullptr) {}
  ~CMsgClientToGCShowcaseSetUserDataResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSetUserDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseSetUserDataResponse(const CMsgClientToGCShowcaseSetUserDataResponse& from);
  CMsgClientToGCShowcaseSetUserDataResponse(CMsgClientToGCShowcaseSetUserDataResponse&& from) noexcept
    : CMsgClientToGCShowcaseSetUserDataResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseSetUserDataResponse& operator=(const CMsgClientToGCShowcaseSetUserDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseSetUserDataResponse& operator=(CMsgClientToGCShowcaseSetUserDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseSetUserDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseSetUserDataResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseSetUserDataResponse*>(
               &_CMsgClientToGCShowcaseSetUserDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgClientToGCShowcaseSetUserDataResponse& a, CMsgClientToGCShowcaseSetUserDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseSetUserDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseSetUserDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseSetUserDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseSetUserDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseSetUserDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseSetUserDataResponse& from) {
    CMsgClientToGCShowcaseSetUserDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseSetUserDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseSetUserDataResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseSetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseSetUserDataResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eInvalid =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eInvalid;
  static constexpr EResponse k_eLockedFromEditing =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eLockedFromEditing;
  static constexpr EResponse k_eBudgetExceeded =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eBudgetExceeded;
  static constexpr EResponse k_eCommunicationScoreTooLow =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eCommunicationScoreTooLow;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseSetUserDataResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseSetUserDataResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseSetUserDataResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseSetUserDataResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValidatedShowcaseFieldNumber = 2,
    kResponseFieldNumber = 1,
    kLockedUntilTimestampFieldNumber = 3,
  };
  // optional .CMsgShowcase validated_showcase = 2;
  bool has_validated_showcase() const;
  private:
  bool _internal_has_validated_showcase() const;
  public:
  void clear_validated_showcase();
  const ::CMsgShowcase& validated_showcase() const;
  PROTOBUF_NODISCARD ::CMsgShowcase* release_validated_showcase();
  ::CMsgShowcase* mutable_validated_showcase();
  void set_allocated_validated_showcase(::CMsgShowcase* validated_showcase);
  private:
  const ::CMsgShowcase& _internal_validated_showcase() const;
  ::CMsgShowcase* _internal_mutable_validated_showcase();
  public:
  void unsafe_arena_set_allocated_validated_showcase(
      ::CMsgShowcase* validated_showcase);
  ::CMsgShowcase* unsafe_arena_release_validated_showcase();

  // optional .CMsgClientToGCShowcaseSetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseSetUserDataResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseSetUserDataResponse_EResponse value);
  public:

  // optional uint32 locked_until_timestamp = 3;
  bool has_locked_until_timestamp() const;
  private:
  bool _internal_has_locked_until_timestamp() const;
  public:
  void clear_locked_until_timestamp();
  uint32_t locked_until_timestamp() const;
  void set_locked_until_timestamp(uint32_t value);
  private:
  uint32_t _internal_locked_until_timestamp() const;
  void _internal_set_locked_until_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseSetUserDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcase* validated_showcase_;
    int response_;
    uint32_t locked_until_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseSubmitReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseSubmitReport) */ {
 public:
  inline CMsgClientToGCShowcaseSubmitReport() : CMsgClientToGCShowcaseSubmitReport(nullptr) {}
  ~CMsgClientToGCShowcaseSubmitReport() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSubmitReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseSubmitReport(const CMsgClientToGCShowcaseSubmitReport& from);
  CMsgClientToGCShowcaseSubmitReport(CMsgClientToGCShowcaseSubmitReport&& from) noexcept
    : CMsgClientToGCShowcaseSubmitReport() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseSubmitReport& operator=(const CMsgClientToGCShowcaseSubmitReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseSubmitReport& operator=(CMsgClientToGCShowcaseSubmitReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseSubmitReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseSubmitReport* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseSubmitReport*>(
               &_CMsgClientToGCShowcaseSubmitReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgClientToGCShowcaseSubmitReport& a, CMsgClientToGCShowcaseSubmitReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseSubmitReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseSubmitReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseSubmitReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseSubmitReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseSubmitReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseSubmitReport& from) {
    CMsgClientToGCShowcaseSubmitReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseSubmitReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseSubmitReport";
  }
  protected:
  explicit CMsgClientToGCShowcaseSubmitReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportCommentFieldNumber = 3,
    kTargetAccountIdFieldNumber = 1,
    kShowcaseTypeFieldNumber = 2,
  };
  // optional string report_comment = 3;
  bool has_report_comment() const;
  private:
  bool _internal_has_report_comment() const;
  public:
  void clear_report_comment();
  const std::string& report_comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_report_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_report_comment();
  PROTOBUF_NODISCARD std::string* release_report_comment();
  void set_allocated_report_comment(std::string* report_comment);
  private:
  const std::string& _internal_report_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report_comment(const std::string& value);
  std::string* _internal_mutable_report_comment();
  public:

  // optional uint32 target_account_id = 1;
  bool has_target_account_id() const;
  private:
  bool _internal_has_target_account_id() const;
  public:
  void clear_target_account_id();
  uint32_t target_account_id() const;
  void set_target_account_id(uint32_t value);
  private:
  uint32_t _internal_target_account_id() const;
  void _internal_set_target_account_id(uint32_t value);
  public:

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseSubmitReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_comment_;
    uint32_t target_account_id_;
    int showcase_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseSubmitReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseSubmitReportResponse) */ {
 public:
  inline CMsgClientToGCShowcaseSubmitReportResponse() : CMsgClientToGCShowcaseSubmitReportResponse(nullptr) {}
  ~CMsgClientToGCShowcaseSubmitReportResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSubmitReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseSubmitReportResponse(const CMsgClientToGCShowcaseSubmitReportResponse& from);
  CMsgClientToGCShowcaseSubmitReportResponse(CMsgClientToGCShowcaseSubmitReportResponse&& from) noexcept
    : CMsgClientToGCShowcaseSubmitReportResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseSubmitReportResponse& operator=(const CMsgClientToGCShowcaseSubmitReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseSubmitReportResponse& operator=(CMsgClientToGCShowcaseSubmitReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseSubmitReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseSubmitReportResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseSubmitReportResponse*>(
               &_CMsgClientToGCShowcaseSubmitReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgClientToGCShowcaseSubmitReportResponse& a, CMsgClientToGCShowcaseSubmitReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseSubmitReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseSubmitReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseSubmitReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseSubmitReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseSubmitReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseSubmitReportResponse& from) {
    CMsgClientToGCShowcaseSubmitReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseSubmitReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseSubmitReportResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseSubmitReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseSubmitReportResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eAlreadyReported =
    CMsgClientToGCShowcaseSubmitReportResponse_EResponse_k_eAlreadyReported;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseSubmitReportResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseSubmitReportResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseSubmitReportResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseSubmitReportResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseSubmitReportResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseSubmitReportResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseSubmitReportResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // optional .CMsgClientToGCShowcaseSubmitReportResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseSubmitReportResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseSubmitReportResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseSubmitReportResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseSubmitReportResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseSubmitReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseReportsRollupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseReportsRollupInfo) */ {
 public:
  inline CMsgShowcaseReportsRollupInfo() : CMsgShowcaseReportsRollupInfo(nullptr) {}
  ~CMsgShowcaseReportsRollupInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseReportsRollupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseReportsRollupInfo(const CMsgShowcaseReportsRollupInfo& from);
  CMsgShowcaseReportsRollupInfo(CMsgShowcaseReportsRollupInfo&& from) noexcept
    : CMsgShowcaseReportsRollupInfo() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseReportsRollupInfo& operator=(const CMsgShowcaseReportsRollupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseReportsRollupInfo& operator=(CMsgShowcaseReportsRollupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseReportsRollupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseReportsRollupInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseReportsRollupInfo*>(
               &_CMsgShowcaseReportsRollupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgShowcaseReportsRollupInfo& a, CMsgShowcaseReportsRollupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseReportsRollupInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseReportsRollupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseReportsRollupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseReportsRollupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseReportsRollupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseReportsRollupInfo& from) {
    CMsgShowcaseReportsRollupInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseReportsRollupInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseReportsRollupInfo";
  }
  protected:
  explicit CMsgShowcaseReportsRollupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollupIdFieldNumber = 1,
    kStartTimestampFieldNumber = 2,
    kEndTimestampFieldNumber = 3,
  };
  // optional uint32 rollup_id = 1;
  bool has_rollup_id() const;
  private:
  bool _internal_has_rollup_id() const;
  public:
  void clear_rollup_id();
  uint32_t rollup_id() const;
  void set_rollup_id(uint32_t value);
  private:
  uint32_t _internal_rollup_id() const;
  void _internal_set_rollup_id(uint32_t value);
  public:

  // optional uint32 start_timestamp = 2;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  uint32_t start_timestamp() const;
  void set_start_timestamp(uint32_t value);
  private:
  uint32_t _internal_start_timestamp() const;
  void _internal_set_start_timestamp(uint32_t value);
  public:

  // optional uint32 end_timestamp = 3;
  bool has_end_timestamp() const;
  private:
  bool _internal_has_end_timestamp() const;
  public:
  void clear_end_timestamp();
  uint32_t end_timestamp() const;
  void set_end_timestamp(uint32_t value);
  private:
  uint32_t _internal_end_timestamp() const;
  void _internal_set_end_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseReportsRollupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t rollup_id_;
    uint32_t start_timestamp_;
    uint32_t end_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseReportsRollupList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseReportsRollupList) */ {
 public:
  inline CMsgShowcaseReportsRollupList() : CMsgShowcaseReportsRollupList(nullptr) {}
  ~CMsgShowcaseReportsRollupList() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseReportsRollupList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseReportsRollupList(const CMsgShowcaseReportsRollupList& from);
  CMsgShowcaseReportsRollupList(CMsgShowcaseReportsRollupList&& from) noexcept
    : CMsgShowcaseReportsRollupList() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseReportsRollupList& operator=(const CMsgShowcaseReportsRollupList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseReportsRollupList& operator=(CMsgShowcaseReportsRollupList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseReportsRollupList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseReportsRollupList* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseReportsRollupList*>(
               &_CMsgShowcaseReportsRollupList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgShowcaseReportsRollupList& a, CMsgShowcaseReportsRollupList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseReportsRollupList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseReportsRollupList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseReportsRollupList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseReportsRollupList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseReportsRollupList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseReportsRollupList& from) {
    CMsgShowcaseReportsRollupList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseReportsRollupList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseReportsRollupList";
  }
  protected:
  explicit CMsgShowcaseReportsRollupList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollupsFieldNumber = 1,
  };
  // repeated .CMsgShowcaseReportsRollupInfo rollups = 1;
  int rollups_size() const;
  private:
  int _internal_rollups_size() const;
  public:
  void clear_rollups();
  ::CMsgShowcaseReportsRollupInfo* mutable_rollups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReportsRollupInfo >*
      mutable_rollups();
  private:
  const ::CMsgShowcaseReportsRollupInfo& _internal_rollups(int index) const;
  ::CMsgShowcaseReportsRollupInfo* _internal_add_rollups();
  public:
  const ::CMsgShowcaseReportsRollupInfo& rollups(int index) const;
  ::CMsgShowcaseReportsRollupInfo* add_rollups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReportsRollupInfo >&
      rollups() const;

  // @@protoc_insertion_point(class_scope:CMsgShowcaseReportsRollupList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReportsRollupInfo > rollups_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseReportsRollupEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseReportsRollupEntry) */ {
 public:
  inline CMsgShowcaseReportsRollupEntry() : CMsgShowcaseReportsRollupEntry(nullptr) {}
  ~CMsgShowcaseReportsRollupEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseReportsRollupEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseReportsRollupEntry(const CMsgShowcaseReportsRollupEntry& from);
  CMsgShowcaseReportsRollupEntry(CMsgShowcaseReportsRollupEntry&& from) noexcept
    : CMsgShowcaseReportsRollupEntry() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseReportsRollupEntry& operator=(const CMsgShowcaseReportsRollupEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseReportsRollupEntry& operator=(CMsgShowcaseReportsRollupEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseReportsRollupEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseReportsRollupEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseReportsRollupEntry*>(
               &_CMsgShowcaseReportsRollupEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgShowcaseReportsRollupEntry& a, CMsgShowcaseReportsRollupEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseReportsRollupEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseReportsRollupEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseReportsRollupEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseReportsRollupEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseReportsRollupEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseReportsRollupEntry& from) {
    CMsgShowcaseReportsRollupEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseReportsRollupEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseReportsRollupEntry";
  }
  protected:
  explicit CMsgShowcaseReportsRollupEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kShowcaseTypeFieldNumber = 2,
    kReportCountFieldNumber = 3,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // optional uint32 report_count = 3;
  bool has_report_count() const;
  private:
  bool _internal_has_report_count() const;
  public:
  void clear_report_count();
  uint32_t report_count() const;
  void set_report_count(uint32_t value);
  private:
  uint32_t _internal_report_count() const;
  void _internal_set_report_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseReportsRollupEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    int showcase_type_;
    uint32_t report_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseReportsRollup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseReportsRollup) */ {
 public:
  inline CMsgShowcaseReportsRollup() : CMsgShowcaseReportsRollup(nullptr) {}
  ~CMsgShowcaseReportsRollup() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseReportsRollup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseReportsRollup(const CMsgShowcaseReportsRollup& from);
  CMsgShowcaseReportsRollup(CMsgShowcaseReportsRollup&& from) noexcept
    : CMsgShowcaseReportsRollup() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseReportsRollup& operator=(const CMsgShowcaseReportsRollup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseReportsRollup& operator=(CMsgShowcaseReportsRollup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseReportsRollup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseReportsRollup* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseReportsRollup*>(
               &_CMsgShowcaseReportsRollup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgShowcaseReportsRollup& a, CMsgShowcaseReportsRollup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseReportsRollup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseReportsRollup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseReportsRollup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseReportsRollup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseReportsRollup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseReportsRollup& from) {
    CMsgShowcaseReportsRollup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseReportsRollup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseReportsRollup";
  }
  protected:
  explicit CMsgShowcaseReportsRollup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollupEntriesFieldNumber = 2,
    kRollupInfoFieldNumber = 1,
  };
  // repeated .CMsgShowcaseReportsRollupEntry rollup_entries = 2;
  int rollup_entries_size() const;
  private:
  int _internal_rollup_entries_size() const;
  public:
  void clear_rollup_entries();
  ::CMsgShowcaseReportsRollupEntry* mutable_rollup_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReportsRollupEntry >*
      mutable_rollup_entries();
  private:
  const ::CMsgShowcaseReportsRollupEntry& _internal_rollup_entries(int index) const;
  ::CMsgShowcaseReportsRollupEntry* _internal_add_rollup_entries();
  public:
  const ::CMsgShowcaseReportsRollupEntry& rollup_entries(int index) const;
  ::CMsgShowcaseReportsRollupEntry* add_rollup_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReportsRollupEntry >&
      rollup_entries() const;

  // optional .CMsgShowcaseReportsRollupInfo rollup_info = 1;
  bool has_rollup_info() const;
  private:
  bool _internal_has_rollup_info() const;
  public:
  void clear_rollup_info();
  const ::CMsgShowcaseReportsRollupInfo& rollup_info() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseReportsRollupInfo* release_rollup_info();
  ::CMsgShowcaseReportsRollupInfo* mutable_rollup_info();
  void set_allocated_rollup_info(::CMsgShowcaseReportsRollupInfo* rollup_info);
  private:
  const ::CMsgShowcaseReportsRollupInfo& _internal_rollup_info() const;
  ::CMsgShowcaseReportsRollupInfo* _internal_mutable_rollup_info();
  public:
  void unsafe_arena_set_allocated_rollup_info(
      ::CMsgShowcaseReportsRollupInfo* rollup_info);
  ::CMsgShowcaseReportsRollupInfo* unsafe_arena_release_rollup_info();

  // @@protoc_insertion_point(class_scope:CMsgShowcaseReportsRollup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReportsRollupEntry > rollup_entries_;
    ::CMsgShowcaseReportsRollupInfo* rollup_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminGetReportsRollupList final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminGetReportsRollupList) */ {
 public:
  inline CMsgClientToGCShowcaseAdminGetReportsRollupList() : CMsgClientToGCShowcaseAdminGetReportsRollupList(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetReportsRollupList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminGetReportsRollupList(const CMsgClientToGCShowcaseAdminGetReportsRollupList& from);
  CMsgClientToGCShowcaseAdminGetReportsRollupList(CMsgClientToGCShowcaseAdminGetReportsRollupList&& from) noexcept
    : CMsgClientToGCShowcaseAdminGetReportsRollupList() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminGetReportsRollupList& operator=(const CMsgClientToGCShowcaseAdminGetReportsRollupList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminGetReportsRollupList& operator=(CMsgClientToGCShowcaseAdminGetReportsRollupList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminGetReportsRollupList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminGetReportsRollupList* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminGetReportsRollupList*>(
               &_CMsgClientToGCShowcaseAdminGetReportsRollupList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgClientToGCShowcaseAdminGetReportsRollupList& a, CMsgClientToGCShowcaseAdminGetReportsRollupList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminGetReportsRollupList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminGetReportsRollupList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminGetReportsRollupList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminGetReportsRollupList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgClientToGCShowcaseAdminGetReportsRollupList& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgClientToGCShowcaseAdminGetReportsRollupList& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminGetReportsRollupList";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminGetReportsRollupList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminGetReportsRollupList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminGetReportsRollupListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse) */ {
 public:
  inline CMsgClientToGCShowcaseAdminGetReportsRollupListResponse() : CMsgClientToGCShowcaseAdminGetReportsRollupListResponse(nullptr) {}
  ~CMsgClientToGCShowcaseAdminGetReportsRollupListResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetReportsRollupListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminGetReportsRollupListResponse(const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse& from);
  CMsgClientToGCShowcaseAdminGetReportsRollupListResponse(CMsgClientToGCShowcaseAdminGetReportsRollupListResponse&& from) noexcept
    : CMsgClientToGCShowcaseAdminGetReportsRollupListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminGetReportsRollupListResponse& operator=(const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminGetReportsRollupListResponse& operator=(CMsgClientToGCShowcaseAdminGetReportsRollupListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse*>(
               &_CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CMsgClientToGCShowcaseAdminGetReportsRollupListResponse& a, CMsgClientToGCShowcaseAdminGetReportsRollupListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminGetReportsRollupListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminGetReportsRollupListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminGetReportsRollupListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminGetReportsRollupListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse& from) {
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminGetReportsRollupListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminGetReportsRollupListResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminGetReportsRollupListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eNoPermission =
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_k_eNoPermission;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRollupListFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // optional .CMsgShowcaseReportsRollupList rollup_list = 2;
  bool has_rollup_list() const;
  private:
  bool _internal_has_rollup_list() const;
  public:
  void clear_rollup_list();
  const ::CMsgShowcaseReportsRollupList& rollup_list() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseReportsRollupList* release_rollup_list();
  ::CMsgShowcaseReportsRollupList* mutable_rollup_list();
  void set_allocated_rollup_list(::CMsgShowcaseReportsRollupList* rollup_list);
  private:
  const ::CMsgShowcaseReportsRollupList& _internal_rollup_list() const;
  ::CMsgShowcaseReportsRollupList* _internal_mutable_rollup_list();
  public:
  void unsafe_arena_set_allocated_rollup_list(
      ::CMsgShowcaseReportsRollupList* rollup_list);
  ::CMsgShowcaseReportsRollupList* unsafe_arena_release_rollup_list();

  // optional .CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseReportsRollupList* rollup_list_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminGetReportsRollup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminGetReportsRollup) */ {
 public:
  inline CMsgClientToGCShowcaseAdminGetReportsRollup() : CMsgClientToGCShowcaseAdminGetReportsRollup(nullptr) {}
  ~CMsgClientToGCShowcaseAdminGetReportsRollup() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetReportsRollup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminGetReportsRollup(const CMsgClientToGCShowcaseAdminGetReportsRollup& from);
  CMsgClientToGCShowcaseAdminGetReportsRollup(CMsgClientToGCShowcaseAdminGetReportsRollup&& from) noexcept
    : CMsgClientToGCShowcaseAdminGetReportsRollup() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminGetReportsRollup& operator=(const CMsgClientToGCShowcaseAdminGetReportsRollup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminGetReportsRollup& operator=(CMsgClientToGCShowcaseAdminGetReportsRollup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminGetReportsRollup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminGetReportsRollup* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminGetReportsRollup*>(
               &_CMsgClientToGCShowcaseAdminGetReportsRollup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CMsgClientToGCShowcaseAdminGetReportsRollup& a, CMsgClientToGCShowcaseAdminGetReportsRollup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminGetReportsRollup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminGetReportsRollup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminGetReportsRollup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminGetReportsRollup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminGetReportsRollup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminGetReportsRollup& from) {
    CMsgClientToGCShowcaseAdminGetReportsRollup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminGetReportsRollup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminGetReportsRollup";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminGetReportsRollup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollupIdFieldNumber = 1,
  };
  // optional uint32 rollup_id = 1;
  bool has_rollup_id() const;
  private:
  bool _internal_has_rollup_id() const;
  public:
  void clear_rollup_id();
  uint32_t rollup_id() const;
  void set_rollup_id(uint32_t value);
  private:
  uint32_t _internal_rollup_id() const;
  void _internal_set_rollup_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminGetReportsRollup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t rollup_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminGetReportsRollupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminGetReportsRollupResponse) */ {
 public:
  inline CMsgClientToGCShowcaseAdminGetReportsRollupResponse() : CMsgClientToGCShowcaseAdminGetReportsRollupResponse(nullptr) {}
  ~CMsgClientToGCShowcaseAdminGetReportsRollupResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetReportsRollupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminGetReportsRollupResponse(const CMsgClientToGCShowcaseAdminGetReportsRollupResponse& from);
  CMsgClientToGCShowcaseAdminGetReportsRollupResponse(CMsgClientToGCShowcaseAdminGetReportsRollupResponse&& from) noexcept
    : CMsgClientToGCShowcaseAdminGetReportsRollupResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminGetReportsRollupResponse& operator=(const CMsgClientToGCShowcaseAdminGetReportsRollupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminGetReportsRollupResponse& operator=(CMsgClientToGCShowcaseAdminGetReportsRollupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminGetReportsRollupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminGetReportsRollupResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminGetReportsRollupResponse*>(
               &_CMsgClientToGCShowcaseAdminGetReportsRollupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CMsgClientToGCShowcaseAdminGetReportsRollupResponse& a, CMsgClientToGCShowcaseAdminGetReportsRollupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminGetReportsRollupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminGetReportsRollupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminGetReportsRollupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminGetReportsRollupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminGetReportsRollupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminGetReportsRollupResponse& from) {
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminGetReportsRollupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminGetReportsRollupResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminGetReportsRollupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eNoPermission =
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eNoPermission;
  static constexpr EResponse k_eNotFound =
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_k_eNotFound;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRollupFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // optional .CMsgShowcaseReportsRollup rollup = 2;
  bool has_rollup() const;
  private:
  bool _internal_has_rollup() const;
  public:
  void clear_rollup();
  const ::CMsgShowcaseReportsRollup& rollup() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseReportsRollup* release_rollup();
  ::CMsgShowcaseReportsRollup* mutable_rollup();
  void set_allocated_rollup(::CMsgShowcaseReportsRollup* rollup);
  private:
  const ::CMsgShowcaseReportsRollup& _internal_rollup() const;
  ::CMsgShowcaseReportsRollup* _internal_mutable_rollup();
  public:
  void unsafe_arena_set_allocated_rollup(
      ::CMsgShowcaseReportsRollup* rollup);
  ::CMsgShowcaseReportsRollup* unsafe_arena_release_rollup();

  // optional .CMsgClientToGCShowcaseAdminGetReportsRollupResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminGetReportsRollupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseReportsRollup* rollup_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseAuditEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseAuditEntry) */ {
 public:
  inline CMsgShowcaseAuditEntry() : CMsgShowcaseAuditEntry(nullptr) {}
  ~CMsgShowcaseAuditEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseAuditEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseAuditEntry(const CMsgShowcaseAuditEntry& from);
  CMsgShowcaseAuditEntry(CMsgShowcaseAuditEntry&& from) noexcept
    : CMsgShowcaseAuditEntry() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseAuditEntry& operator=(const CMsgShowcaseAuditEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseAuditEntry& operator=(CMsgShowcaseAuditEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseAuditEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseAuditEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseAuditEntry*>(
               &_CMsgShowcaseAuditEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CMsgShowcaseAuditEntry& a, CMsgShowcaseAuditEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseAuditEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseAuditEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseAuditEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseAuditEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseAuditEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseAuditEntry& from) {
    CMsgShowcaseAuditEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseAuditEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseAuditEntry";
  }
  protected:
  explicit CMsgShowcaseAuditEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowcaseTypeFieldNumber = 1,
    kAuditActionFieldNumber = 2,
    kAuditDataFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // optional .EShowcaseAuditAction audit_action = 2 [default = k_eShowcaseAuditAction_Invalid];
  bool has_audit_action() const;
  private:
  bool _internal_has_audit_action() const;
  public:
  void clear_audit_action();
  ::EShowcaseAuditAction audit_action() const;
  void set_audit_action(::EShowcaseAuditAction value);
  private:
  ::EShowcaseAuditAction _internal_audit_action() const;
  void _internal_set_audit_action(::EShowcaseAuditAction value);
  public:

  // optional uint64 audit_data = 3;
  bool has_audit_data() const;
  private:
  bool _internal_has_audit_data() const;
  public:
  void clear_audit_data();
  uint64_t audit_data() const;
  void set_audit_data(uint64_t value);
  private:
  uint64_t _internal_audit_data() const;
  void _internal_set_audit_data(uint64_t value);
  public:

  // optional uint32 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseAuditEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int showcase_type_;
    int audit_action_;
    uint64_t audit_data_;
    uint32_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseReport) */ {
 public:
  inline CMsgShowcaseReport() : CMsgShowcaseReport(nullptr) {}
  ~CMsgShowcaseReport() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseReport(const CMsgShowcaseReport& from);
  CMsgShowcaseReport(CMsgShowcaseReport&& from) noexcept
    : CMsgShowcaseReport() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseReport& operator=(const CMsgShowcaseReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseReport& operator=(CMsgShowcaseReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseReport* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseReport*>(
               &_CMsgShowcaseReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CMsgShowcaseReport& a, CMsgShowcaseReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseReport& from) {
    CMsgShowcaseReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseReport";
  }
  protected:
  explicit CMsgShowcaseReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportCommentFieldNumber = 4,
    kReporterAccountIdFieldNumber = 1,
    kShowcaseTypeFieldNumber = 2,
    kReportTimestampFieldNumber = 3,
  };
  // optional string report_comment = 4;
  bool has_report_comment() const;
  private:
  bool _internal_has_report_comment() const;
  public:
  void clear_report_comment();
  const std::string& report_comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_report_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_report_comment();
  PROTOBUF_NODISCARD std::string* release_report_comment();
  void set_allocated_report_comment(std::string* report_comment);
  private:
  const std::string& _internal_report_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report_comment(const std::string& value);
  std::string* _internal_mutable_report_comment();
  public:

  // optional uint32 reporter_account_id = 1;
  bool has_reporter_account_id() const;
  private:
  bool _internal_has_reporter_account_id() const;
  public:
  void clear_reporter_account_id();
  uint32_t reporter_account_id() const;
  void set_reporter_account_id(uint32_t value);
  private:
  uint32_t _internal_reporter_account_id() const;
  void _internal_set_reporter_account_id(uint32_t value);
  public:

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // optional uint32 report_timestamp = 3;
  bool has_report_timestamp() const;
  private:
  bool _internal_has_report_timestamp() const;
  public:
  void clear_report_timestamp();
  uint32_t report_timestamp() const;
  void set_report_timestamp(uint32_t value);
  private:
  uint32_t _internal_report_timestamp() const;
  void _internal_set_report_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_comment_;
    uint32_t reporter_account_id_;
    int showcase_type_;
    uint32_t report_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseAdminUserDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseAdminUserDetails) */ {
 public:
  inline CMsgShowcaseAdminUserDetails() : CMsgShowcaseAdminUserDetails(nullptr) {}
  ~CMsgShowcaseAdminUserDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseAdminUserDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseAdminUserDetails(const CMsgShowcaseAdminUserDetails& from);
  CMsgShowcaseAdminUserDetails(CMsgShowcaseAdminUserDetails&& from) noexcept
    : CMsgShowcaseAdminUserDetails() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseAdminUserDetails& operator=(const CMsgShowcaseAdminUserDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseAdminUserDetails& operator=(CMsgShowcaseAdminUserDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseAdminUserDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseAdminUserDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseAdminUserDetails*>(
               &_CMsgShowcaseAdminUserDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CMsgShowcaseAdminUserDetails& a, CMsgShowcaseAdminUserDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseAdminUserDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseAdminUserDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseAdminUserDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseAdminUserDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseAdminUserDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseAdminUserDetails& from) {
    CMsgShowcaseAdminUserDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseAdminUserDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseAdminUserDetails";
  }
  protected:
  explicit CMsgShowcaseAdminUserDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuditEntriesFieldNumber = 2,
    kReportsFieldNumber = 3,
    kLockedUntilTimestampFieldNumber = 1,
  };
  // repeated .CMsgShowcaseAuditEntry audit_entries = 2;
  int audit_entries_size() const;
  private:
  int _internal_audit_entries_size() const;
  public:
  void clear_audit_entries();
  ::CMsgShowcaseAuditEntry* mutable_audit_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseAuditEntry >*
      mutable_audit_entries();
  private:
  const ::CMsgShowcaseAuditEntry& _internal_audit_entries(int index) const;
  ::CMsgShowcaseAuditEntry* _internal_add_audit_entries();
  public:
  const ::CMsgShowcaseAuditEntry& audit_entries(int index) const;
  ::CMsgShowcaseAuditEntry* add_audit_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseAuditEntry >&
      audit_entries() const;

  // repeated .CMsgShowcaseReport reports = 3;
  int reports_size() const;
  private:
  int _internal_reports_size() const;
  public:
  void clear_reports();
  ::CMsgShowcaseReport* mutable_reports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReport >*
      mutable_reports();
  private:
  const ::CMsgShowcaseReport& _internal_reports(int index) const;
  ::CMsgShowcaseReport* _internal_add_reports();
  public:
  const ::CMsgShowcaseReport& reports(int index) const;
  ::CMsgShowcaseReport* add_reports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReport >&
      reports() const;

  // optional uint32 locked_until_timestamp = 1;
  bool has_locked_until_timestamp() const;
  private:
  bool _internal_has_locked_until_timestamp() const;
  public:
  void clear_locked_until_timestamp();
  uint32_t locked_until_timestamp() const;
  void set_locked_until_timestamp(uint32_t value);
  private:
  uint32_t _internal_locked_until_timestamp() const;
  void _internal_set_locked_until_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseAdminUserDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseAuditEntry > audit_entries_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReport > reports_;
    uint32_t locked_until_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminGetUserDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminGetUserDetails) */ {
 public:
  inline CMsgClientToGCShowcaseAdminGetUserDetails() : CMsgClientToGCShowcaseAdminGetUserDetails(nullptr) {}
  ~CMsgClientToGCShowcaseAdminGetUserDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetUserDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminGetUserDetails(const CMsgClientToGCShowcaseAdminGetUserDetails& from);
  CMsgClientToGCShowcaseAdminGetUserDetails(CMsgClientToGCShowcaseAdminGetUserDetails&& from) noexcept
    : CMsgClientToGCShowcaseAdminGetUserDetails() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminGetUserDetails& operator=(const CMsgClientToGCShowcaseAdminGetUserDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminGetUserDetails& operator=(CMsgClientToGCShowcaseAdminGetUserDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminGetUserDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminGetUserDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminGetUserDetails*>(
               &_CMsgClientToGCShowcaseAdminGetUserDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CMsgClientToGCShowcaseAdminGetUserDetails& a, CMsgClientToGCShowcaseAdminGetUserDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminGetUserDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminGetUserDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminGetUserDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminGetUserDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminGetUserDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminGetUserDetails& from) {
    CMsgClientToGCShowcaseAdminGetUserDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminGetUserDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminGetUserDetails";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminGetUserDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminGetUserDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminGetUserDetailsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminGetUserDetailsResponse) */ {
 public:
  inline CMsgClientToGCShowcaseAdminGetUserDetailsResponse() : CMsgClientToGCShowcaseAdminGetUserDetailsResponse(nullptr) {}
  ~CMsgClientToGCShowcaseAdminGetUserDetailsResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetUserDetailsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminGetUserDetailsResponse(const CMsgClientToGCShowcaseAdminGetUserDetailsResponse& from);
  CMsgClientToGCShowcaseAdminGetUserDetailsResponse(CMsgClientToGCShowcaseAdminGetUserDetailsResponse&& from) noexcept
    : CMsgClientToGCShowcaseAdminGetUserDetailsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminGetUserDetailsResponse& operator=(const CMsgClientToGCShowcaseAdminGetUserDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminGetUserDetailsResponse& operator=(CMsgClientToGCShowcaseAdminGetUserDetailsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminGetUserDetailsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminGetUserDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminGetUserDetailsResponse*>(
               &_CMsgClientToGCShowcaseAdminGetUserDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CMsgClientToGCShowcaseAdminGetUserDetailsResponse& a, CMsgClientToGCShowcaseAdminGetUserDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminGetUserDetailsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminGetUserDetailsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminGetUserDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminGetUserDetailsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminGetUserDetailsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminGetUserDetailsResponse& from) {
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminGetUserDetailsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminGetUserDetailsResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminGetUserDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eNoPermission =
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_k_eNoPermission;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserDetailsFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // optional .CMsgShowcaseAdminUserDetails user_details = 2;
  bool has_user_details() const;
  private:
  bool _internal_has_user_details() const;
  public:
  void clear_user_details();
  const ::CMsgShowcaseAdminUserDetails& user_details() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseAdminUserDetails* release_user_details();
  ::CMsgShowcaseAdminUserDetails* mutable_user_details();
  void set_allocated_user_details(::CMsgShowcaseAdminUserDetails* user_details);
  private:
  const ::CMsgShowcaseAdminUserDetails& _internal_user_details() const;
  ::CMsgShowcaseAdminUserDetails* _internal_mutable_user_details();
  public:
  void unsafe_arena_set_allocated_user_details(
      ::CMsgShowcaseAdminUserDetails* user_details);
  ::CMsgShowcaseAdminUserDetails* unsafe_arena_release_user_details();

  // optional .CMsgClientToGCShowcaseAdminGetUserDetailsResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminGetUserDetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseAdminUserDetails* user_details_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminReset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminReset) */ {
 public:
  inline CMsgClientToGCShowcaseAdminReset() : CMsgClientToGCShowcaseAdminReset(nullptr) {}
  ~CMsgClientToGCShowcaseAdminReset() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminReset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminReset(const CMsgClientToGCShowcaseAdminReset& from);
  CMsgClientToGCShowcaseAdminReset(CMsgClientToGCShowcaseAdminReset&& from) noexcept
    : CMsgClientToGCShowcaseAdminReset() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminReset& operator=(const CMsgClientToGCShowcaseAdminReset& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminReset& operator=(CMsgClientToGCShowcaseAdminReset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminReset& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminReset* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminReset*>(
               &_CMsgClientToGCShowcaseAdminReset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CMsgClientToGCShowcaseAdminReset& a, CMsgClientToGCShowcaseAdminReset& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminReset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminReset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminReset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminReset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminReset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminReset& from) {
    CMsgClientToGCShowcaseAdminReset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminReset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminReset";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminReset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetAccountIdFieldNumber = 1,
    kShowcaseTypeFieldNumber = 2,
  };
  // optional uint32 target_account_id = 1;
  bool has_target_account_id() const;
  private:
  bool _internal_has_target_account_id() const;
  public:
  void clear_target_account_id();
  uint32_t target_account_id() const;
  void set_target_account_id(uint32_t value);
  private:
  uint32_t _internal_target_account_id() const;
  void _internal_set_target_account_id(uint32_t value);
  public:

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminReset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t target_account_id_;
    int showcase_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminResetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminResetResponse) */ {
 public:
  inline CMsgClientToGCShowcaseAdminResetResponse() : CMsgClientToGCShowcaseAdminResetResponse(nullptr) {}
  ~CMsgClientToGCShowcaseAdminResetResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminResetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminResetResponse(const CMsgClientToGCShowcaseAdminResetResponse& from);
  CMsgClientToGCShowcaseAdminResetResponse(CMsgClientToGCShowcaseAdminResetResponse&& from) noexcept
    : CMsgClientToGCShowcaseAdminResetResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminResetResponse& operator=(const CMsgClientToGCShowcaseAdminResetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminResetResponse& operator=(CMsgClientToGCShowcaseAdminResetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminResetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminResetResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminResetResponse*>(
               &_CMsgClientToGCShowcaseAdminResetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CMsgClientToGCShowcaseAdminResetResponse& a, CMsgClientToGCShowcaseAdminResetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminResetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminResetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminResetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminResetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminResetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminResetResponse& from) {
    CMsgClientToGCShowcaseAdminResetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminResetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminResetResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminResetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseAdminResetResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eNoPermission =
    CMsgClientToGCShowcaseAdminResetResponse_EResponse_k_eNoPermission;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseAdminResetResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseAdminResetResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseAdminResetResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseAdminResetResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseAdminResetResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseAdminResetResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseAdminResetResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // optional .CMsgClientToGCShowcaseAdminResetResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseAdminResetResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseAdminResetResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseAdminResetResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseAdminResetResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminResetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminLockAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminLockAccount) */ {
 public:
  inline CMsgClientToGCShowcaseAdminLockAccount() : CMsgClientToGCShowcaseAdminLockAccount(nullptr) {}
  ~CMsgClientToGCShowcaseAdminLockAccount() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminLockAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminLockAccount(const CMsgClientToGCShowcaseAdminLockAccount& from);
  CMsgClientToGCShowcaseAdminLockAccount(CMsgClientToGCShowcaseAdminLockAccount&& from) noexcept
    : CMsgClientToGCShowcaseAdminLockAccount() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminLockAccount& operator=(const CMsgClientToGCShowcaseAdminLockAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminLockAccount& operator=(CMsgClientToGCShowcaseAdminLockAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminLockAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminLockAccount* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminLockAccount*>(
               &_CMsgClientToGCShowcaseAdminLockAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CMsgClientToGCShowcaseAdminLockAccount& a, CMsgClientToGCShowcaseAdminLockAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminLockAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminLockAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminLockAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminLockAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminLockAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminLockAccount& from) {
    CMsgClientToGCShowcaseAdminLockAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminLockAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminLockAccount";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminLockAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetAccountIdFieldNumber = 1,
    kLockedUntilTimestampFieldNumber = 2,
  };
  // optional uint32 target_account_id = 1;
  bool has_target_account_id() const;
  private:
  bool _internal_has_target_account_id() const;
  public:
  void clear_target_account_id();
  uint32_t target_account_id() const;
  void set_target_account_id(uint32_t value);
  private:
  uint32_t _internal_target_account_id() const;
  void _internal_set_target_account_id(uint32_t value);
  public:

  // optional uint32 locked_until_timestamp = 2;
  bool has_locked_until_timestamp() const;
  private:
  bool _internal_has_locked_until_timestamp() const;
  public:
  void clear_locked_until_timestamp();
  uint32_t locked_until_timestamp() const;
  void set_locked_until_timestamp(uint32_t value);
  private:
  uint32_t _internal_locked_until_timestamp() const;
  void _internal_set_locked_until_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminLockAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t target_account_id_;
    uint32_t locked_until_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminLockAccountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminLockAccountResponse) */ {
 public:
  inline CMsgClientToGCShowcaseAdminLockAccountResponse() : CMsgClientToGCShowcaseAdminLockAccountResponse(nullptr) {}
  ~CMsgClientToGCShowcaseAdminLockAccountResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminLockAccountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminLockAccountResponse(const CMsgClientToGCShowcaseAdminLockAccountResponse& from);
  CMsgClientToGCShowcaseAdminLockAccountResponse(CMsgClientToGCShowcaseAdminLockAccountResponse&& from) noexcept
    : CMsgClientToGCShowcaseAdminLockAccountResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminLockAccountResponse& operator=(const CMsgClientToGCShowcaseAdminLockAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminLockAccountResponse& operator=(CMsgClientToGCShowcaseAdminLockAccountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminLockAccountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminLockAccountResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminLockAccountResponse*>(
               &_CMsgClientToGCShowcaseAdminLockAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CMsgClientToGCShowcaseAdminLockAccountResponse& a, CMsgClientToGCShowcaseAdminLockAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminLockAccountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminLockAccountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminLockAccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminLockAccountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminLockAccountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminLockAccountResponse& from) {
    CMsgClientToGCShowcaseAdminLockAccountResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminLockAccountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminLockAccountResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminLockAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eNoPermission =
    CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_k_eNoPermission;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // optional .CMsgClientToGCShowcaseAdminLockAccountResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminLockAccountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminConvict final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminConvict) */ {
 public:
  inline CMsgClientToGCShowcaseAdminConvict() : CMsgClientToGCShowcaseAdminConvict(nullptr) {}
  ~CMsgClientToGCShowcaseAdminConvict() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminConvict(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminConvict(const CMsgClientToGCShowcaseAdminConvict& from);
  CMsgClientToGCShowcaseAdminConvict(CMsgClientToGCShowcaseAdminConvict&& from) noexcept
    : CMsgClientToGCShowcaseAdminConvict() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminConvict& operator=(const CMsgClientToGCShowcaseAdminConvict& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminConvict& operator=(CMsgClientToGCShowcaseAdminConvict&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminConvict& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminConvict* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminConvict*>(
               &_CMsgClientToGCShowcaseAdminConvict_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CMsgClientToGCShowcaseAdminConvict& a, CMsgClientToGCShowcaseAdminConvict& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminConvict* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminConvict* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminConvict* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminConvict>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminConvict& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminConvict& from) {
    CMsgClientToGCShowcaseAdminConvict::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminConvict* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminConvict";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminConvict(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetAccountIdFieldNumber = 1,
    kShowcaseTypeFieldNumber = 2,
  };
  // optional uint32 target_account_id = 1;
  bool has_target_account_id() const;
  private:
  bool _internal_has_target_account_id() const;
  public:
  void clear_target_account_id();
  uint32_t target_account_id() const;
  void set_target_account_id(uint32_t value);
  private:
  uint32_t _internal_target_account_id() const;
  void _internal_set_target_account_id(uint32_t value);
  public:

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminConvict)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t target_account_id_;
    int showcase_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminConvictResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminConvictResponse) */ {
 public:
  inline CMsgClientToGCShowcaseAdminConvictResponse() : CMsgClientToGCShowcaseAdminConvictResponse(nullptr) {}
  ~CMsgClientToGCShowcaseAdminConvictResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminConvictResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminConvictResponse(const CMsgClientToGCShowcaseAdminConvictResponse& from);
  CMsgClientToGCShowcaseAdminConvictResponse(CMsgClientToGCShowcaseAdminConvictResponse&& from) noexcept
    : CMsgClientToGCShowcaseAdminConvictResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminConvictResponse& operator=(const CMsgClientToGCShowcaseAdminConvictResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminConvictResponse& operator=(CMsgClientToGCShowcaseAdminConvictResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminConvictResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminConvictResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminConvictResponse*>(
               &_CMsgClientToGCShowcaseAdminConvictResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CMsgClientToGCShowcaseAdminConvictResponse& a, CMsgClientToGCShowcaseAdminConvictResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminConvictResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminConvictResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminConvictResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminConvictResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminConvictResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminConvictResponse& from) {
    CMsgClientToGCShowcaseAdminConvictResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminConvictResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminConvictResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminConvictResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseAdminConvictResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eNoPermission =
    CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eNoPermission;
  static constexpr EResponse k_eAlreadyConvicted =
    CMsgClientToGCShowcaseAdminConvictResponse_EResponse_k_eAlreadyConvicted;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseAdminConvictResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseAdminConvictResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseAdminConvictResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseAdminConvictResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseAdminConvictResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseAdminConvictResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseAdminConvictResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // optional .CMsgClientToGCShowcaseAdminConvictResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseAdminConvictResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseAdminConvictResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseAdminConvictResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseAdminConvictResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminConvictResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminExonerate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminExonerate) */ {
 public:
  inline CMsgClientToGCShowcaseAdminExonerate() : CMsgClientToGCShowcaseAdminExonerate(nullptr) {}
  ~CMsgClientToGCShowcaseAdminExonerate() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminExonerate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminExonerate(const CMsgClientToGCShowcaseAdminExonerate& from);
  CMsgClientToGCShowcaseAdminExonerate(CMsgClientToGCShowcaseAdminExonerate&& from) noexcept
    : CMsgClientToGCShowcaseAdminExonerate() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminExonerate& operator=(const CMsgClientToGCShowcaseAdminExonerate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminExonerate& operator=(CMsgClientToGCShowcaseAdminExonerate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminExonerate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminExonerate* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminExonerate*>(
               &_CMsgClientToGCShowcaseAdminExonerate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CMsgClientToGCShowcaseAdminExonerate& a, CMsgClientToGCShowcaseAdminExonerate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminExonerate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminExonerate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminExonerate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminExonerate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminExonerate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminExonerate& from) {
    CMsgClientToGCShowcaseAdminExonerate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminExonerate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminExonerate";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminExonerate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetAccountIdFieldNumber = 1,
    kShowcaseTypeFieldNumber = 2,
  };
  // optional uint32 target_account_id = 1;
  bool has_target_account_id() const;
  private:
  bool _internal_has_target_account_id() const;
  public:
  void clear_target_account_id();
  uint32_t target_account_id() const;
  void set_target_account_id(uint32_t value);
  private:
  uint32_t _internal_target_account_id() const;
  void _internal_set_target_account_id(uint32_t value);
  public:

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminExonerate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t target_account_id_;
    int showcase_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseAdminExonerateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseAdminExonerateResponse) */ {
 public:
  inline CMsgClientToGCShowcaseAdminExonerateResponse() : CMsgClientToGCShowcaseAdminExonerateResponse(nullptr) {}
  ~CMsgClientToGCShowcaseAdminExonerateResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminExonerateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseAdminExonerateResponse(const CMsgClientToGCShowcaseAdminExonerateResponse& from);
  CMsgClientToGCShowcaseAdminExonerateResponse(CMsgClientToGCShowcaseAdminExonerateResponse&& from) noexcept
    : CMsgClientToGCShowcaseAdminExonerateResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseAdminExonerateResponse& operator=(const CMsgClientToGCShowcaseAdminExonerateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseAdminExonerateResponse& operator=(CMsgClientToGCShowcaseAdminExonerateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseAdminExonerateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseAdminExonerateResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseAdminExonerateResponse*>(
               &_CMsgClientToGCShowcaseAdminExonerateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CMsgClientToGCShowcaseAdminExonerateResponse& a, CMsgClientToGCShowcaseAdminExonerateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseAdminExonerateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseAdminExonerateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseAdminExonerateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseAdminExonerateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseAdminExonerateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseAdminExonerateResponse& from) {
    CMsgClientToGCShowcaseAdminExonerateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseAdminExonerateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseAdminExonerateResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseAdminExonerateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseAdminExonerateResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eNoPermission =
    CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eNoPermission;
  static constexpr EResponse k_eAlreadyExonerated =
    CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_k_eAlreadyExonerated;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // optional .CMsgClientToGCShowcaseAdminExonerateResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseAdminExonerateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseModerationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseModerationInfo) */ {
 public:
  inline CMsgShowcaseModerationInfo() : CMsgShowcaseModerationInfo(nullptr) {}
  ~CMsgShowcaseModerationInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseModerationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseModerationInfo(const CMsgShowcaseModerationInfo& from);
  CMsgShowcaseModerationInfo(CMsgShowcaseModerationInfo&& from) noexcept
    : CMsgShowcaseModerationInfo() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseModerationInfo& operator=(const CMsgShowcaseModerationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseModerationInfo& operator=(CMsgShowcaseModerationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseModerationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseModerationInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseModerationInfo*>(
               &_CMsgShowcaseModerationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CMsgShowcaseModerationInfo& a, CMsgShowcaseModerationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseModerationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseModerationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseModerationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseModerationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseModerationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseModerationInfo& from) {
    CMsgShowcaseModerationInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseModerationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseModerationInfo";
  }
  protected:
  explicit CMsgShowcaseModerationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kShowcaseTypeFieldNumber = 2,
    kShowcaseTimestampFieldNumber = 3,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // optional uint32 showcase_timestamp = 3;
  bool has_showcase_timestamp() const;
  private:
  bool _internal_has_showcase_timestamp() const;
  public:
  void clear_showcase_timestamp();
  uint32_t showcase_timestamp() const;
  void set_showcase_timestamp(uint32_t value);
  private:
  uint32_t _internal_showcase_timestamp() const;
  void _internal_set_showcase_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseModerationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    int showcase_type_;
    uint32_t showcase_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseModerationGetQueue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseModerationGetQueue) */ {
 public:
  inline CMsgClientToGCShowcaseModerationGetQueue() : CMsgClientToGCShowcaseModerationGetQueue(nullptr) {}
  ~CMsgClientToGCShowcaseModerationGetQueue() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseModerationGetQueue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseModerationGetQueue(const CMsgClientToGCShowcaseModerationGetQueue& from);
  CMsgClientToGCShowcaseModerationGetQueue(CMsgClientToGCShowcaseModerationGetQueue&& from) noexcept
    : CMsgClientToGCShowcaseModerationGetQueue() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseModerationGetQueue& operator=(const CMsgClientToGCShowcaseModerationGetQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseModerationGetQueue& operator=(CMsgClientToGCShowcaseModerationGetQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseModerationGetQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseModerationGetQueue* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseModerationGetQueue*>(
               &_CMsgClientToGCShowcaseModerationGetQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CMsgClientToGCShowcaseModerationGetQueue& a, CMsgClientToGCShowcaseModerationGetQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseModerationGetQueue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseModerationGetQueue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseModerationGetQueue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseModerationGetQueue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseModerationGetQueue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseModerationGetQueue& from) {
    CMsgClientToGCShowcaseModerationGetQueue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseModerationGetQueue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseModerationGetQueue";
  }
  protected:
  explicit CMsgClientToGCShowcaseModerationGetQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimestampFieldNumber = 1,
    kResultCountFieldNumber = 2,
  };
  // optional uint32 start_timestamp = 1;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  uint32_t start_timestamp() const;
  void set_start_timestamp(uint32_t value);
  private:
  uint32_t _internal_start_timestamp() const;
  void _internal_set_start_timestamp(uint32_t value);
  public:

  // optional uint32 result_count = 2;
  bool has_result_count() const;
  private:
  bool _internal_has_result_count() const;
  public:
  void clear_result_count();
  uint32_t result_count() const;
  void set_result_count(uint32_t value);
  private:
  uint32_t _internal_result_count() const;
  void _internal_set_result_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseModerationGetQueue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t start_timestamp_;
    uint32_t result_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseModerationGetQueueResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseModerationGetQueueResponse) */ {
 public:
  inline CMsgClientToGCShowcaseModerationGetQueueResponse() : CMsgClientToGCShowcaseModerationGetQueueResponse(nullptr) {}
  ~CMsgClientToGCShowcaseModerationGetQueueResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseModerationGetQueueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseModerationGetQueueResponse(const CMsgClientToGCShowcaseModerationGetQueueResponse& from);
  CMsgClientToGCShowcaseModerationGetQueueResponse(CMsgClientToGCShowcaseModerationGetQueueResponse&& from) noexcept
    : CMsgClientToGCShowcaseModerationGetQueueResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseModerationGetQueueResponse& operator=(const CMsgClientToGCShowcaseModerationGetQueueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseModerationGetQueueResponse& operator=(CMsgClientToGCShowcaseModerationGetQueueResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseModerationGetQueueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseModerationGetQueueResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseModerationGetQueueResponse*>(
               &_CMsgClientToGCShowcaseModerationGetQueueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CMsgClientToGCShowcaseModerationGetQueueResponse& a, CMsgClientToGCShowcaseModerationGetQueueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseModerationGetQueueResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseModerationGetQueueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseModerationGetQueueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseModerationGetQueueResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseModerationGetQueueResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseModerationGetQueueResponse& from) {
    CMsgClientToGCShowcaseModerationGetQueueResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseModerationGetQueueResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseModerationGetQueueResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseModerationGetQueueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eNoPermission =
    CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_k_eNoPermission;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kShowcasesFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // repeated .CMsgShowcaseModerationInfo showcases = 2;
  int showcases_size() const;
  private:
  int _internal_showcases_size() const;
  public:
  void clear_showcases();
  ::CMsgShowcaseModerationInfo* mutable_showcases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseModerationInfo >*
      mutable_showcases();
  private:
  const ::CMsgShowcaseModerationInfo& _internal_showcases(int index) const;
  ::CMsgShowcaseModerationInfo* _internal_add_showcases();
  public:
  const ::CMsgShowcaseModerationInfo& showcases(int index) const;
  ::CMsgShowcaseModerationInfo* add_showcases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseModerationInfo >&
      showcases() const;

  // optional .CMsgClientToGCShowcaseModerationGetQueueResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseModerationGetQueueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseModerationInfo > showcases_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseModerationApplyModeration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseModerationApplyModeration) */ {
 public:
  inline CMsgClientToGCShowcaseModerationApplyModeration() : CMsgClientToGCShowcaseModerationApplyModeration(nullptr) {}
  ~CMsgClientToGCShowcaseModerationApplyModeration() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseModerationApplyModeration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseModerationApplyModeration(const CMsgClientToGCShowcaseModerationApplyModeration& from);
  CMsgClientToGCShowcaseModerationApplyModeration(CMsgClientToGCShowcaseModerationApplyModeration&& from) noexcept
    : CMsgClientToGCShowcaseModerationApplyModeration() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseModerationApplyModeration& operator=(const CMsgClientToGCShowcaseModerationApplyModeration& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseModerationApplyModeration& operator=(CMsgClientToGCShowcaseModerationApplyModeration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseModerationApplyModeration& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseModerationApplyModeration* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseModerationApplyModeration*>(
               &_CMsgClientToGCShowcaseModerationApplyModeration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CMsgClientToGCShowcaseModerationApplyModeration& a, CMsgClientToGCShowcaseModerationApplyModeration& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseModerationApplyModeration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseModerationApplyModeration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseModerationApplyModeration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseModerationApplyModeration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseModerationApplyModeration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseModerationApplyModeration& from) {
    CMsgClientToGCShowcaseModerationApplyModeration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseModerationApplyModeration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseModerationApplyModeration";
  }
  protected:
  explicit CMsgClientToGCShowcaseModerationApplyModeration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kShowcaseTypeFieldNumber = 2,
    kShowcaseTimestampFieldNumber = 3,
    kApproveFieldNumber = 4,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // optional uint32 showcase_timestamp = 3;
  bool has_showcase_timestamp() const;
  private:
  bool _internal_has_showcase_timestamp() const;
  public:
  void clear_showcase_timestamp();
  uint32_t showcase_timestamp() const;
  void set_showcase_timestamp(uint32_t value);
  private:
  uint32_t _internal_showcase_timestamp() const;
  void _internal_set_showcase_timestamp(uint32_t value);
  public:

  // optional bool approve = 4;
  bool has_approve() const;
  private:
  bool _internal_has_approve() const;
  public:
  void clear_approve();
  bool approve() const;
  void set_approve(bool value);
  private:
  bool _internal_approve() const;
  void _internal_set_approve(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseModerationApplyModeration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    int showcase_type_;
    uint32_t showcase_timestamp_;
    bool approve_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseModerationApplyModerationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseModerationApplyModerationResponse) */ {
 public:
  inline CMsgClientToGCShowcaseModerationApplyModerationResponse() : CMsgClientToGCShowcaseModerationApplyModerationResponse(nullptr) {}
  ~CMsgClientToGCShowcaseModerationApplyModerationResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseModerationApplyModerationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseModerationApplyModerationResponse(const CMsgClientToGCShowcaseModerationApplyModerationResponse& from);
  CMsgClientToGCShowcaseModerationApplyModerationResponse(CMsgClientToGCShowcaseModerationApplyModerationResponse&& from) noexcept
    : CMsgClientToGCShowcaseModerationApplyModerationResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseModerationApplyModerationResponse& operator=(const CMsgClientToGCShowcaseModerationApplyModerationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseModerationApplyModerationResponse& operator=(CMsgClientToGCShowcaseModerationApplyModerationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseModerationApplyModerationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseModerationApplyModerationResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseModerationApplyModerationResponse*>(
               &_CMsgClientToGCShowcaseModerationApplyModerationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CMsgClientToGCShowcaseModerationApplyModerationResponse& a, CMsgClientToGCShowcaseModerationApplyModerationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseModerationApplyModerationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseModerationApplyModerationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseModerationApplyModerationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseModerationApplyModerationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseModerationApplyModerationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseModerationApplyModerationResponse& from) {
    CMsgClientToGCShowcaseModerationApplyModerationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseModerationApplyModerationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseModerationApplyModerationResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseModerationApplyModerationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eNoPermission =
    CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eNoPermission;
  static constexpr EResponse k_eGone =
    CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_k_eGone;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // optional .CMsgClientToGCShowcaseModerationApplyModerationResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseModerationApplyModerationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgShowcaseEconItemReference

// optional uint64 id = 1;
inline bool CMsgShowcaseEconItemReference::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseEconItemReference::has_id() const {
  return _internal_has_id();
}
inline void CMsgShowcaseEconItemReference::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgShowcaseEconItemReference::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CMsgShowcaseEconItemReference::id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseEconItemReference.id)
  return _internal_id();
}
inline void CMsgShowcaseEconItemReference::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void CMsgShowcaseEconItemReference::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseEconItemReference.id)
}

// optional uint64 original_id = 2;
inline bool CMsgShowcaseEconItemReference::_internal_has_original_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseEconItemReference::has_original_id() const {
  return _internal_has_original_id();
}
inline void CMsgShowcaseEconItemReference::clear_original_id() {
  _impl_.original_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgShowcaseEconItemReference::_internal_original_id() const {
  return _impl_.original_id_;
}
inline uint64_t CMsgShowcaseEconItemReference::original_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseEconItemReference.original_id)
  return _internal_original_id();
}
inline void CMsgShowcaseEconItemReference::_internal_set_original_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.original_id_ = value;
}
inline void CMsgShowcaseEconItemReference::set_original_id(uint64_t value) {
  _internal_set_original_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseEconItemReference.original_id)
}

// optional uint32 definition_index = 3;
inline bool CMsgShowcaseEconItemReference::_internal_has_definition_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseEconItemReference::has_definition_index() const {
  return _internal_has_definition_index();
}
inline void CMsgShowcaseEconItemReference::clear_definition_index() {
  _impl_.definition_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseEconItemReference::_internal_definition_index() const {
  return _impl_.definition_index_;
}
inline uint32_t CMsgShowcaseEconItemReference::definition_index() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseEconItemReference.definition_index)
  return _internal_definition_index();
}
inline void CMsgShowcaseEconItemReference::_internal_set_definition_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.definition_index_ = value;
}
inline void CMsgShowcaseEconItemReference::set_definition_index(uint32_t value) {
  _internal_set_definition_index(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseEconItemReference.definition_index)
}

// optional int32 equipment_slot_index = 4 [default = -1];
inline bool CMsgShowcaseEconItemReference::_internal_has_equipment_slot_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgShowcaseEconItemReference::has_equipment_slot_index() const {
  return _internal_has_equipment_slot_index();
}
inline void CMsgShowcaseEconItemReference::clear_equipment_slot_index() {
  _impl_.equipment_slot_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgShowcaseEconItemReference::_internal_equipment_slot_index() const {
  return _impl_.equipment_slot_index_;
}
inline int32_t CMsgShowcaseEconItemReference::equipment_slot_index() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseEconItemReference.equipment_slot_index)
  return _internal_equipment_slot_index();
}
inline void CMsgShowcaseEconItemReference::_internal_set_equipment_slot_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.equipment_slot_index_ = value;
}
inline void CMsgShowcaseEconItemReference::set_equipment_slot_index(int32_t value) {
  _internal_set_equipment_slot_index(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseEconItemReference.equipment_slot_index)
}

// -------------------------------------------------------------------

// CMsgHeroPlusInfo

// optional uint32 flags = 1;
inline bool CMsgHeroPlusInfo::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHeroPlusInfo::has_flags() const {
  return _internal_has_flags();
}
inline void CMsgHeroPlusInfo::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgHeroPlusInfo::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t CMsgHeroPlusInfo::flags() const {
  // @@protoc_insertion_point(field_get:CMsgHeroPlusInfo.flags)
  return _internal_flags();
}
inline void CMsgHeroPlusInfo::_internal_set_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.flags_ = value;
}
inline void CMsgHeroPlusInfo::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CMsgHeroPlusInfo.flags)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Trophy_Data

// optional uint32 trophy_score = 1;
inline bool CMsgShowcaseItem_Trophy_Data::_internal_has_trophy_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Trophy_Data::has_trophy_score() const {
  return _internal_has_trophy_score();
}
inline void CMsgShowcaseItem_Trophy_Data::clear_trophy_score() {
  _impl_.trophy_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgShowcaseItem_Trophy_Data::_internal_trophy_score() const {
  return _impl_.trophy_score_;
}
inline uint32_t CMsgShowcaseItem_Trophy_Data::trophy_score() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Trophy.Data.trophy_score)
  return _internal_trophy_score();
}
inline void CMsgShowcaseItem_Trophy_Data::_internal_set_trophy_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.trophy_score_ = value;
}
inline void CMsgShowcaseItem_Trophy_Data::set_trophy_score(uint32_t value) {
  _internal_set_trophy_score(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Trophy.Data.trophy_score)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Trophy

// optional .CMsgShowcaseItem_Trophy.Data data = 1;
inline bool CMsgShowcaseItem_Trophy::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_Trophy::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_Trophy::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_Trophy_Data& CMsgShowcaseItem_Trophy::_internal_data() const {
  const ::CMsgShowcaseItem_Trophy_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_Trophy_Data&>(
      ::_CMsgShowcaseItem_Trophy_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_Trophy_Data& CMsgShowcaseItem_Trophy::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Trophy.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_Trophy::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_Trophy_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_Trophy.data)
}
inline ::CMsgShowcaseItem_Trophy_Data* CMsgShowcaseItem_Trophy::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Trophy_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_Trophy_Data* CMsgShowcaseItem_Trophy::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_Trophy.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Trophy_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_Trophy_Data* CMsgShowcaseItem_Trophy::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_Trophy_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_Trophy_Data* CMsgShowcaseItem_Trophy::mutable_data() {
  ::CMsgShowcaseItem_Trophy_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Trophy.data)
  return _msg;
}
inline void CMsgShowcaseItem_Trophy::set_allocated_data(::CMsgShowcaseItem_Trophy_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_Trophy.data)
}

// optional uint32 trophy_id = 2;
inline bool CMsgShowcaseItem_Trophy::_internal_has_trophy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Trophy::has_trophy_id() const {
  return _internal_has_trophy_id();
}
inline void CMsgShowcaseItem_Trophy::clear_trophy_id() {
  _impl_.trophy_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowcaseItem_Trophy::_internal_trophy_id() const {
  return _impl_.trophy_id_;
}
inline uint32_t CMsgShowcaseItem_Trophy::trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Trophy.trophy_id)
  return _internal_trophy_id();
}
inline void CMsgShowcaseItem_Trophy::_internal_set_trophy_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.trophy_id_ = value;
}
inline void CMsgShowcaseItem_Trophy::set_trophy_id(uint32_t value) {
  _internal_set_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Trophy.trophy_id)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_EconItem_Data

// optional .CSOEconItem econ_item = 1;
inline bool CMsgShowcaseItem_EconItem_Data::_internal_has_econ_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.econ_item_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_EconItem_Data::has_econ_item() const {
  return _internal_has_econ_item();
}
inline const ::CSOEconItem& CMsgShowcaseItem_EconItem_Data::_internal_econ_item() const {
  const ::CSOEconItem* p = _impl_.econ_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSOEconItem&>(
      ::_CSOEconItem_default_instance_);
}
inline const ::CSOEconItem& CMsgShowcaseItem_EconItem_Data::econ_item() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_EconItem.Data.econ_item)
  return _internal_econ_item();
}
inline void CMsgShowcaseItem_EconItem_Data::unsafe_arena_set_allocated_econ_item(
    ::CSOEconItem* econ_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.econ_item_);
  }
  _impl_.econ_item_ = econ_item;
  if (econ_item) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_EconItem.Data.econ_item)
}
inline ::CSOEconItem* CMsgShowcaseItem_EconItem_Data::release_econ_item() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = _impl_.econ_item_;
  _impl_.econ_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSOEconItem* CMsgShowcaseItem_EconItem_Data::unsafe_arena_release_econ_item() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_EconItem.Data.econ_item)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = _impl_.econ_item_;
  _impl_.econ_item_ = nullptr;
  return temp;
}
inline ::CSOEconItem* CMsgShowcaseItem_EconItem_Data::_internal_mutable_econ_item() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.econ_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSOEconItem>(GetArenaForAllocation());
    _impl_.econ_item_ = p;
  }
  return _impl_.econ_item_;
}
inline ::CSOEconItem* CMsgShowcaseItem_EconItem_Data::mutable_econ_item() {
  ::CSOEconItem* _msg = _internal_mutable_econ_item();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_EconItem.Data.econ_item)
  return _msg;
}
inline void CMsgShowcaseItem_EconItem_Data::set_allocated_econ_item(::CSOEconItem* econ_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.econ_item_);
  }
  if (econ_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(econ_item));
    if (message_arena != submessage_arena) {
      econ_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, econ_item, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.econ_item_ = econ_item;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_EconItem.Data.econ_item)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_EconItem

// optional .CMsgShowcaseItem_EconItem.Data data = 1;
inline bool CMsgShowcaseItem_EconItem::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_EconItem::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_EconItem::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_EconItem_Data& CMsgShowcaseItem_EconItem::_internal_data() const {
  const ::CMsgShowcaseItem_EconItem_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_EconItem_Data&>(
      ::_CMsgShowcaseItem_EconItem_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem_Data& CMsgShowcaseItem_EconItem::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_EconItem.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_EconItem::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_EconItem_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_EconItem.data)
}
inline ::CMsgShowcaseItem_EconItem_Data* CMsgShowcaseItem_EconItem::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_EconItem_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_EconItem_Data* CMsgShowcaseItem_EconItem::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_EconItem.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_EconItem_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_EconItem_Data* CMsgShowcaseItem_EconItem::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_EconItem_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_EconItem_Data* CMsgShowcaseItem_EconItem::mutable_data() {
  ::CMsgShowcaseItem_EconItem_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_EconItem.data)
  return _msg;
}
inline void CMsgShowcaseItem_EconItem::set_allocated_data(::CMsgShowcaseItem_EconItem_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_EconItem.data)
}

// optional .CMsgShowcaseEconItemReference ref = 2;
inline bool CMsgShowcaseItem_EconItem::_internal_has_ref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ref_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_EconItem::has_ref() const {
  return _internal_has_ref();
}
inline void CMsgShowcaseItem_EconItem::clear_ref() {
  if (_impl_.ref_ != nullptr) _impl_.ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseItem_EconItem::_internal_ref() const {
  const ::CMsgShowcaseEconItemReference* p = _impl_.ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseEconItemReference&>(
      ::_CMsgShowcaseEconItemReference_default_instance_);
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseItem_EconItem::ref() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_EconItem.ref)
  return _internal_ref();
}
inline void CMsgShowcaseItem_EconItem::unsafe_arena_set_allocated_ref(
    ::CMsgShowcaseEconItemReference* ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ref_);
  }
  _impl_.ref_ = ref;
  if (ref) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_EconItem.ref)
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_EconItem::release_ref() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseEconItemReference* temp = _impl_.ref_;
  _impl_.ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_EconItem::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_EconItem.ref)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseEconItemReference* temp = _impl_.ref_;
  _impl_.ref_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_EconItem::_internal_mutable_ref() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseEconItemReference>(GetArenaForAllocation());
    _impl_.ref_ = p;
  }
  return _impl_.ref_;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_EconItem::mutable_ref() {
  ::CMsgShowcaseEconItemReference* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_EconItem.ref)
  return _msg;
}
inline void CMsgShowcaseItem_EconItem::set_allocated_ref(::CMsgShowcaseEconItemReference* ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ref_;
  }
  if (ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ref);
    if (message_arena != submessage_arena) {
      ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_EconItem.ref)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Hero_Data

// repeated .CSOEconItem econ_items = 1;
inline int CMsgShowcaseItem_Hero_Data::_internal_econ_items_size() const {
  return _impl_.econ_items_.size();
}
inline int CMsgShowcaseItem_Hero_Data::econ_items_size() const {
  return _internal_econ_items_size();
}
inline ::CSOEconItem* CMsgShowcaseItem_Hero_Data::mutable_econ_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Hero.Data.econ_items)
  return _impl_.econ_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >*
CMsgShowcaseItem_Hero_Data::mutable_econ_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShowcaseItem_Hero.Data.econ_items)
  return &_impl_.econ_items_;
}
inline const ::CSOEconItem& CMsgShowcaseItem_Hero_Data::_internal_econ_items(int index) const {
  return _impl_.econ_items_.Get(index);
}
inline const ::CSOEconItem& CMsgShowcaseItem_Hero_Data::econ_items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.Data.econ_items)
  return _internal_econ_items(index);
}
inline ::CSOEconItem* CMsgShowcaseItem_Hero_Data::_internal_add_econ_items() {
  return _impl_.econ_items_.Add();
}
inline ::CSOEconItem* CMsgShowcaseItem_Hero_Data::add_econ_items() {
  ::CSOEconItem* _add = _internal_add_econ_items();
  // @@protoc_insertion_point(field_add:CMsgShowcaseItem_Hero.Data.econ_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >&
CMsgShowcaseItem_Hero_Data::econ_items() const {
  // @@protoc_insertion_point(field_list:CMsgShowcaseItem_Hero.Data.econ_items)
  return _impl_.econ_items_;
}

// optional int32 actual_hero_id = 2;
inline bool CMsgShowcaseItem_Hero_Data::_internal_has_actual_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Hero_Data::has_actual_hero_id() const {
  return _internal_has_actual_hero_id();
}
inline void CMsgShowcaseItem_Hero_Data::clear_actual_hero_id() {
  _impl_.actual_hero_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgShowcaseItem_Hero_Data::_internal_actual_hero_id() const {
  return _impl_.actual_hero_id_;
}
inline int32_t CMsgShowcaseItem_Hero_Data::actual_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.Data.actual_hero_id)
  return _internal_actual_hero_id();
}
inline void CMsgShowcaseItem_Hero_Data::_internal_set_actual_hero_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.actual_hero_id_ = value;
}
inline void CMsgShowcaseItem_Hero_Data::set_actual_hero_id(int32_t value) {
  _internal_set_actual_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Hero.Data.actual_hero_id)
}

// optional uint32 plus_hero_xp = 3;
inline bool CMsgShowcaseItem_Hero_Data::_internal_has_plus_hero_xp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Hero_Data::has_plus_hero_xp() const {
  return _internal_has_plus_hero_xp();
}
inline void CMsgShowcaseItem_Hero_Data::clear_plus_hero_xp() {
  _impl_.plus_hero_xp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowcaseItem_Hero_Data::_internal_plus_hero_xp() const {
  return _impl_.plus_hero_xp_;
}
inline uint32_t CMsgShowcaseItem_Hero_Data::plus_hero_xp() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.Data.plus_hero_xp)
  return _internal_plus_hero_xp();
}
inline void CMsgShowcaseItem_Hero_Data::_internal_set_plus_hero_xp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.plus_hero_xp_ = value;
}
inline void CMsgShowcaseItem_Hero_Data::set_plus_hero_xp(uint32_t value) {
  _internal_set_plus_hero_xp(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Hero.Data.plus_hero_xp)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Hero

// optional .CMsgShowcaseItem_Hero.Data data = 1;
inline bool CMsgShowcaseItem_Hero::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_Hero::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgShowcaseItem_Hero_Data& CMsgShowcaseItem_Hero::_internal_data() const {
  const ::CMsgShowcaseItem_Hero_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_Hero_Data&>(
      ::_CMsgShowcaseItem_Hero_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_Hero_Data& CMsgShowcaseItem_Hero::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_Hero::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_Hero_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_Hero.data)
}
inline ::CMsgShowcaseItem_Hero_Data* CMsgShowcaseItem_Hero::release_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseItem_Hero_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_Hero_Data* CMsgShowcaseItem_Hero::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_Hero.data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseItem_Hero_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_Hero_Data* CMsgShowcaseItem_Hero::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_Hero_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_Hero_Data* CMsgShowcaseItem_Hero::mutable_data() {
  ::CMsgShowcaseItem_Hero_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Hero.data)
  return _msg;
}
inline void CMsgShowcaseItem_Hero::set_allocated_data(::CMsgShowcaseItem_Hero_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_Hero.data)
}

// optional int32 hero_id = 2;
inline bool CMsgShowcaseItem_Hero::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgShowcaseItem_Hero::clear_hero_id() {
  _impl_.hero_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgShowcaseItem_Hero::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline int32_t CMsgShowcaseItem_Hero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.hero_id)
  return _internal_hero_id();
}
inline void CMsgShowcaseItem_Hero::_internal_set_hero_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hero_id_ = value;
}
inline void CMsgShowcaseItem_Hero::set_hero_id(int32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Hero.hero_id)
}

// repeated .CMsgShowcaseEconItemReference econ_item_refs = 3;
inline int CMsgShowcaseItem_Hero::_internal_econ_item_refs_size() const {
  return _impl_.econ_item_refs_.size();
}
inline int CMsgShowcaseItem_Hero::econ_item_refs_size() const {
  return _internal_econ_item_refs_size();
}
inline void CMsgShowcaseItem_Hero::clear_econ_item_refs() {
  _impl_.econ_item_refs_.Clear();
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_Hero::mutable_econ_item_refs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Hero.econ_item_refs)
  return _impl_.econ_item_refs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseEconItemReference >*
CMsgShowcaseItem_Hero::mutable_econ_item_refs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShowcaseItem_Hero.econ_item_refs)
  return &_impl_.econ_item_refs_;
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseItem_Hero::_internal_econ_item_refs(int index) const {
  return _impl_.econ_item_refs_.Get(index);
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseItem_Hero::econ_item_refs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.econ_item_refs)
  return _internal_econ_item_refs(index);
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_Hero::_internal_add_econ_item_refs() {
  return _impl_.econ_item_refs_.Add();
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_Hero::add_econ_item_refs() {
  ::CMsgShowcaseEconItemReference* _add = _internal_add_econ_item_refs();
  // @@protoc_insertion_point(field_add:CMsgShowcaseItem_Hero.econ_item_refs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseEconItemReference >&
CMsgShowcaseItem_Hero::econ_item_refs() const {
  // @@protoc_insertion_point(field_list:CMsgShowcaseItem_Hero.econ_item_refs)
  return _impl_.econ_item_refs_;
}

// optional uint32 rotation = 4;
inline bool CMsgShowcaseItem_Hero::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_rotation() const {
  return _internal_has_rotation();
}
inline void CMsgShowcaseItem_Hero::clear_rotation() {
  _impl_.rotation_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgShowcaseItem_Hero::_internal_rotation() const {
  return _impl_.rotation_;
}
inline uint32_t CMsgShowcaseItem_Hero::rotation() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.rotation)
  return _internal_rotation();
}
inline void CMsgShowcaseItem_Hero::_internal_set_rotation(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rotation_ = value;
}
inline void CMsgShowcaseItem_Hero::set_rotation(uint32_t value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Hero.rotation)
}

// optional uint32 flags = 5;
inline bool CMsgShowcaseItem_Hero::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_flags() const {
  return _internal_has_flags();
}
inline void CMsgShowcaseItem_Hero::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgShowcaseItem_Hero::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t CMsgShowcaseItem_Hero::flags() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.flags)
  return _internal_flags();
}
inline void CMsgShowcaseItem_Hero::_internal_set_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.flags_ = value;
}
inline void CMsgShowcaseItem_Hero::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Hero.flags)
}

// optional .CMsgHeroPlusInfo plus_info = 6;
inline bool CMsgShowcaseItem_Hero::_internal_has_plus_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.plus_info_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_plus_info() const {
  return _internal_has_plus_info();
}
inline void CMsgShowcaseItem_Hero::clear_plus_info() {
  if (_impl_.plus_info_ != nullptr) _impl_.plus_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgHeroPlusInfo& CMsgShowcaseItem_Hero::_internal_plus_info() const {
  const ::CMsgHeroPlusInfo* p = _impl_.plus_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgHeroPlusInfo&>(
      ::_CMsgHeroPlusInfo_default_instance_);
}
inline const ::CMsgHeroPlusInfo& CMsgShowcaseItem_Hero::plus_info() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.plus_info)
  return _internal_plus_info();
}
inline void CMsgShowcaseItem_Hero::unsafe_arena_set_allocated_plus_info(
    ::CMsgHeroPlusInfo* plus_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.plus_info_);
  }
  _impl_.plus_info_ = plus_info;
  if (plus_info) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_Hero.plus_info)
}
inline ::CMsgHeroPlusInfo* CMsgShowcaseItem_Hero::release_plus_info() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgHeroPlusInfo* temp = _impl_.plus_info_;
  _impl_.plus_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgHeroPlusInfo* CMsgShowcaseItem_Hero::unsafe_arena_release_plus_info() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_Hero.plus_info)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgHeroPlusInfo* temp = _impl_.plus_info_;
  _impl_.plus_info_ = nullptr;
  return temp;
}
inline ::CMsgHeroPlusInfo* CMsgShowcaseItem_Hero::_internal_mutable_plus_info() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.plus_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgHeroPlusInfo>(GetArenaForAllocation());
    _impl_.plus_info_ = p;
  }
  return _impl_.plus_info_;
}
inline ::CMsgHeroPlusInfo* CMsgShowcaseItem_Hero::mutable_plus_info() {
  ::CMsgHeroPlusInfo* _msg = _internal_mutable_plus_info();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Hero.plus_info)
  return _msg;
}
inline void CMsgShowcaseItem_Hero::set_allocated_plus_info(::CMsgHeroPlusInfo* plus_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.plus_info_;
  }
  if (plus_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(plus_info);
    if (message_arena != submessage_arena) {
      plus_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plus_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.plus_info_ = plus_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_Hero.plus_info)
}

// optional string animation_name = 7;
inline bool CMsgShowcaseItem_Hero::_internal_has_animation_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_animation_name() const {
  return _internal_has_animation_name();
}
inline void CMsgShowcaseItem_Hero::clear_animation_name() {
  _impl_.animation_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgShowcaseItem_Hero::animation_name() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.animation_name)
  return _internal_animation_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShowcaseItem_Hero::set_animation_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.animation_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Hero.animation_name)
}
inline std::string* CMsgShowcaseItem_Hero::mutable_animation_name() {
  std::string* _s = _internal_mutable_animation_name();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Hero.animation_name)
  return _s;
}
inline const std::string& CMsgShowcaseItem_Hero::_internal_animation_name() const {
  return _impl_.animation_name_.Get();
}
inline void CMsgShowcaseItem_Hero::_internal_set_animation_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.animation_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgShowcaseItem_Hero::_internal_mutable_animation_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.animation_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgShowcaseItem_Hero::release_animation_name() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_Hero.animation_name)
  if (!_internal_has_animation_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.animation_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animation_name_.IsDefault()) {
    _impl_.animation_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShowcaseItem_Hero::set_allocated_animation_name(std::string* animation_name) {
  if (animation_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.animation_name_.SetAllocated(animation_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animation_name_.IsDefault()) {
    _impl_.animation_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_Hero.animation_name)
}

// optional uint32 animation_playback_speed = 8 [default = 100];
inline bool CMsgShowcaseItem_Hero::_internal_has_animation_playback_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_animation_playback_speed() const {
  return _internal_has_animation_playback_speed();
}
inline void CMsgShowcaseItem_Hero::clear_animation_playback_speed() {
  _impl_.animation_playback_speed_ = 100u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgShowcaseItem_Hero::_internal_animation_playback_speed() const {
  return _impl_.animation_playback_speed_;
}
inline uint32_t CMsgShowcaseItem_Hero::animation_playback_speed() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.animation_playback_speed)
  return _internal_animation_playback_speed();
}
inline void CMsgShowcaseItem_Hero::_internal_set_animation_playback_speed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.animation_playback_speed_ = value;
}
inline void CMsgShowcaseItem_Hero::set_animation_playback_speed(uint32_t value) {
  _internal_set_animation_playback_speed(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Hero.animation_playback_speed)
}

// optional uint32 animation_offset = 9;
inline bool CMsgShowcaseItem_Hero::_internal_has_animation_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_animation_offset() const {
  return _internal_has_animation_offset();
}
inline void CMsgShowcaseItem_Hero::clear_animation_offset() {
  _impl_.animation_offset_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgShowcaseItem_Hero::_internal_animation_offset() const {
  return _impl_.animation_offset_;
}
inline uint32_t CMsgShowcaseItem_Hero::animation_offset() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.animation_offset)
  return _internal_animation_offset();
}
inline void CMsgShowcaseItem_Hero::_internal_set_animation_offset(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.animation_offset_ = value;
}
inline void CMsgShowcaseItem_Hero::set_animation_offset(uint32_t value) {
  _internal_set_animation_offset(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Hero.animation_offset)
}

// optional uint32 zoom = 10 [default = 100];
inline bool CMsgShowcaseItem_Hero::_internal_has_zoom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_zoom() const {
  return _internal_has_zoom();
}
inline void CMsgShowcaseItem_Hero::clear_zoom() {
  _impl_.zoom_ = 100u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgShowcaseItem_Hero::_internal_zoom() const {
  return _impl_.zoom_;
}
inline uint32_t CMsgShowcaseItem_Hero::zoom() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.zoom)
  return _internal_zoom();
}
inline void CMsgShowcaseItem_Hero::_internal_set_zoom(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.zoom_ = value;
}
inline void CMsgShowcaseItem_Hero::set_zoom(uint32_t value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Hero.zoom)
}

// optional uint32 slot_index = 11;
inline bool CMsgShowcaseItem_Hero::_internal_has_slot_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_slot_index() const {
  return _internal_has_slot_index();
}
inline void CMsgShowcaseItem_Hero::clear_slot_index() {
  _impl_.slot_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgShowcaseItem_Hero::_internal_slot_index() const {
  return _impl_.slot_index_;
}
inline uint32_t CMsgShowcaseItem_Hero::slot_index() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.slot_index)
  return _internal_slot_index();
}
inline void CMsgShowcaseItem_Hero::_internal_set_slot_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.slot_index_ = value;
}
inline void CMsgShowcaseItem_Hero::set_slot_index(uint32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Hero.slot_index)
}

// optional uint32 model_index = 12;
inline bool CMsgShowcaseItem_Hero::_internal_has_model_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_model_index() const {
  return _internal_has_model_index();
}
inline void CMsgShowcaseItem_Hero::clear_model_index() {
  _impl_.model_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgShowcaseItem_Hero::_internal_model_index() const {
  return _impl_.model_index_;
}
inline uint32_t CMsgShowcaseItem_Hero::model_index() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.model_index)
  return _internal_model_index();
}
inline void CMsgShowcaseItem_Hero::_internal_set_model_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.model_index_ = value;
}
inline void CMsgShowcaseItem_Hero::set_model_index(uint32_t value) {
  _internal_set_model_index(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Hero.model_index)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_HeroIcon_Data

// optional .CSOEconItem econ_item = 1;
inline bool CMsgShowcaseItem_HeroIcon_Data::_internal_has_econ_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.econ_item_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_HeroIcon_Data::has_econ_item() const {
  return _internal_has_econ_item();
}
inline const ::CSOEconItem& CMsgShowcaseItem_HeroIcon_Data::_internal_econ_item() const {
  const ::CSOEconItem* p = _impl_.econ_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSOEconItem&>(
      ::_CSOEconItem_default_instance_);
}
inline const ::CSOEconItem& CMsgShowcaseItem_HeroIcon_Data::econ_item() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_HeroIcon.Data.econ_item)
  return _internal_econ_item();
}
inline void CMsgShowcaseItem_HeroIcon_Data::unsafe_arena_set_allocated_econ_item(
    ::CSOEconItem* econ_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.econ_item_);
  }
  _impl_.econ_item_ = econ_item;
  if (econ_item) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_HeroIcon.Data.econ_item)
}
inline ::CSOEconItem* CMsgShowcaseItem_HeroIcon_Data::release_econ_item() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = _impl_.econ_item_;
  _impl_.econ_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSOEconItem* CMsgShowcaseItem_HeroIcon_Data::unsafe_arena_release_econ_item() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_HeroIcon.Data.econ_item)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = _impl_.econ_item_;
  _impl_.econ_item_ = nullptr;
  return temp;
}
inline ::CSOEconItem* CMsgShowcaseItem_HeroIcon_Data::_internal_mutable_econ_item() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.econ_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSOEconItem>(GetArenaForAllocation());
    _impl_.econ_item_ = p;
  }
  return _impl_.econ_item_;
}
inline ::CSOEconItem* CMsgShowcaseItem_HeroIcon_Data::mutable_econ_item() {
  ::CSOEconItem* _msg = _internal_mutable_econ_item();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_HeroIcon.Data.econ_item)
  return _msg;
}
inline void CMsgShowcaseItem_HeroIcon_Data::set_allocated_econ_item(::CSOEconItem* econ_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.econ_item_);
  }
  if (econ_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(econ_item));
    if (message_arena != submessage_arena) {
      econ_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, econ_item, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.econ_item_ = econ_item;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_HeroIcon.Data.econ_item)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_HeroIcon

// optional .CMsgShowcaseItem_HeroIcon.Data data = 1;
inline bool CMsgShowcaseItem_HeroIcon::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_HeroIcon::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_HeroIcon::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_HeroIcon_Data& CMsgShowcaseItem_HeroIcon::_internal_data() const {
  const ::CMsgShowcaseItem_HeroIcon_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_HeroIcon_Data&>(
      ::_CMsgShowcaseItem_HeroIcon_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_HeroIcon_Data& CMsgShowcaseItem_HeroIcon::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_HeroIcon.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_HeroIcon::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_HeroIcon_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_HeroIcon.data)
}
inline ::CMsgShowcaseItem_HeroIcon_Data* CMsgShowcaseItem_HeroIcon::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_HeroIcon_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_HeroIcon_Data* CMsgShowcaseItem_HeroIcon::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_HeroIcon.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_HeroIcon_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_HeroIcon_Data* CMsgShowcaseItem_HeroIcon::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_HeroIcon_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_HeroIcon_Data* CMsgShowcaseItem_HeroIcon::mutable_data() {
  ::CMsgShowcaseItem_HeroIcon_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_HeroIcon.data)
  return _msg;
}
inline void CMsgShowcaseItem_HeroIcon::set_allocated_data(::CMsgShowcaseItem_HeroIcon_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_HeroIcon.data)
}

// optional int32 hero_id = 2;
inline bool CMsgShowcaseItem_HeroIcon::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_HeroIcon::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgShowcaseItem_HeroIcon::clear_hero_id() {
  _impl_.hero_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgShowcaseItem_HeroIcon::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline int32_t CMsgShowcaseItem_HeroIcon::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_HeroIcon.hero_id)
  return _internal_hero_id();
}
inline void CMsgShowcaseItem_HeroIcon::_internal_set_hero_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgShowcaseItem_HeroIcon::set_hero_id(int32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_HeroIcon.hero_id)
}

// optional .CMsgShowcaseEconItemReference econ_item_ref = 3;
inline bool CMsgShowcaseItem_HeroIcon::_internal_has_econ_item_ref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.econ_item_ref_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_HeroIcon::has_econ_item_ref() const {
  return _internal_has_econ_item_ref();
}
inline void CMsgShowcaseItem_HeroIcon::clear_econ_item_ref() {
  if (_impl_.econ_item_ref_ != nullptr) _impl_.econ_item_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseItem_HeroIcon::_internal_econ_item_ref() const {
  const ::CMsgShowcaseEconItemReference* p = _impl_.econ_item_ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseEconItemReference&>(
      ::_CMsgShowcaseEconItemReference_default_instance_);
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseItem_HeroIcon::econ_item_ref() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_HeroIcon.econ_item_ref)
  return _internal_econ_item_ref();
}
inline void CMsgShowcaseItem_HeroIcon::unsafe_arena_set_allocated_econ_item_ref(
    ::CMsgShowcaseEconItemReference* econ_item_ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.econ_item_ref_);
  }
  _impl_.econ_item_ref_ = econ_item_ref;
  if (econ_item_ref) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_HeroIcon.econ_item_ref)
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_HeroIcon::release_econ_item_ref() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseEconItemReference* temp = _impl_.econ_item_ref_;
  _impl_.econ_item_ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_HeroIcon::unsafe_arena_release_econ_item_ref() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_HeroIcon.econ_item_ref)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseEconItemReference* temp = _impl_.econ_item_ref_;
  _impl_.econ_item_ref_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_HeroIcon::_internal_mutable_econ_item_ref() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.econ_item_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseEconItemReference>(GetArenaForAllocation());
    _impl_.econ_item_ref_ = p;
  }
  return _impl_.econ_item_ref_;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_HeroIcon::mutable_econ_item_ref() {
  ::CMsgShowcaseEconItemReference* _msg = _internal_mutable_econ_item_ref();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_HeroIcon.econ_item_ref)
  return _msg;
}
inline void CMsgShowcaseItem_HeroIcon::set_allocated_econ_item_ref(::CMsgShowcaseEconItemReference* econ_item_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.econ_item_ref_;
  }
  if (econ_item_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(econ_item_ref);
    if (message_arena != submessage_arena) {
      econ_item_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, econ_item_ref, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.econ_item_ref_ = econ_item_ref;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_HeroIcon.econ_item_ref)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_PlayerMatch_Data

// optional int32 hero_id = 1;
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_hero_id() {
  _impl_.hero_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgShowcaseItem_PlayerMatch_Data::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline int32_t CMsgShowcaseItem_PlayerMatch_Data::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.hero_id)
  return _internal_hero_id();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_hero_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_hero_id(int32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.hero_id)
}

// optional uint32 timestamp = 2;
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.timestamp)
  return _internal_timestamp();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.timestamp)
}

// optional uint32 duration = 3;
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::duration() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.duration)
  return _internal_duration();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.duration)
}

// optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_game_mode() {
  _impl_.game_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::DOTA_GameMode CMsgShowcaseItem_PlayerMatch_Data::_internal_game_mode() const {
  return static_cast< ::DOTA_GameMode >(_impl_.game_mode_);
}
inline ::DOTA_GameMode CMsgShowcaseItem_PlayerMatch_Data::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.game_mode)
  return _internal_game_mode();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.game_mode_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_game_mode(::DOTA_GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.game_mode)
}

// optional .CMsgShowcaseItem_PlayerMatch.EPlayerOutcome outcome = 5 [default = k_eInvalid];
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_outcome() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_outcome() const {
  return _internal_has_outcome();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_outcome() {
  _impl_.outcome_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch_Data::_internal_outcome() const {
  return static_cast< ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome >(_impl_.outcome_);
}
inline ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch_Data::outcome() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.outcome)
  return _internal_outcome();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_outcome(::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome value) {
  assert(::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.outcome_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_outcome(::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.outcome)
}

// optional uint32 kills = 6;
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::kills() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.kills)
  return _internal_kills();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.kills_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.kills)
}

// optional uint32 deaths = 7;
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.deaths)
  return _internal_deaths();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.deaths_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.deaths)
}

// optional uint32 assists = 8;
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::assists() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.assists)
  return _internal_assists();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.assists_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.assists)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_PlayerMatch

// optional .CMsgShowcaseItem_PlayerMatch.Data data = 1;
inline bool CMsgShowcaseItem_PlayerMatch::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_PlayerMatch::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_PlayerMatch_Data& CMsgShowcaseItem_PlayerMatch::_internal_data() const {
  const ::CMsgShowcaseItem_PlayerMatch_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_PlayerMatch_Data&>(
      ::_CMsgShowcaseItem_PlayerMatch_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_PlayerMatch_Data& CMsgShowcaseItem_PlayerMatch::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_PlayerMatch::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_PlayerMatch_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_PlayerMatch.data)
}
inline ::CMsgShowcaseItem_PlayerMatch_Data* CMsgShowcaseItem_PlayerMatch::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_PlayerMatch_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_PlayerMatch_Data* CMsgShowcaseItem_PlayerMatch::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_PlayerMatch.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_PlayerMatch_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_PlayerMatch_Data* CMsgShowcaseItem_PlayerMatch::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_PlayerMatch_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_PlayerMatch_Data* CMsgShowcaseItem_PlayerMatch::mutable_data() {
  ::CMsgShowcaseItem_PlayerMatch_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_PlayerMatch.data)
  return _msg;
}
inline void CMsgShowcaseItem_PlayerMatch::set_allocated_data(::CMsgShowcaseItem_PlayerMatch_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_PlayerMatch.data)
}

// optional uint64 match_id = 2;
inline bool CMsgShowcaseItem_PlayerMatch::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgShowcaseItem_PlayerMatch::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgShowcaseItem_PlayerMatch::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgShowcaseItem_PlayerMatch::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.match_id)
  return _internal_match_id();
}
inline void CMsgShowcaseItem_PlayerMatch::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.match_id_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.match_id)
}

// optional uint32 player_slot = 3;
inline bool CMsgShowcaseItem_PlayerMatch::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgShowcaseItem_PlayerMatch::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.player_slot)
  return _internal_player_slot();
}
inline void CMsgShowcaseItem_PlayerMatch::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.player_slot_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.player_slot)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_ChatWheel_Data

// -------------------------------------------------------------------

// CMsgShowcaseItem_ChatWheel

// optional .CMsgShowcaseItem_ChatWheel.Data data = 1;
inline bool CMsgShowcaseItem_ChatWheel::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_ChatWheel::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_ChatWheel::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_ChatWheel_Data& CMsgShowcaseItem_ChatWheel::_internal_data() const {
  const ::CMsgShowcaseItem_ChatWheel_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_ChatWheel_Data&>(
      ::_CMsgShowcaseItem_ChatWheel_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_ChatWheel_Data& CMsgShowcaseItem_ChatWheel::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_ChatWheel.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_ChatWheel::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_ChatWheel_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_ChatWheel.data)
}
inline ::CMsgShowcaseItem_ChatWheel_Data* CMsgShowcaseItem_ChatWheel::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_ChatWheel_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_ChatWheel_Data* CMsgShowcaseItem_ChatWheel::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_ChatWheel.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_ChatWheel_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_ChatWheel_Data* CMsgShowcaseItem_ChatWheel::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_ChatWheel_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_ChatWheel_Data* CMsgShowcaseItem_ChatWheel::mutable_data() {
  ::CMsgShowcaseItem_ChatWheel_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_ChatWheel.data)
  return _msg;
}
inline void CMsgShowcaseItem_ChatWheel::set_allocated_data(::CMsgShowcaseItem_ChatWheel_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_ChatWheel.data)
}

// optional uint32 chat_wheel_message_id = 2 [default = 4294967295];
inline bool CMsgShowcaseItem_ChatWheel::_internal_has_chat_wheel_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_ChatWheel::has_chat_wheel_message_id() const {
  return _internal_has_chat_wheel_message_id();
}
inline void CMsgShowcaseItem_ChatWheel::clear_chat_wheel_message_id() {
  _impl_.chat_wheel_message_id_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowcaseItem_ChatWheel::_internal_chat_wheel_message_id() const {
  return _impl_.chat_wheel_message_id_;
}
inline uint32_t CMsgShowcaseItem_ChatWheel::chat_wheel_message_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_ChatWheel.chat_wheel_message_id)
  return _internal_chat_wheel_message_id();
}
inline void CMsgShowcaseItem_ChatWheel::_internal_set_chat_wheel_message_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.chat_wheel_message_id_ = value;
}
inline void CMsgShowcaseItem_ChatWheel::set_chat_wheel_message_id(uint32_t value) {
  _internal_set_chat_wheel_message_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_ChatWheel.chat_wheel_message_id)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Emoticon_Data

// -------------------------------------------------------------------

// CMsgShowcaseItem_Emoticon

// optional .CMsgShowcaseItem_Emoticon.Data data = 1;
inline bool CMsgShowcaseItem_Emoticon::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_Emoticon::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_Emoticon::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_Emoticon_Data& CMsgShowcaseItem_Emoticon::_internal_data() const {
  const ::CMsgShowcaseItem_Emoticon_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_Emoticon_Data&>(
      ::_CMsgShowcaseItem_Emoticon_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_Emoticon_Data& CMsgShowcaseItem_Emoticon::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Emoticon.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_Emoticon::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_Emoticon_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_Emoticon.data)
}
inline ::CMsgShowcaseItem_Emoticon_Data* CMsgShowcaseItem_Emoticon::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Emoticon_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_Emoticon_Data* CMsgShowcaseItem_Emoticon::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_Emoticon.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Emoticon_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_Emoticon_Data* CMsgShowcaseItem_Emoticon::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_Emoticon_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_Emoticon_Data* CMsgShowcaseItem_Emoticon::mutable_data() {
  ::CMsgShowcaseItem_Emoticon_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Emoticon.data)
  return _msg;
}
inline void CMsgShowcaseItem_Emoticon::set_allocated_data(::CMsgShowcaseItem_Emoticon_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_Emoticon.data)
}

// optional uint32 emoticon_id = 2;
inline bool CMsgShowcaseItem_Emoticon::_internal_has_emoticon_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Emoticon::has_emoticon_id() const {
  return _internal_has_emoticon_id();
}
inline void CMsgShowcaseItem_Emoticon::clear_emoticon_id() {
  _impl_.emoticon_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowcaseItem_Emoticon::_internal_emoticon_id() const {
  return _impl_.emoticon_id_;
}
inline uint32_t CMsgShowcaseItem_Emoticon::emoticon_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Emoticon.emoticon_id)
  return _internal_emoticon_id();
}
inline void CMsgShowcaseItem_Emoticon::_internal_set_emoticon_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.emoticon_id_ = value;
}
inline void CMsgShowcaseItem_Emoticon::set_emoticon_id(uint32_t value) {
  _internal_set_emoticon_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Emoticon.emoticon_id)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_SpiderGraph_Data

// -------------------------------------------------------------------

// CMsgShowcaseItem_SpiderGraph

// optional .CMsgShowcaseItem_SpiderGraph.Data data = 1;
inline bool CMsgShowcaseItem_SpiderGraph::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_SpiderGraph::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_SpiderGraph::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_SpiderGraph_Data& CMsgShowcaseItem_SpiderGraph::_internal_data() const {
  const ::CMsgShowcaseItem_SpiderGraph_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_SpiderGraph_Data&>(
      ::_CMsgShowcaseItem_SpiderGraph_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_SpiderGraph_Data& CMsgShowcaseItem_SpiderGraph::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_SpiderGraph.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_SpiderGraph::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_SpiderGraph_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_SpiderGraph.data)
}
inline ::CMsgShowcaseItem_SpiderGraph_Data* CMsgShowcaseItem_SpiderGraph::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_SpiderGraph_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_SpiderGraph_Data* CMsgShowcaseItem_SpiderGraph::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_SpiderGraph.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_SpiderGraph_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_SpiderGraph_Data* CMsgShowcaseItem_SpiderGraph::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_SpiderGraph_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_SpiderGraph_Data* CMsgShowcaseItem_SpiderGraph::mutable_data() {
  ::CMsgShowcaseItem_SpiderGraph_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_SpiderGraph.data)
  return _msg;
}
inline void CMsgShowcaseItem_SpiderGraph::set_allocated_data(::CMsgShowcaseItem_SpiderGraph_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_SpiderGraph.data)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_UserFeed_Data

// -------------------------------------------------------------------

// CMsgShowcaseItem_UserFeed

// optional .CMsgShowcaseItem_UserFeed.Data data = 1;
inline bool CMsgShowcaseItem_UserFeed::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_UserFeed::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_UserFeed::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_UserFeed_Data& CMsgShowcaseItem_UserFeed::_internal_data() const {
  const ::CMsgShowcaseItem_UserFeed_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_UserFeed_Data&>(
      ::_CMsgShowcaseItem_UserFeed_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_UserFeed_Data& CMsgShowcaseItem_UserFeed::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_UserFeed.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_UserFeed::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_UserFeed_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_UserFeed.data)
}
inline ::CMsgShowcaseItem_UserFeed_Data* CMsgShowcaseItem_UserFeed::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_UserFeed_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_UserFeed_Data* CMsgShowcaseItem_UserFeed::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_UserFeed.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_UserFeed_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_UserFeed_Data* CMsgShowcaseItem_UserFeed::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_UserFeed_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_UserFeed_Data* CMsgShowcaseItem_UserFeed::mutable_data() {
  ::CMsgShowcaseItem_UserFeed_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_UserFeed.data)
  return _msg;
}
inline void CMsgShowcaseItem_UserFeed::set_allocated_data(::CMsgShowcaseItem_UserFeed_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_UserFeed.data)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Stat_Data

// optional uint32 stat_score = 1;
inline bool CMsgShowcaseItem_Stat_Data::_internal_has_stat_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Stat_Data::has_stat_score() const {
  return _internal_has_stat_score();
}
inline void CMsgShowcaseItem_Stat_Data::clear_stat_score() {
  _impl_.stat_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgShowcaseItem_Stat_Data::_internal_stat_score() const {
  return _impl_.stat_score_;
}
inline uint32_t CMsgShowcaseItem_Stat_Data::stat_score() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Stat.Data.stat_score)
  return _internal_stat_score();
}
inline void CMsgShowcaseItem_Stat_Data::_internal_set_stat_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stat_score_ = value;
}
inline void CMsgShowcaseItem_Stat_Data::set_stat_score(uint32_t value) {
  _internal_set_stat_score(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Stat.Data.stat_score)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Stat

// optional .CMsgShowcaseItem_Stat.Data data = 1;
inline bool CMsgShowcaseItem_Stat::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_Stat::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_Stat::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_Stat_Data& CMsgShowcaseItem_Stat::_internal_data() const {
  const ::CMsgShowcaseItem_Stat_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_Stat_Data&>(
      ::_CMsgShowcaseItem_Stat_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_Stat_Data& CMsgShowcaseItem_Stat::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Stat.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_Stat::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_Stat_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_Stat.data)
}
inline ::CMsgShowcaseItem_Stat_Data* CMsgShowcaseItem_Stat::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Stat_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_Stat_Data* CMsgShowcaseItem_Stat::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_Stat.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Stat_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_Stat_Data* CMsgShowcaseItem_Stat::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_Stat_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_Stat_Data* CMsgShowcaseItem_Stat::mutable_data() {
  ::CMsgShowcaseItem_Stat_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Stat.data)
  return _msg;
}
inline void CMsgShowcaseItem_Stat::set_allocated_data(::CMsgShowcaseItem_Stat_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_Stat.data)
}

// optional .CMsgDOTAProfileCard.EStatID stat_id = 2 [default = k_eStat_Wins];
inline bool CMsgShowcaseItem_Stat::_internal_has_stat_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Stat::has_stat_id() const {
  return _internal_has_stat_id();
}
inline void CMsgShowcaseItem_Stat::clear_stat_id() {
  _impl_.stat_id_ = 3;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgDOTAProfileCard_EStatID CMsgShowcaseItem_Stat::_internal_stat_id() const {
  return static_cast< ::CMsgDOTAProfileCard_EStatID >(_impl_.stat_id_);
}
inline ::CMsgDOTAProfileCard_EStatID CMsgShowcaseItem_Stat::stat_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Stat.stat_id)
  return _internal_stat_id();
}
inline void CMsgShowcaseItem_Stat::_internal_set_stat_id(::CMsgDOTAProfileCard_EStatID value) {
  assert(::CMsgDOTAProfileCard_EStatID_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stat_id_ = value;
}
inline void CMsgShowcaseItem_Stat::set_stat_id(::CMsgDOTAProfileCard_EStatID value) {
  _internal_set_stat_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Stat.stat_id)
}

// -------------------------------------------------------------------

// CMsgShowcaseBackground_Data

// optional .CSOEconItem loading_screen = 1;
inline bool CMsgShowcaseBackground_Data::_internal_has_loading_screen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.loading_screen_ != nullptr);
  return value;
}
inline bool CMsgShowcaseBackground_Data::has_loading_screen() const {
  return _internal_has_loading_screen();
}
inline const ::CSOEconItem& CMsgShowcaseBackground_Data::_internal_loading_screen() const {
  const ::CSOEconItem* p = _impl_.loading_screen_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSOEconItem&>(
      ::_CSOEconItem_default_instance_);
}
inline const ::CSOEconItem& CMsgShowcaseBackground_Data::loading_screen() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseBackground.Data.loading_screen)
  return _internal_loading_screen();
}
inline void CMsgShowcaseBackground_Data::unsafe_arena_set_allocated_loading_screen(
    ::CSOEconItem* loading_screen) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loading_screen_);
  }
  _impl_.loading_screen_ = loading_screen;
  if (loading_screen) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseBackground.Data.loading_screen)
}
inline ::CSOEconItem* CMsgShowcaseBackground_Data::release_loading_screen() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = _impl_.loading_screen_;
  _impl_.loading_screen_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSOEconItem* CMsgShowcaseBackground_Data::unsafe_arena_release_loading_screen() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseBackground.Data.loading_screen)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = _impl_.loading_screen_;
  _impl_.loading_screen_ = nullptr;
  return temp;
}
inline ::CSOEconItem* CMsgShowcaseBackground_Data::_internal_mutable_loading_screen() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.loading_screen_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSOEconItem>(GetArenaForAllocation());
    _impl_.loading_screen_ = p;
  }
  return _impl_.loading_screen_;
}
inline ::CSOEconItem* CMsgShowcaseBackground_Data::mutable_loading_screen() {
  ::CSOEconItem* _msg = _internal_mutable_loading_screen();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseBackground.Data.loading_screen)
  return _msg;
}
inline void CMsgShowcaseBackground_Data::set_allocated_loading_screen(::CSOEconItem* loading_screen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loading_screen_);
  }
  if (loading_screen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loading_screen));
    if (message_arena != submessage_arena) {
      loading_screen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loading_screen, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.loading_screen_ = loading_screen;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseBackground.Data.loading_screen)
}

// -------------------------------------------------------------------

// CMsgShowcaseBackground

// optional .CMsgShowcaseBackground.Data data = 1;
inline bool CMsgShowcaseBackground::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseBackground::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseBackground::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseBackground_Data& CMsgShowcaseBackground::_internal_data() const {
  const ::CMsgShowcaseBackground_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseBackground_Data&>(
      ::_CMsgShowcaseBackground_Data_default_instance_);
}
inline const ::CMsgShowcaseBackground_Data& CMsgShowcaseBackground::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseBackground.data)
  return _internal_data();
}
inline void CMsgShowcaseBackground::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseBackground_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseBackground.data)
}
inline ::CMsgShowcaseBackground_Data* CMsgShowcaseBackground::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseBackground_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseBackground_Data* CMsgShowcaseBackground::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseBackground.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseBackground_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseBackground_Data* CMsgShowcaseBackground::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseBackground_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseBackground_Data* CMsgShowcaseBackground::mutable_data() {
  ::CMsgShowcaseBackground_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseBackground.data)
  return _msg;
}
inline void CMsgShowcaseBackground::set_allocated_data(::CMsgShowcaseBackground_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseBackground.data)
}

// optional .CMsgShowcaseEconItemReference loading_screen_ref = 2;
inline bool CMsgShowcaseBackground::_internal_has_loading_screen_ref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.loading_screen_ref_ != nullptr);
  return value;
}
inline bool CMsgShowcaseBackground::has_loading_screen_ref() const {
  return _internal_has_loading_screen_ref();
}
inline void CMsgShowcaseBackground::clear_loading_screen_ref() {
  if (_impl_.loading_screen_ref_ != nullptr) _impl_.loading_screen_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseBackground::_internal_loading_screen_ref() const {
  const ::CMsgShowcaseEconItemReference* p = _impl_.loading_screen_ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseEconItemReference&>(
      ::_CMsgShowcaseEconItemReference_default_instance_);
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseBackground::loading_screen_ref() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseBackground.loading_screen_ref)
  return _internal_loading_screen_ref();
}
inline void CMsgShowcaseBackground::unsafe_arena_set_allocated_loading_screen_ref(
    ::CMsgShowcaseEconItemReference* loading_screen_ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loading_screen_ref_);
  }
  _impl_.loading_screen_ref_ = loading_screen_ref;
  if (loading_screen_ref) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseBackground.loading_screen_ref)
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseBackground::release_loading_screen_ref() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseEconItemReference* temp = _impl_.loading_screen_ref_;
  _impl_.loading_screen_ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseBackground::unsafe_arena_release_loading_screen_ref() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseBackground.loading_screen_ref)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseEconItemReference* temp = _impl_.loading_screen_ref_;
  _impl_.loading_screen_ref_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseBackground::_internal_mutable_loading_screen_ref() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.loading_screen_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseEconItemReference>(GetArenaForAllocation());
    _impl_.loading_screen_ref_ = p;
  }
  return _impl_.loading_screen_ref_;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseBackground::mutable_loading_screen_ref() {
  ::CMsgShowcaseEconItemReference* _msg = _internal_mutable_loading_screen_ref();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseBackground.loading_screen_ref)
  return _msg;
}
inline void CMsgShowcaseBackground::set_allocated_loading_screen_ref(::CMsgShowcaseEconItemReference* loading_screen_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.loading_screen_ref_;
  }
  if (loading_screen_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(loading_screen_ref);
    if (message_arena != submessage_arena) {
      loading_screen_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loading_screen_ref, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.loading_screen_ref_ = loading_screen_ref;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseBackground.loading_screen_ref)
}

// optional uint32 dim = 3;
inline bool CMsgShowcaseBackground::_internal_has_dim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseBackground::has_dim() const {
  return _internal_has_dim();
}
inline void CMsgShowcaseBackground::clear_dim() {
  _impl_.dim_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseBackground::_internal_dim() const {
  return _impl_.dim_;
}
inline uint32_t CMsgShowcaseBackground::dim() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseBackground.dim)
  return _internal_dim();
}
inline void CMsgShowcaseBackground::_internal_set_dim(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dim_ = value;
}
inline void CMsgShowcaseBackground::set_dim(uint32_t value) {
  _internal_set_dim(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseBackground.dim)
}

// optional uint32 blur = 4;
inline bool CMsgShowcaseBackground::_internal_has_blur() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgShowcaseBackground::has_blur() const {
  return _internal_has_blur();
}
inline void CMsgShowcaseBackground::clear_blur() {
  _impl_.blur_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgShowcaseBackground::_internal_blur() const {
  return _impl_.blur_;
}
inline uint32_t CMsgShowcaseBackground::blur() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseBackground.blur)
  return _internal_blur();
}
inline void CMsgShowcaseBackground::_internal_set_blur(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.blur_ = value;
}
inline void CMsgShowcaseBackground::set_blur(uint32_t value) {
  _internal_set_blur(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseBackground.blur)
}

// optional uint32 background_id = 5;
inline bool CMsgShowcaseBackground::_internal_has_background_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgShowcaseBackground::has_background_id() const {
  return _internal_has_background_id();
}
inline void CMsgShowcaseBackground::clear_background_id() {
  _impl_.background_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgShowcaseBackground::_internal_background_id() const {
  return _impl_.background_id_;
}
inline uint32_t CMsgShowcaseBackground::background_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseBackground.background_id)
  return _internal_background_id();
}
inline void CMsgShowcaseBackground::_internal_set_background_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.background_id_ = value;
}
inline void CMsgShowcaseBackground::set_background_id(uint32_t value) {
  _internal_set_background_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseBackground.background_id)
}

// -------------------------------------------------------------------

// CMsgShowcaseItemData

// .CMsgShowcaseItem_Trophy trophy = 1;
inline bool CMsgShowcaseItemData::_internal_has_trophy() const {
  return item_case() == kTrophy;
}
inline bool CMsgShowcaseItemData::has_trophy() const {
  return _internal_has_trophy();
}
inline void CMsgShowcaseItemData::set_has_trophy() {
  _impl_._oneof_case_[0] = kTrophy;
}
inline void CMsgShowcaseItemData::clear_trophy() {
  if (_internal_has_trophy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.trophy_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_Trophy* CMsgShowcaseItemData::release_trophy() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.trophy)
  if (_internal_has_trophy()) {
    clear_has_item();
    ::CMsgShowcaseItem_Trophy* temp = _impl_.item_.trophy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.trophy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_Trophy& CMsgShowcaseItemData::_internal_trophy() const {
  return _internal_has_trophy()
      ? *_impl_.item_.trophy_
      : reinterpret_cast< ::CMsgShowcaseItem_Trophy&>(::_CMsgShowcaseItem_Trophy_default_instance_);
}
inline const ::CMsgShowcaseItem_Trophy& CMsgShowcaseItemData::trophy() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.trophy)
  return _internal_trophy();
}
inline ::CMsgShowcaseItem_Trophy* CMsgShowcaseItemData::unsafe_arena_release_trophy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.trophy)
  if (_internal_has_trophy()) {
    clear_has_item();
    ::CMsgShowcaseItem_Trophy* temp = _impl_.item_.trophy_;
    _impl_.item_.trophy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_trophy(::CMsgShowcaseItem_Trophy* trophy) {
  clear_item();
  if (trophy) {
    set_has_trophy();
    _impl_.item_.trophy_ = trophy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.trophy)
}
inline ::CMsgShowcaseItem_Trophy* CMsgShowcaseItemData::_internal_mutable_trophy() {
  if (!_internal_has_trophy()) {
    clear_item();
    set_has_trophy();
    _impl_.item_.trophy_ = CreateMaybeMessage< ::CMsgShowcaseItem_Trophy >(GetArenaForAllocation());
  }
  return _impl_.item_.trophy_;
}
inline ::CMsgShowcaseItem_Trophy* CMsgShowcaseItemData::mutable_trophy() {
  ::CMsgShowcaseItem_Trophy* _msg = _internal_mutable_trophy();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.trophy)
  return _msg;
}

// .CMsgShowcaseItem_EconItem econ_item_icon = 2;
inline bool CMsgShowcaseItemData::_internal_has_econ_item_icon() const {
  return item_case() == kEconItemIcon;
}
inline bool CMsgShowcaseItemData::has_econ_item_icon() const {
  return _internal_has_econ_item_icon();
}
inline void CMsgShowcaseItemData::set_has_econ_item_icon() {
  _impl_._oneof_case_[0] = kEconItemIcon;
}
inline void CMsgShowcaseItemData::clear_econ_item_icon() {
  if (_internal_has_econ_item_icon()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.econ_item_icon_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::release_econ_item_icon() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.econ_item_icon)
  if (_internal_has_econ_item_icon()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.econ_item_icon_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.econ_item_icon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::_internal_econ_item_icon() const {
  return _internal_has_econ_item_icon()
      ? *_impl_.item_.econ_item_icon_
      : reinterpret_cast< ::CMsgShowcaseItem_EconItem&>(::_CMsgShowcaseItem_EconItem_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::econ_item_icon() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.econ_item_icon)
  return _internal_econ_item_icon();
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::unsafe_arena_release_econ_item_icon() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.econ_item_icon)
  if (_internal_has_econ_item_icon()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.econ_item_icon_;
    _impl_.item_.econ_item_icon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_econ_item_icon(::CMsgShowcaseItem_EconItem* econ_item_icon) {
  clear_item();
  if (econ_item_icon) {
    set_has_econ_item_icon();
    _impl_.item_.econ_item_icon_ = econ_item_icon;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.econ_item_icon)
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::_internal_mutable_econ_item_icon() {
  if (!_internal_has_econ_item_icon()) {
    clear_item();
    set_has_econ_item_icon();
    _impl_.item_.econ_item_icon_ = CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(GetArenaForAllocation());
  }
  return _impl_.item_.econ_item_icon_;
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::mutable_econ_item_icon() {
  ::CMsgShowcaseItem_EconItem* _msg = _internal_mutable_econ_item_icon();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.econ_item_icon)
  return _msg;
}

// .CMsgShowcaseItem_EconItem sticker = 3;
inline bool CMsgShowcaseItemData::_internal_has_sticker() const {
  return item_case() == kSticker;
}
inline bool CMsgShowcaseItemData::has_sticker() const {
  return _internal_has_sticker();
}
inline void CMsgShowcaseItemData::set_has_sticker() {
  _impl_._oneof_case_[0] = kSticker;
}
inline void CMsgShowcaseItemData::clear_sticker() {
  if (_internal_has_sticker()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.sticker_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::release_sticker() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.sticker)
  if (_internal_has_sticker()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.sticker_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.sticker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::_internal_sticker() const {
  return _internal_has_sticker()
      ? *_impl_.item_.sticker_
      : reinterpret_cast< ::CMsgShowcaseItem_EconItem&>(::_CMsgShowcaseItem_EconItem_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::sticker() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.sticker)
  return _internal_sticker();
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::unsafe_arena_release_sticker() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.sticker)
  if (_internal_has_sticker()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.sticker_;
    _impl_.item_.sticker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_sticker(::CMsgShowcaseItem_EconItem* sticker) {
  clear_item();
  if (sticker) {
    set_has_sticker();
    _impl_.item_.sticker_ = sticker;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.sticker)
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::_internal_mutable_sticker() {
  if (!_internal_has_sticker()) {
    clear_item();
    set_has_sticker();
    _impl_.item_.sticker_ = CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(GetArenaForAllocation());
  }
  return _impl_.item_.sticker_;
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::mutable_sticker() {
  ::CMsgShowcaseItem_EconItem* _msg = _internal_mutable_sticker();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.sticker)
  return _msg;
}

// .CMsgShowcaseItem_Hero hero_model = 4;
inline bool CMsgShowcaseItemData::_internal_has_hero_model() const {
  return item_case() == kHeroModel;
}
inline bool CMsgShowcaseItemData::has_hero_model() const {
  return _internal_has_hero_model();
}
inline void CMsgShowcaseItemData::set_has_hero_model() {
  _impl_._oneof_case_[0] = kHeroModel;
}
inline void CMsgShowcaseItemData::clear_hero_model() {
  if (_internal_has_hero_model()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.hero_model_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_Hero* CMsgShowcaseItemData::release_hero_model() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.hero_model)
  if (_internal_has_hero_model()) {
    clear_has_item();
    ::CMsgShowcaseItem_Hero* temp = _impl_.item_.hero_model_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.hero_model_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_Hero& CMsgShowcaseItemData::_internal_hero_model() const {
  return _internal_has_hero_model()
      ? *_impl_.item_.hero_model_
      : reinterpret_cast< ::CMsgShowcaseItem_Hero&>(::_CMsgShowcaseItem_Hero_default_instance_);
}
inline const ::CMsgShowcaseItem_Hero& CMsgShowcaseItemData::hero_model() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.hero_model)
  return _internal_hero_model();
}
inline ::CMsgShowcaseItem_Hero* CMsgShowcaseItemData::unsafe_arena_release_hero_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.hero_model)
  if (_internal_has_hero_model()) {
    clear_has_item();
    ::CMsgShowcaseItem_Hero* temp = _impl_.item_.hero_model_;
    _impl_.item_.hero_model_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_hero_model(::CMsgShowcaseItem_Hero* hero_model) {
  clear_item();
  if (hero_model) {
    set_has_hero_model();
    _impl_.item_.hero_model_ = hero_model;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.hero_model)
}
inline ::CMsgShowcaseItem_Hero* CMsgShowcaseItemData::_internal_mutable_hero_model() {
  if (!_internal_has_hero_model()) {
    clear_item();
    set_has_hero_model();
    _impl_.item_.hero_model_ = CreateMaybeMessage< ::CMsgShowcaseItem_Hero >(GetArenaForAllocation());
  }
  return _impl_.item_.hero_model_;
}
inline ::CMsgShowcaseItem_Hero* CMsgShowcaseItemData::mutable_hero_model() {
  ::CMsgShowcaseItem_Hero* _msg = _internal_mutable_hero_model();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.hero_model)
  return _msg;
}

// .CMsgShowcaseItem_PlayerMatch player_match = 5;
inline bool CMsgShowcaseItemData::_internal_has_player_match() const {
  return item_case() == kPlayerMatch;
}
inline bool CMsgShowcaseItemData::has_player_match() const {
  return _internal_has_player_match();
}
inline void CMsgShowcaseItemData::set_has_player_match() {
  _impl_._oneof_case_[0] = kPlayerMatch;
}
inline void CMsgShowcaseItemData::clear_player_match() {
  if (_internal_has_player_match()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.player_match_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_PlayerMatch* CMsgShowcaseItemData::release_player_match() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.player_match)
  if (_internal_has_player_match()) {
    clear_has_item();
    ::CMsgShowcaseItem_PlayerMatch* temp = _impl_.item_.player_match_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.player_match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_PlayerMatch& CMsgShowcaseItemData::_internal_player_match() const {
  return _internal_has_player_match()
      ? *_impl_.item_.player_match_
      : reinterpret_cast< ::CMsgShowcaseItem_PlayerMatch&>(::_CMsgShowcaseItem_PlayerMatch_default_instance_);
}
inline const ::CMsgShowcaseItem_PlayerMatch& CMsgShowcaseItemData::player_match() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.player_match)
  return _internal_player_match();
}
inline ::CMsgShowcaseItem_PlayerMatch* CMsgShowcaseItemData::unsafe_arena_release_player_match() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.player_match)
  if (_internal_has_player_match()) {
    clear_has_item();
    ::CMsgShowcaseItem_PlayerMatch* temp = _impl_.item_.player_match_;
    _impl_.item_.player_match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_player_match(::CMsgShowcaseItem_PlayerMatch* player_match) {
  clear_item();
  if (player_match) {
    set_has_player_match();
    _impl_.item_.player_match_ = player_match;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.player_match)
}
inline ::CMsgShowcaseItem_PlayerMatch* CMsgShowcaseItemData::_internal_mutable_player_match() {
  if (!_internal_has_player_match()) {
    clear_item();
    set_has_player_match();
    _impl_.item_.player_match_ = CreateMaybeMessage< ::CMsgShowcaseItem_PlayerMatch >(GetArenaForAllocation());
  }
  return _impl_.item_.player_match_;
}
inline ::CMsgShowcaseItem_PlayerMatch* CMsgShowcaseItemData::mutable_player_match() {
  ::CMsgShowcaseItem_PlayerMatch* _msg = _internal_mutable_player_match();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.player_match)
  return _msg;
}

// .CMsgShowcaseItem_ChatWheel chat_wheel = 6;
inline bool CMsgShowcaseItemData::_internal_has_chat_wheel() const {
  return item_case() == kChatWheel;
}
inline bool CMsgShowcaseItemData::has_chat_wheel() const {
  return _internal_has_chat_wheel();
}
inline void CMsgShowcaseItemData::set_has_chat_wheel() {
  _impl_._oneof_case_[0] = kChatWheel;
}
inline void CMsgShowcaseItemData::clear_chat_wheel() {
  if (_internal_has_chat_wheel()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.chat_wheel_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::release_chat_wheel() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.chat_wheel)
  if (_internal_has_chat_wheel()) {
    clear_has_item();
    ::CMsgShowcaseItem_ChatWheel* temp = _impl_.item_.chat_wheel_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.chat_wheel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_ChatWheel& CMsgShowcaseItemData::_internal_chat_wheel() const {
  return _internal_has_chat_wheel()
      ? *_impl_.item_.chat_wheel_
      : reinterpret_cast< ::CMsgShowcaseItem_ChatWheel&>(::_CMsgShowcaseItem_ChatWheel_default_instance_);
}
inline const ::CMsgShowcaseItem_ChatWheel& CMsgShowcaseItemData::chat_wheel() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.chat_wheel)
  return _internal_chat_wheel();
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::unsafe_arena_release_chat_wheel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.chat_wheel)
  if (_internal_has_chat_wheel()) {
    clear_has_item();
    ::CMsgShowcaseItem_ChatWheel* temp = _impl_.item_.chat_wheel_;
    _impl_.item_.chat_wheel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_chat_wheel(::CMsgShowcaseItem_ChatWheel* chat_wheel) {
  clear_item();
  if (chat_wheel) {
    set_has_chat_wheel();
    _impl_.item_.chat_wheel_ = chat_wheel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.chat_wheel)
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::_internal_mutable_chat_wheel() {
  if (!_internal_has_chat_wheel()) {
    clear_item();
    set_has_chat_wheel();
    _impl_.item_.chat_wheel_ = CreateMaybeMessage< ::CMsgShowcaseItem_ChatWheel >(GetArenaForAllocation());
  }
  return _impl_.item_.chat_wheel_;
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::mutable_chat_wheel() {
  ::CMsgShowcaseItem_ChatWheel* _msg = _internal_mutable_chat_wheel();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.chat_wheel)
  return _msg;
}

// .CMsgShowcaseItem_ChatWheel spray = 7;
inline bool CMsgShowcaseItemData::_internal_has_spray() const {
  return item_case() == kSpray;
}
inline bool CMsgShowcaseItemData::has_spray() const {
  return _internal_has_spray();
}
inline void CMsgShowcaseItemData::set_has_spray() {
  _impl_._oneof_case_[0] = kSpray;
}
inline void CMsgShowcaseItemData::clear_spray() {
  if (_internal_has_spray()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.spray_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::release_spray() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.spray)
  if (_internal_has_spray()) {
    clear_has_item();
    ::CMsgShowcaseItem_ChatWheel* temp = _impl_.item_.spray_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.spray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_ChatWheel& CMsgShowcaseItemData::_internal_spray() const {
  return _internal_has_spray()
      ? *_impl_.item_.spray_
      : reinterpret_cast< ::CMsgShowcaseItem_ChatWheel&>(::_CMsgShowcaseItem_ChatWheel_default_instance_);
}
inline const ::CMsgShowcaseItem_ChatWheel& CMsgShowcaseItemData::spray() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.spray)
  return _internal_spray();
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::unsafe_arena_release_spray() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.spray)
  if (_internal_has_spray()) {
    clear_has_item();
    ::CMsgShowcaseItem_ChatWheel* temp = _impl_.item_.spray_;
    _impl_.item_.spray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_spray(::CMsgShowcaseItem_ChatWheel* spray) {
  clear_item();
  if (spray) {
    set_has_spray();
    _impl_.item_.spray_ = spray;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.spray)
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::_internal_mutable_spray() {
  if (!_internal_has_spray()) {
    clear_item();
    set_has_spray();
    _impl_.item_.spray_ = CreateMaybeMessage< ::CMsgShowcaseItem_ChatWheel >(GetArenaForAllocation());
  }
  return _impl_.item_.spray_;
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::mutable_spray() {
  ::CMsgShowcaseItem_ChatWheel* _msg = _internal_mutable_spray();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.spray)
  return _msg;
}

// .CMsgShowcaseItem_Emoticon emoticon = 8;
inline bool CMsgShowcaseItemData::_internal_has_emoticon() const {
  return item_case() == kEmoticon;
}
inline bool CMsgShowcaseItemData::has_emoticon() const {
  return _internal_has_emoticon();
}
inline void CMsgShowcaseItemData::set_has_emoticon() {
  _impl_._oneof_case_[0] = kEmoticon;
}
inline void CMsgShowcaseItemData::clear_emoticon() {
  if (_internal_has_emoticon()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.emoticon_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_Emoticon* CMsgShowcaseItemData::release_emoticon() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.emoticon)
  if (_internal_has_emoticon()) {
    clear_has_item();
    ::CMsgShowcaseItem_Emoticon* temp = _impl_.item_.emoticon_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.emoticon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_Emoticon& CMsgShowcaseItemData::_internal_emoticon() const {
  return _internal_has_emoticon()
      ? *_impl_.item_.emoticon_
      : reinterpret_cast< ::CMsgShowcaseItem_Emoticon&>(::_CMsgShowcaseItem_Emoticon_default_instance_);
}
inline const ::CMsgShowcaseItem_Emoticon& CMsgShowcaseItemData::emoticon() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.emoticon)
  return _internal_emoticon();
}
inline ::CMsgShowcaseItem_Emoticon* CMsgShowcaseItemData::unsafe_arena_release_emoticon() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.emoticon)
  if (_internal_has_emoticon()) {
    clear_has_item();
    ::CMsgShowcaseItem_Emoticon* temp = _impl_.item_.emoticon_;
    _impl_.item_.emoticon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_emoticon(::CMsgShowcaseItem_Emoticon* emoticon) {
  clear_item();
  if (emoticon) {
    set_has_emoticon();
    _impl_.item_.emoticon_ = emoticon;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.emoticon)
}
inline ::CMsgShowcaseItem_Emoticon* CMsgShowcaseItemData::_internal_mutable_emoticon() {
  if (!_internal_has_emoticon()) {
    clear_item();
    set_has_emoticon();
    _impl_.item_.emoticon_ = CreateMaybeMessage< ::CMsgShowcaseItem_Emoticon >(GetArenaForAllocation());
  }
  return _impl_.item_.emoticon_;
}
inline ::CMsgShowcaseItem_Emoticon* CMsgShowcaseItemData::mutable_emoticon() {
  ::CMsgShowcaseItem_Emoticon* _msg = _internal_mutable_emoticon();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.emoticon)
  return _msg;
}

// .CMsgShowcaseItem_EconItem courier = 10;
inline bool CMsgShowcaseItemData::_internal_has_courier() const {
  return item_case() == kCourier;
}
inline bool CMsgShowcaseItemData::has_courier() const {
  return _internal_has_courier();
}
inline void CMsgShowcaseItemData::set_has_courier() {
  _impl_._oneof_case_[0] = kCourier;
}
inline void CMsgShowcaseItemData::clear_courier() {
  if (_internal_has_courier()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.courier_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::release_courier() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.courier)
  if (_internal_has_courier()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.courier_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.courier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::_internal_courier() const {
  return _internal_has_courier()
      ? *_impl_.item_.courier_
      : reinterpret_cast< ::CMsgShowcaseItem_EconItem&>(::_CMsgShowcaseItem_EconItem_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::courier() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.courier)
  return _internal_courier();
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::unsafe_arena_release_courier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.courier)
  if (_internal_has_courier()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.courier_;
    _impl_.item_.courier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_courier(::CMsgShowcaseItem_EconItem* courier) {
  clear_item();
  if (courier) {
    set_has_courier();
    _impl_.item_.courier_ = courier;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.courier)
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::_internal_mutable_courier() {
  if (!_internal_has_courier()) {
    clear_item();
    set_has_courier();
    _impl_.item_.courier_ = CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(GetArenaForAllocation());
  }
  return _impl_.item_.courier_;
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::mutable_courier() {
  ::CMsgShowcaseItem_EconItem* _msg = _internal_mutable_courier();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.courier)
  return _msg;
}

// .CMsgShowcaseItem_EconItem ward = 11;
inline bool CMsgShowcaseItemData::_internal_has_ward() const {
  return item_case() == kWard;
}
inline bool CMsgShowcaseItemData::has_ward() const {
  return _internal_has_ward();
}
inline void CMsgShowcaseItemData::set_has_ward() {
  _impl_._oneof_case_[0] = kWard;
}
inline void CMsgShowcaseItemData::clear_ward() {
  if (_internal_has_ward()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.ward_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::release_ward() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.ward)
  if (_internal_has_ward()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.ward_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.ward_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::_internal_ward() const {
  return _internal_has_ward()
      ? *_impl_.item_.ward_
      : reinterpret_cast< ::CMsgShowcaseItem_EconItem&>(::_CMsgShowcaseItem_EconItem_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::ward() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.ward)
  return _internal_ward();
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::unsafe_arena_release_ward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.ward)
  if (_internal_has_ward()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.ward_;
    _impl_.item_.ward_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_ward(::CMsgShowcaseItem_EconItem* ward) {
  clear_item();
  if (ward) {
    set_has_ward();
    _impl_.item_.ward_ = ward;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.ward)
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::_internal_mutable_ward() {
  if (!_internal_has_ward()) {
    clear_item();
    set_has_ward();
    _impl_.item_.ward_ = CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(GetArenaForAllocation());
  }
  return _impl_.item_.ward_;
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::mutable_ward() {
  ::CMsgShowcaseItem_EconItem* _msg = _internal_mutable_ward();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.ward)
  return _msg;
}

// .CMsgShowcaseItem_HeroIcon hero_icon = 12;
inline bool CMsgShowcaseItemData::_internal_has_hero_icon() const {
  return item_case() == kHeroIcon;
}
inline bool CMsgShowcaseItemData::has_hero_icon() const {
  return _internal_has_hero_icon();
}
inline void CMsgShowcaseItemData::set_has_hero_icon() {
  _impl_._oneof_case_[0] = kHeroIcon;
}
inline void CMsgShowcaseItemData::clear_hero_icon() {
  if (_internal_has_hero_icon()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.hero_icon_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_HeroIcon* CMsgShowcaseItemData::release_hero_icon() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.hero_icon)
  if (_internal_has_hero_icon()) {
    clear_has_item();
    ::CMsgShowcaseItem_HeroIcon* temp = _impl_.item_.hero_icon_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.hero_icon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_HeroIcon& CMsgShowcaseItemData::_internal_hero_icon() const {
  return _internal_has_hero_icon()
      ? *_impl_.item_.hero_icon_
      : reinterpret_cast< ::CMsgShowcaseItem_HeroIcon&>(::_CMsgShowcaseItem_HeroIcon_default_instance_);
}
inline const ::CMsgShowcaseItem_HeroIcon& CMsgShowcaseItemData::hero_icon() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.hero_icon)
  return _internal_hero_icon();
}
inline ::CMsgShowcaseItem_HeroIcon* CMsgShowcaseItemData::unsafe_arena_release_hero_icon() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.hero_icon)
  if (_internal_has_hero_icon()) {
    clear_has_item();
    ::CMsgShowcaseItem_HeroIcon* temp = _impl_.item_.hero_icon_;
    _impl_.item_.hero_icon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_hero_icon(::CMsgShowcaseItem_HeroIcon* hero_icon) {
  clear_item();
  if (hero_icon) {
    set_has_hero_icon();
    _impl_.item_.hero_icon_ = hero_icon;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.hero_icon)
}
inline ::CMsgShowcaseItem_HeroIcon* CMsgShowcaseItemData::_internal_mutable_hero_icon() {
  if (!_internal_has_hero_icon()) {
    clear_item();
    set_has_hero_icon();
    _impl_.item_.hero_icon_ = CreateMaybeMessage< ::CMsgShowcaseItem_HeroIcon >(GetArenaForAllocation());
  }
  return _impl_.item_.hero_icon_;
}
inline ::CMsgShowcaseItem_HeroIcon* CMsgShowcaseItemData::mutable_hero_icon() {
  ::CMsgShowcaseItem_HeroIcon* _msg = _internal_mutable_hero_icon();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.hero_icon)
  return _msg;
}

// .CMsgShowcaseItem_SpiderGraph spider_graph = 13;
inline bool CMsgShowcaseItemData::_internal_has_spider_graph() const {
  return item_case() == kSpiderGraph;
}
inline bool CMsgShowcaseItemData::has_spider_graph() const {
  return _internal_has_spider_graph();
}
inline void CMsgShowcaseItemData::set_has_spider_graph() {
  _impl_._oneof_case_[0] = kSpiderGraph;
}
inline void CMsgShowcaseItemData::clear_spider_graph() {
  if (_internal_has_spider_graph()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.spider_graph_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_SpiderGraph* CMsgShowcaseItemData::release_spider_graph() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.spider_graph)
  if (_internal_has_spider_graph()) {
    clear_has_item();
    ::CMsgShowcaseItem_SpiderGraph* temp = _impl_.item_.spider_graph_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.spider_graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_SpiderGraph& CMsgShowcaseItemData::_internal_spider_graph() const {
  return _internal_has_spider_graph()
      ? *_impl_.item_.spider_graph_
      : reinterpret_cast< ::CMsgShowcaseItem_SpiderGraph&>(::_CMsgShowcaseItem_SpiderGraph_default_instance_);
}
inline const ::CMsgShowcaseItem_SpiderGraph& CMsgShowcaseItemData::spider_graph() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.spider_graph)
  return _internal_spider_graph();
}
inline ::CMsgShowcaseItem_SpiderGraph* CMsgShowcaseItemData::unsafe_arena_release_spider_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.spider_graph)
  if (_internal_has_spider_graph()) {
    clear_has_item();
    ::CMsgShowcaseItem_SpiderGraph* temp = _impl_.item_.spider_graph_;
    _impl_.item_.spider_graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_spider_graph(::CMsgShowcaseItem_SpiderGraph* spider_graph) {
  clear_item();
  if (spider_graph) {
    set_has_spider_graph();
    _impl_.item_.spider_graph_ = spider_graph;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.spider_graph)
}
inline ::CMsgShowcaseItem_SpiderGraph* CMsgShowcaseItemData::_internal_mutable_spider_graph() {
  if (!_internal_has_spider_graph()) {
    clear_item();
    set_has_spider_graph();
    _impl_.item_.spider_graph_ = CreateMaybeMessage< ::CMsgShowcaseItem_SpiderGraph >(GetArenaForAllocation());
  }
  return _impl_.item_.spider_graph_;
}
inline ::CMsgShowcaseItem_SpiderGraph* CMsgShowcaseItemData::mutable_spider_graph() {
  ::CMsgShowcaseItem_SpiderGraph* _msg = _internal_mutable_spider_graph();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.spider_graph)
  return _msg;
}

// .CMsgShowcaseItem_UserFeed user_feed = 14;
inline bool CMsgShowcaseItemData::_internal_has_user_feed() const {
  return item_case() == kUserFeed;
}
inline bool CMsgShowcaseItemData::has_user_feed() const {
  return _internal_has_user_feed();
}
inline void CMsgShowcaseItemData::set_has_user_feed() {
  _impl_._oneof_case_[0] = kUserFeed;
}
inline void CMsgShowcaseItemData::clear_user_feed() {
  if (_internal_has_user_feed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.user_feed_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_UserFeed* CMsgShowcaseItemData::release_user_feed() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.user_feed)
  if (_internal_has_user_feed()) {
    clear_has_item();
    ::CMsgShowcaseItem_UserFeed* temp = _impl_.item_.user_feed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.user_feed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_UserFeed& CMsgShowcaseItemData::_internal_user_feed() const {
  return _internal_has_user_feed()
      ? *_impl_.item_.user_feed_
      : reinterpret_cast< ::CMsgShowcaseItem_UserFeed&>(::_CMsgShowcaseItem_UserFeed_default_instance_);
}
inline const ::CMsgShowcaseItem_UserFeed& CMsgShowcaseItemData::user_feed() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.user_feed)
  return _internal_user_feed();
}
inline ::CMsgShowcaseItem_UserFeed* CMsgShowcaseItemData::unsafe_arena_release_user_feed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.user_feed)
  if (_internal_has_user_feed()) {
    clear_has_item();
    ::CMsgShowcaseItem_UserFeed* temp = _impl_.item_.user_feed_;
    _impl_.item_.user_feed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_user_feed(::CMsgShowcaseItem_UserFeed* user_feed) {
  clear_item();
  if (user_feed) {
    set_has_user_feed();
    _impl_.item_.user_feed_ = user_feed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.user_feed)
}
inline ::CMsgShowcaseItem_UserFeed* CMsgShowcaseItemData::_internal_mutable_user_feed() {
  if (!_internal_has_user_feed()) {
    clear_item();
    set_has_user_feed();
    _impl_.item_.user_feed_ = CreateMaybeMessage< ::CMsgShowcaseItem_UserFeed >(GetArenaForAllocation());
  }
  return _impl_.item_.user_feed_;
}
inline ::CMsgShowcaseItem_UserFeed* CMsgShowcaseItemData::mutable_user_feed() {
  ::CMsgShowcaseItem_UserFeed* _msg = _internal_mutable_user_feed();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.user_feed)
  return _msg;
}

// .CMsgShowcaseItem_Stat stat = 15;
inline bool CMsgShowcaseItemData::_internal_has_stat() const {
  return item_case() == kStat;
}
inline bool CMsgShowcaseItemData::has_stat() const {
  return _internal_has_stat();
}
inline void CMsgShowcaseItemData::set_has_stat() {
  _impl_._oneof_case_[0] = kStat;
}
inline void CMsgShowcaseItemData::clear_stat() {
  if (_internal_has_stat()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.stat_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_Stat* CMsgShowcaseItemData::release_stat() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.stat)
  if (_internal_has_stat()) {
    clear_has_item();
    ::CMsgShowcaseItem_Stat* temp = _impl_.item_.stat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_Stat& CMsgShowcaseItemData::_internal_stat() const {
  return _internal_has_stat()
      ? *_impl_.item_.stat_
      : reinterpret_cast< ::CMsgShowcaseItem_Stat&>(::_CMsgShowcaseItem_Stat_default_instance_);
}
inline const ::CMsgShowcaseItem_Stat& CMsgShowcaseItemData::stat() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.stat)
  return _internal_stat();
}
inline ::CMsgShowcaseItem_Stat* CMsgShowcaseItemData::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.stat)
  if (_internal_has_stat()) {
    clear_has_item();
    ::CMsgShowcaseItem_Stat* temp = _impl_.item_.stat_;
    _impl_.item_.stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_stat(::CMsgShowcaseItem_Stat* stat) {
  clear_item();
  if (stat) {
    set_has_stat();
    _impl_.item_.stat_ = stat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.stat)
}
inline ::CMsgShowcaseItem_Stat* CMsgShowcaseItemData::_internal_mutable_stat() {
  if (!_internal_has_stat()) {
    clear_item();
    set_has_stat();
    _impl_.item_.stat_ = CreateMaybeMessage< ::CMsgShowcaseItem_Stat >(GetArenaForAllocation());
  }
  return _impl_.item_.stat_;
}
inline ::CMsgShowcaseItem_Stat* CMsgShowcaseItemData::mutable_stat() {
  ::CMsgShowcaseItem_Stat* _msg = _internal_mutable_stat();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.stat)
  return _msg;
}

// .CMsgShowcaseItem_EconItem roshan = 16;
inline bool CMsgShowcaseItemData::_internal_has_roshan() const {
  return item_case() == kRoshan;
}
inline bool CMsgShowcaseItemData::has_roshan() const {
  return _internal_has_roshan();
}
inline void CMsgShowcaseItemData::set_has_roshan() {
  _impl_._oneof_case_[0] = kRoshan;
}
inline void CMsgShowcaseItemData::clear_roshan() {
  if (_internal_has_roshan()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.roshan_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::release_roshan() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.roshan)
  if (_internal_has_roshan()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.roshan_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.roshan_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::_internal_roshan() const {
  return _internal_has_roshan()
      ? *_impl_.item_.roshan_
      : reinterpret_cast< ::CMsgShowcaseItem_EconItem&>(::_CMsgShowcaseItem_EconItem_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::roshan() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.roshan)
  return _internal_roshan();
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::unsafe_arena_release_roshan() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.roshan)
  if (_internal_has_roshan()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.roshan_;
    _impl_.item_.roshan_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_roshan(::CMsgShowcaseItem_EconItem* roshan) {
  clear_item();
  if (roshan) {
    set_has_roshan();
    _impl_.item_.roshan_ = roshan;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.roshan)
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::_internal_mutable_roshan() {
  if (!_internal_has_roshan()) {
    clear_item();
    set_has_roshan();
    _impl_.item_.roshan_ = CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(GetArenaForAllocation());
  }
  return _impl_.item_.roshan_;
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::mutable_roshan() {
  ::CMsgShowcaseItem_EconItem* _msg = _internal_mutable_roshan();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.roshan)
  return _msg;
}

// .CMsgShowcaseItem_EconItem creep = 17;
inline bool CMsgShowcaseItemData::_internal_has_creep() const {
  return item_case() == kCreep;
}
inline bool CMsgShowcaseItemData::has_creep() const {
  return _internal_has_creep();
}
inline void CMsgShowcaseItemData::set_has_creep() {
  _impl_._oneof_case_[0] = kCreep;
}
inline void CMsgShowcaseItemData::clear_creep() {
  if (_internal_has_creep()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.creep_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::release_creep() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.creep)
  if (_internal_has_creep()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.creep_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.creep_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::_internal_creep() const {
  return _internal_has_creep()
      ? *_impl_.item_.creep_
      : reinterpret_cast< ::CMsgShowcaseItem_EconItem&>(::_CMsgShowcaseItem_EconItem_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::creep() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.creep)
  return _internal_creep();
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::unsafe_arena_release_creep() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.creep)
  if (_internal_has_creep()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.creep_;
    _impl_.item_.creep_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_creep(::CMsgShowcaseItem_EconItem* creep) {
  clear_item();
  if (creep) {
    set_has_creep();
    _impl_.item_.creep_ = creep;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.creep)
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::_internal_mutable_creep() {
  if (!_internal_has_creep()) {
    clear_item();
    set_has_creep();
    _impl_.item_.creep_ = CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(GetArenaForAllocation());
  }
  return _impl_.item_.creep_;
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::mutable_creep() {
  ::CMsgShowcaseItem_EconItem* _msg = _internal_mutable_creep();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.creep)
  return _msg;
}

// .CMsgShowcaseItem_EconItem tower = 18;
inline bool CMsgShowcaseItemData::_internal_has_tower() const {
  return item_case() == kTower;
}
inline bool CMsgShowcaseItemData::has_tower() const {
  return _internal_has_tower();
}
inline void CMsgShowcaseItemData::set_has_tower() {
  _impl_._oneof_case_[0] = kTower;
}
inline void CMsgShowcaseItemData::clear_tower() {
  if (_internal_has_tower()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.tower_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::release_tower() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.tower)
  if (_internal_has_tower()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.tower_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.tower_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::_internal_tower() const {
  return _internal_has_tower()
      ? *_impl_.item_.tower_
      : reinterpret_cast< ::CMsgShowcaseItem_EconItem&>(::_CMsgShowcaseItem_EconItem_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::tower() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.tower)
  return _internal_tower();
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::unsafe_arena_release_tower() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.tower)
  if (_internal_has_tower()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.tower_;
    _impl_.item_.tower_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_tower(::CMsgShowcaseItem_EconItem* tower) {
  clear_item();
  if (tower) {
    set_has_tower();
    _impl_.item_.tower_ = tower;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.tower)
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::_internal_mutable_tower() {
  if (!_internal_has_tower()) {
    clear_item();
    set_has_tower();
    _impl_.item_.tower_ = CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(GetArenaForAllocation());
  }
  return _impl_.item_.tower_;
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::mutable_tower() {
  ::CMsgShowcaseItem_EconItem* _msg = _internal_mutable_tower();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.tower)
  return _msg;
}

// .CMsgShowcaseItem_EconItem effigy = 19;
inline bool CMsgShowcaseItemData::_internal_has_effigy() const {
  return item_case() == kEffigy;
}
inline bool CMsgShowcaseItemData::has_effigy() const {
  return _internal_has_effigy();
}
inline void CMsgShowcaseItemData::set_has_effigy() {
  _impl_._oneof_case_[0] = kEffigy;
}
inline void CMsgShowcaseItemData::clear_effigy() {
  if (_internal_has_effigy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.effigy_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::release_effigy() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.effigy)
  if (_internal_has_effigy()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.effigy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.effigy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::_internal_effigy() const {
  return _internal_has_effigy()
      ? *_impl_.item_.effigy_
      : reinterpret_cast< ::CMsgShowcaseItem_EconItem&>(::_CMsgShowcaseItem_EconItem_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::effigy() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.effigy)
  return _internal_effigy();
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::unsafe_arena_release_effigy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.effigy)
  if (_internal_has_effigy()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.effigy_;
    _impl_.item_.effigy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_effigy(::CMsgShowcaseItem_EconItem* effigy) {
  clear_item();
  if (effigy) {
    set_has_effigy();
    _impl_.item_.effigy_ = effigy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.effigy)
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::_internal_mutable_effigy() {
  if (!_internal_has_effigy()) {
    clear_item();
    set_has_effigy();
    _impl_.item_.effigy_ = CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(GetArenaForAllocation());
  }
  return _impl_.item_.effigy_;
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::mutable_effigy() {
  ::CMsgShowcaseItem_EconItem* _msg = _internal_mutable_effigy();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.effigy)
  return _msg;
}

// .CMsgShowcaseItem_EconItem decoration = 20;
inline bool CMsgShowcaseItemData::_internal_has_decoration() const {
  return item_case() == kDecoration;
}
inline bool CMsgShowcaseItemData::has_decoration() const {
  return _internal_has_decoration();
}
inline void CMsgShowcaseItemData::set_has_decoration() {
  _impl_._oneof_case_[0] = kDecoration;
}
inline void CMsgShowcaseItemData::clear_decoration() {
  if (_internal_has_decoration()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.decoration_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::release_decoration() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.decoration)
  if (_internal_has_decoration()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.decoration_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.decoration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::_internal_decoration() const {
  return _internal_has_decoration()
      ? *_impl_.item_.decoration_
      : reinterpret_cast< ::CMsgShowcaseItem_EconItem&>(::_CMsgShowcaseItem_EconItem_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::decoration() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.decoration)
  return _internal_decoration();
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::unsafe_arena_release_decoration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.decoration)
  if (_internal_has_decoration()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.decoration_;
    _impl_.item_.decoration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_decoration(::CMsgShowcaseItem_EconItem* decoration) {
  clear_item();
  if (decoration) {
    set_has_decoration();
    _impl_.item_.decoration_ = decoration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.decoration)
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::_internal_mutable_decoration() {
  if (!_internal_has_decoration()) {
    clear_item();
    set_has_decoration();
    _impl_.item_.decoration_ = CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(GetArenaForAllocation());
  }
  return _impl_.item_.decoration_;
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::mutable_decoration() {
  ::CMsgShowcaseItem_EconItem* _msg = _internal_mutable_decoration();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.decoration)
  return _msg;
}

// .CMsgShowcaseBackground background = 100;
inline bool CMsgShowcaseItemData::_internal_has_background() const {
  return item_case() == kBackground;
}
inline bool CMsgShowcaseItemData::has_background() const {
  return _internal_has_background();
}
inline void CMsgShowcaseItemData::set_has_background() {
  _impl_._oneof_case_[0] = kBackground;
}
inline void CMsgShowcaseItemData::clear_background() {
  if (_internal_has_background()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.background_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseBackground* CMsgShowcaseItemData::release_background() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.background)
  if (_internal_has_background()) {
    clear_has_item();
    ::CMsgShowcaseBackground* temp = _impl_.item_.background_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.background_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseBackground& CMsgShowcaseItemData::_internal_background() const {
  return _internal_has_background()
      ? *_impl_.item_.background_
      : reinterpret_cast< ::CMsgShowcaseBackground&>(::_CMsgShowcaseBackground_default_instance_);
}
inline const ::CMsgShowcaseBackground& CMsgShowcaseItemData::background() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.background)
  return _internal_background();
}
inline ::CMsgShowcaseBackground* CMsgShowcaseItemData::unsafe_arena_release_background() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.background)
  if (_internal_has_background()) {
    clear_has_item();
    ::CMsgShowcaseBackground* temp = _impl_.item_.background_;
    _impl_.item_.background_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_background(::CMsgShowcaseBackground* background) {
  clear_item();
  if (background) {
    set_has_background();
    _impl_.item_.background_ = background;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.background)
}
inline ::CMsgShowcaseBackground* CMsgShowcaseItemData::_internal_mutable_background() {
  if (!_internal_has_background()) {
    clear_item();
    set_has_background();
    _impl_.item_.background_ = CreateMaybeMessage< ::CMsgShowcaseBackground >(GetArenaForAllocation());
  }
  return _impl_.item_.background_;
}
inline ::CMsgShowcaseBackground* CMsgShowcaseItemData::mutable_background() {
  ::CMsgShowcaseBackground* _msg = _internal_mutable_background();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.background)
  return _msg;
}

inline bool CMsgShowcaseItemData::has_item() const {
  return item_case() != ITEM_NOT_SET;
}
inline void CMsgShowcaseItemData::clear_has_item() {
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}
inline CMsgShowcaseItemData::ItemCase CMsgShowcaseItemData::item_case() const {
  return CMsgShowcaseItemData::ItemCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgShowcaseItemPosition

// optional int32 position_x = 1;
inline bool CMsgShowcaseItemPosition::_internal_has_position_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_position_x() const {
  return _internal_has_position_x();
}
inline void CMsgShowcaseItemPosition::clear_position_x() {
  _impl_.position_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgShowcaseItemPosition::_internal_position_x() const {
  return _impl_.position_x_;
}
inline int32_t CMsgShowcaseItemPosition::position_x() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.position_x)
  return _internal_position_x();
}
inline void CMsgShowcaseItemPosition::_internal_set_position_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.position_x_ = value;
}
inline void CMsgShowcaseItemPosition::set_position_x(int32_t value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.position_x)
}

// optional int32 position_y = 2;
inline bool CMsgShowcaseItemPosition::_internal_has_position_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_position_y() const {
  return _internal_has_position_y();
}
inline void CMsgShowcaseItemPosition::clear_position_y() {
  _impl_.position_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgShowcaseItemPosition::_internal_position_y() const {
  return _impl_.position_y_;
}
inline int32_t CMsgShowcaseItemPosition::position_y() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.position_y)
  return _internal_position_y();
}
inline void CMsgShowcaseItemPosition::_internal_set_position_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.position_y_ = value;
}
inline void CMsgShowcaseItemPosition::set_position_y(int32_t value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.position_y)
}

// optional uint32 scale = 3;
inline bool CMsgShowcaseItemPosition::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_scale() const {
  return _internal_has_scale();
}
inline void CMsgShowcaseItemPosition::clear_scale() {
  _impl_.scale_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseItemPosition::_internal_scale() const {
  return _impl_.scale_;
}
inline uint32_t CMsgShowcaseItemPosition::scale() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.scale)
  return _internal_scale();
}
inline void CMsgShowcaseItemPosition::_internal_set_scale(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scale_ = value;
}
inline void CMsgShowcaseItemPosition::set_scale(uint32_t value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.scale)
}

// optional uint32 width = 4;
inline bool CMsgShowcaseItemPosition::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_width() const {
  return _internal_has_width();
}
inline void CMsgShowcaseItemPosition::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgShowcaseItemPosition::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t CMsgShowcaseItemPosition::width() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.width)
  return _internal_width();
}
inline void CMsgShowcaseItemPosition::_internal_set_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.width_ = value;
}
inline void CMsgShowcaseItemPosition::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.width)
}

// optional uint32 height = 5;
inline bool CMsgShowcaseItemPosition::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_height() const {
  return _internal_has_height();
}
inline void CMsgShowcaseItemPosition::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgShowcaseItemPosition::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t CMsgShowcaseItemPosition::height() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.height)
  return _internal_height();
}
inline void CMsgShowcaseItemPosition::_internal_set_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.height_ = value;
}
inline void CMsgShowcaseItemPosition::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.height)
}

// optional uint32 rotation = 6;
inline bool CMsgShowcaseItemPosition::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_rotation() const {
  return _internal_has_rotation();
}
inline void CMsgShowcaseItemPosition::clear_rotation() {
  _impl_.rotation_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgShowcaseItemPosition::_internal_rotation() const {
  return _impl_.rotation_;
}
inline uint32_t CMsgShowcaseItemPosition::rotation() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.rotation)
  return _internal_rotation();
}
inline void CMsgShowcaseItemPosition::_internal_set_rotation(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.rotation_ = value;
}
inline void CMsgShowcaseItemPosition::set_rotation(uint32_t value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.rotation)
}

// optional uint32 parent_id = 7;
inline bool CMsgShowcaseItemPosition::_internal_has_parent_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_parent_id() const {
  return _internal_has_parent_id();
}
inline void CMsgShowcaseItemPosition::clear_parent_id() {
  _impl_.parent_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgShowcaseItemPosition::_internal_parent_id() const {
  return _impl_.parent_id_;
}
inline uint32_t CMsgShowcaseItemPosition::parent_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.parent_id)
  return _internal_parent_id();
}
inline void CMsgShowcaseItemPosition::_internal_set_parent_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.parent_id_ = value;
}
inline void CMsgShowcaseItemPosition::set_parent_id(uint32_t value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.parent_id)
}

// optional uint32 parent_attachment_point_id = 8;
inline bool CMsgShowcaseItemPosition::_internal_has_parent_attachment_point_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_parent_attachment_point_id() const {
  return _internal_has_parent_attachment_point_id();
}
inline void CMsgShowcaseItemPosition::clear_parent_attachment_point_id() {
  _impl_.parent_attachment_point_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgShowcaseItemPosition::_internal_parent_attachment_point_id() const {
  return _impl_.parent_attachment_point_id_;
}
inline uint32_t CMsgShowcaseItemPosition::parent_attachment_point_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.parent_attachment_point_id)
  return _internal_parent_attachment_point_id();
}
inline void CMsgShowcaseItemPosition::_internal_set_parent_attachment_point_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.parent_attachment_point_id_ = value;
}
inline void CMsgShowcaseItemPosition::set_parent_attachment_point_id(uint32_t value) {
  _internal_set_parent_attachment_point_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.parent_attachment_point_id)
}

// optional uint32 attachment_anchor_x = 9;
inline bool CMsgShowcaseItemPosition::_internal_has_attachment_anchor_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_attachment_anchor_x() const {
  return _internal_has_attachment_anchor_x();
}
inline void CMsgShowcaseItemPosition::clear_attachment_anchor_x() {
  _impl_.attachment_anchor_x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgShowcaseItemPosition::_internal_attachment_anchor_x() const {
  return _impl_.attachment_anchor_x_;
}
inline uint32_t CMsgShowcaseItemPosition::attachment_anchor_x() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.attachment_anchor_x)
  return _internal_attachment_anchor_x();
}
inline void CMsgShowcaseItemPosition::_internal_set_attachment_anchor_x(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.attachment_anchor_x_ = value;
}
inline void CMsgShowcaseItemPosition::set_attachment_anchor_x(uint32_t value) {
  _internal_set_attachment_anchor_x(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.attachment_anchor_x)
}

// optional uint32 attachment_anchor_y = 10;
inline bool CMsgShowcaseItemPosition::_internal_has_attachment_anchor_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_attachment_anchor_y() const {
  return _internal_has_attachment_anchor_y();
}
inline void CMsgShowcaseItemPosition::clear_attachment_anchor_y() {
  _impl_.attachment_anchor_y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgShowcaseItemPosition::_internal_attachment_anchor_y() const {
  return _impl_.attachment_anchor_y_;
}
inline uint32_t CMsgShowcaseItemPosition::attachment_anchor_y() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.attachment_anchor_y)
  return _internal_attachment_anchor_y();
}
inline void CMsgShowcaseItemPosition::_internal_set_attachment_anchor_y(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.attachment_anchor_y_ = value;
}
inline void CMsgShowcaseItemPosition::set_attachment_anchor_y(uint32_t value) {
  _internal_set_attachment_anchor_y(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.attachment_anchor_y)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem

// optional uint32 showcase_item_id = 1;
inline bool CMsgShowcaseItem::_internal_has_showcase_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseItem::has_showcase_item_id() const {
  return _internal_has_showcase_item_id();
}
inline void CMsgShowcaseItem::clear_showcase_item_id() {
  _impl_.showcase_item_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseItem::_internal_showcase_item_id() const {
  return _impl_.showcase_item_id_;
}
inline uint32_t CMsgShowcaseItem::showcase_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem.showcase_item_id)
  return _internal_showcase_item_id();
}
inline void CMsgShowcaseItem::_internal_set_showcase_item_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.showcase_item_id_ = value;
}
inline void CMsgShowcaseItem::set_showcase_item_id(uint32_t value) {
  _internal_set_showcase_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem.showcase_item_id)
}

// optional .CMsgShowcaseItemPosition item_position = 2;
inline bool CMsgShowcaseItem::_internal_has_item_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_position_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem::has_item_position() const {
  return _internal_has_item_position();
}
inline void CMsgShowcaseItem::clear_item_position() {
  if (_impl_.item_position_ != nullptr) _impl_.item_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItemPosition& CMsgShowcaseItem::_internal_item_position() const {
  const ::CMsgShowcaseItemPosition* p = _impl_.item_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItemPosition&>(
      ::_CMsgShowcaseItemPosition_default_instance_);
}
inline const ::CMsgShowcaseItemPosition& CMsgShowcaseItem::item_position() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem.item_position)
  return _internal_item_position();
}
inline void CMsgShowcaseItem::unsafe_arena_set_allocated_item_position(
    ::CMsgShowcaseItemPosition* item_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_position_);
  }
  _impl_.item_position_ = item_position;
  if (item_position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem.item_position)
}
inline ::CMsgShowcaseItemPosition* CMsgShowcaseItem::release_item_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItemPosition* temp = _impl_.item_position_;
  _impl_.item_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItemPosition* CMsgShowcaseItem::unsafe_arena_release_item_position() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem.item_position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItemPosition* temp = _impl_.item_position_;
  _impl_.item_position_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItemPosition* CMsgShowcaseItem::_internal_mutable_item_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.item_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItemPosition>(GetArenaForAllocation());
    _impl_.item_position_ = p;
  }
  return _impl_.item_position_;
}
inline ::CMsgShowcaseItemPosition* CMsgShowcaseItem::mutable_item_position() {
  ::CMsgShowcaseItemPosition* _msg = _internal_mutable_item_position();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem.item_position)
  return _msg;
}
inline void CMsgShowcaseItem::set_allocated_item_position(::CMsgShowcaseItemPosition* item_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_position_;
  }
  if (item_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item_position);
    if (message_arena != submessage_arena) {
      item_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.item_position_ = item_position;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem.item_position)
}

// optional .CMsgShowcaseItemData item_data = 3;
inline bool CMsgShowcaseItem::_internal_has_item_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem::has_item_data() const {
  return _internal_has_item_data();
}
inline void CMsgShowcaseItem::clear_item_data() {
  if (_impl_.item_data_ != nullptr) _impl_.item_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgShowcaseItemData& CMsgShowcaseItem::_internal_item_data() const {
  const ::CMsgShowcaseItemData* p = _impl_.item_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItemData&>(
      ::_CMsgShowcaseItemData_default_instance_);
}
inline const ::CMsgShowcaseItemData& CMsgShowcaseItem::item_data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem.item_data)
  return _internal_item_data();
}
inline void CMsgShowcaseItem::unsafe_arena_set_allocated_item_data(
    ::CMsgShowcaseItemData* item_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_data_);
  }
  _impl_.item_data_ = item_data;
  if (item_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem.item_data)
}
inline ::CMsgShowcaseItemData* CMsgShowcaseItem::release_item_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseItemData* temp = _impl_.item_data_;
  _impl_.item_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItemData* CMsgShowcaseItem::unsafe_arena_release_item_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem.item_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseItemData* temp = _impl_.item_data_;
  _impl_.item_data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItemData* CMsgShowcaseItem::_internal_mutable_item_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.item_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItemData>(GetArenaForAllocation());
    _impl_.item_data_ = p;
  }
  return _impl_.item_data_;
}
inline ::CMsgShowcaseItemData* CMsgShowcaseItem::mutable_item_data() {
  ::CMsgShowcaseItemData* _msg = _internal_mutable_item_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem.item_data)
  return _msg;
}
inline void CMsgShowcaseItem::set_allocated_item_data(::CMsgShowcaseItemData* item_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_data_;
  }
  if (item_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item_data);
    if (message_arena != submessage_arena) {
      item_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.item_data_ = item_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem.item_data)
}

// optional .EShowcaseItemState state = 4 [default = k_eShowcaseItemState_Ok];
inline bool CMsgShowcaseItem::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgShowcaseItem::has_state() const {
  return _internal_has_state();
}
inline void CMsgShowcaseItem::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::EShowcaseItemState CMsgShowcaseItem::_internal_state() const {
  return static_cast< ::EShowcaseItemState >(_impl_.state_);
}
inline ::EShowcaseItemState CMsgShowcaseItem::state() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem.state)
  return _internal_state();
}
inline void CMsgShowcaseItem::_internal_set_state(::EShowcaseItemState value) {
  assert(::EShowcaseItemState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_ = value;
}
inline void CMsgShowcaseItem::set_state(::EShowcaseItemState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem.state)
}

// optional uint32 flags = 5;
inline bool CMsgShowcaseItem::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgShowcaseItem::has_flags() const {
  return _internal_has_flags();
}
inline void CMsgShowcaseItem::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgShowcaseItem::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t CMsgShowcaseItem::flags() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem.flags)
  return _internal_flags();
}
inline void CMsgShowcaseItem::_internal_set_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}
inline void CMsgShowcaseItem::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem.flags)
}

// -------------------------------------------------------------------

// CMsgShowcase

// repeated .CMsgShowcaseItem showcase_items = 1;
inline int CMsgShowcase::_internal_showcase_items_size() const {
  return _impl_.showcase_items_.size();
}
inline int CMsgShowcase::showcase_items_size() const {
  return _internal_showcase_items_size();
}
inline void CMsgShowcase::clear_showcase_items() {
  _impl_.showcase_items_.Clear();
}
inline ::CMsgShowcaseItem* CMsgShowcase::mutable_showcase_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgShowcase.showcase_items)
  return _impl_.showcase_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseItem >*
CMsgShowcase::mutable_showcase_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShowcase.showcase_items)
  return &_impl_.showcase_items_;
}
inline const ::CMsgShowcaseItem& CMsgShowcase::_internal_showcase_items(int index) const {
  return _impl_.showcase_items_.Get(index);
}
inline const ::CMsgShowcaseItem& CMsgShowcase::showcase_items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShowcase.showcase_items)
  return _internal_showcase_items(index);
}
inline ::CMsgShowcaseItem* CMsgShowcase::_internal_add_showcase_items() {
  return _impl_.showcase_items_.Add();
}
inline ::CMsgShowcaseItem* CMsgShowcase::add_showcase_items() {
  ::CMsgShowcaseItem* _add = _internal_add_showcase_items();
  // @@protoc_insertion_point(field_add:CMsgShowcase.showcase_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseItem >&
CMsgShowcase::showcase_items() const {
  // @@protoc_insertion_point(field_list:CMsgShowcase.showcase_items)
  return _impl_.showcase_items_;
}

// optional .CMsgShowcaseItem background = 3;
inline bool CMsgShowcase::_internal_has_background() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.background_ != nullptr);
  return value;
}
inline bool CMsgShowcase::has_background() const {
  return _internal_has_background();
}
inline void CMsgShowcase::clear_background() {
  if (_impl_.background_ != nullptr) _impl_.background_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem& CMsgShowcase::_internal_background() const {
  const ::CMsgShowcaseItem* p = _impl_.background_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem&>(
      ::_CMsgShowcaseItem_default_instance_);
}
inline const ::CMsgShowcaseItem& CMsgShowcase::background() const {
  // @@protoc_insertion_point(field_get:CMsgShowcase.background)
  return _internal_background();
}
inline void CMsgShowcase::unsafe_arena_set_allocated_background(
    ::CMsgShowcaseItem* background) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.background_);
  }
  _impl_.background_ = background;
  if (background) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcase.background)
}
inline ::CMsgShowcaseItem* CMsgShowcase::release_background() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem* temp = _impl_.background_;
  _impl_.background_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem* CMsgShowcase::unsafe_arena_release_background() {
  // @@protoc_insertion_point(field_release:CMsgShowcase.background)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem* temp = _impl_.background_;
  _impl_.background_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem* CMsgShowcase::_internal_mutable_background() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.background_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem>(GetArenaForAllocation());
    _impl_.background_ = p;
  }
  return _impl_.background_;
}
inline ::CMsgShowcaseItem* CMsgShowcase::mutable_background() {
  ::CMsgShowcaseItem* _msg = _internal_mutable_background();
  // @@protoc_insertion_point(field_mutable:CMsgShowcase.background)
  return _msg;
}
inline void CMsgShowcase::set_allocated_background(::CMsgShowcaseItem* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.background_;
  }
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(background);
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.background_ = background;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcase.background)
}

// optional .CMsgShowcase.EModerationState moderation_state = 4 [default = k_eModerationState_Ok];
inline bool CMsgShowcase::_internal_has_moderation_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcase::has_moderation_state() const {
  return _internal_has_moderation_state();
}
inline void CMsgShowcase::clear_moderation_state() {
  _impl_.moderation_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgShowcase_EModerationState CMsgShowcase::_internal_moderation_state() const {
  return static_cast< ::CMsgShowcase_EModerationState >(_impl_.moderation_state_);
}
inline ::CMsgShowcase_EModerationState CMsgShowcase::moderation_state() const {
  // @@protoc_insertion_point(field_get:CMsgShowcase.moderation_state)
  return _internal_moderation_state();
}
inline void CMsgShowcase::_internal_set_moderation_state(::CMsgShowcase_EModerationState value) {
  assert(::CMsgShowcase_EModerationState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.moderation_state_ = value;
}
inline void CMsgShowcase::set_moderation_state(::CMsgShowcase_EModerationState value) {
  _internal_set_moderation_state(value);
  // @@protoc_insertion_point(field_set:CMsgShowcase.moderation_state)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseGetUserData

// optional uint32 account_id = 1;
inline bool CMsgClientToGCShowcaseGetUserData::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseGetUserData::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgClientToGCShowcaseGetUserData::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCShowcaseGetUserData::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgClientToGCShowcaseGetUserData::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseGetUserData.account_id)
  return _internal_account_id();
}
inline void CMsgClientToGCShowcaseGetUserData::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgClientToGCShowcaseGetUserData::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseGetUserData.account_id)
}

// optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
inline bool CMsgClientToGCShowcaseGetUserData::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseGetUserData::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgClientToGCShowcaseGetUserData::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EShowcaseType CMsgClientToGCShowcaseGetUserData::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgClientToGCShowcaseGetUserData::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseGetUserData.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgClientToGCShowcaseGetUserData::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.showcase_type_ = value;
}
inline void CMsgClientToGCShowcaseGetUserData::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseGetUserData.showcase_type)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseGetUserDataResponse

// optional .CMsgClientToGCShowcaseGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseGetUserDataResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseGetUserDataResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseGetUserDataResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseGetUserDataResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseGetUserDataResponse::_internal_set_response(::CMsgClientToGCShowcaseGetUserDataResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseGetUserDataResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseGetUserDataResponse::set_response(::CMsgClientToGCShowcaseGetUserDataResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseGetUserDataResponse.response)
}

// optional .CMsgShowcase showcase = 2;
inline bool CMsgClientToGCShowcaseGetUserDataResponse::_internal_has_showcase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.showcase_ != nullptr);
  return value;
}
inline bool CMsgClientToGCShowcaseGetUserDataResponse::has_showcase() const {
  return _internal_has_showcase();
}
inline void CMsgClientToGCShowcaseGetUserDataResponse::clear_showcase() {
  if (_impl_.showcase_ != nullptr) _impl_.showcase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcase& CMsgClientToGCShowcaseGetUserDataResponse::_internal_showcase() const {
  const ::CMsgShowcase* p = _impl_.showcase_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcase&>(
      ::_CMsgShowcase_default_instance_);
}
inline const ::CMsgShowcase& CMsgClientToGCShowcaseGetUserDataResponse::showcase() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseGetUserDataResponse.showcase)
  return _internal_showcase();
}
inline void CMsgClientToGCShowcaseGetUserDataResponse::unsafe_arena_set_allocated_showcase(
    ::CMsgShowcase* showcase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.showcase_);
  }
  _impl_.showcase_ = showcase;
  if (showcase) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCShowcaseGetUserDataResponse.showcase)
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseGetUserDataResponse::release_showcase() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcase* temp = _impl_.showcase_;
  _impl_.showcase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseGetUserDataResponse::unsafe_arena_release_showcase() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCShowcaseGetUserDataResponse.showcase)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcase* temp = _impl_.showcase_;
  _impl_.showcase_ = nullptr;
  return temp;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseGetUserDataResponse::_internal_mutable_showcase() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.showcase_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcase>(GetArenaForAllocation());
    _impl_.showcase_ = p;
  }
  return _impl_.showcase_;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseGetUserDataResponse::mutable_showcase() {
  ::CMsgShowcase* _msg = _internal_mutable_showcase();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCShowcaseGetUserDataResponse.showcase)
  return _msg;
}
inline void CMsgClientToGCShowcaseGetUserDataResponse::set_allocated_showcase(::CMsgShowcase* showcase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.showcase_;
  }
  if (showcase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(showcase);
    if (message_arena != submessage_arena) {
      showcase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, showcase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.showcase_ = showcase;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCShowcaseGetUserDataResponse.showcase)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseSetUserData

// optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
inline bool CMsgClientToGCShowcaseSetUserData::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseSetUserData::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgClientToGCShowcaseSetUserData::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EShowcaseType CMsgClientToGCShowcaseSetUserData::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgClientToGCShowcaseSetUserData::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSetUserData.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgClientToGCShowcaseSetUserData::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.showcase_type_ = value;
}
inline void CMsgClientToGCShowcaseSetUserData::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseSetUserData.showcase_type)
}

// optional .CMsgShowcase showcase = 2;
inline bool CMsgClientToGCShowcaseSetUserData::_internal_has_showcase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.showcase_ != nullptr);
  return value;
}
inline bool CMsgClientToGCShowcaseSetUserData::has_showcase() const {
  return _internal_has_showcase();
}
inline void CMsgClientToGCShowcaseSetUserData::clear_showcase() {
  if (_impl_.showcase_ != nullptr) _impl_.showcase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcase& CMsgClientToGCShowcaseSetUserData::_internal_showcase() const {
  const ::CMsgShowcase* p = _impl_.showcase_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcase&>(
      ::_CMsgShowcase_default_instance_);
}
inline const ::CMsgShowcase& CMsgClientToGCShowcaseSetUserData::showcase() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSetUserData.showcase)
  return _internal_showcase();
}
inline void CMsgClientToGCShowcaseSetUserData::unsafe_arena_set_allocated_showcase(
    ::CMsgShowcase* showcase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.showcase_);
  }
  _impl_.showcase_ = showcase;
  if (showcase) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCShowcaseSetUserData.showcase)
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserData::release_showcase() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcase* temp = _impl_.showcase_;
  _impl_.showcase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserData::unsafe_arena_release_showcase() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCShowcaseSetUserData.showcase)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcase* temp = _impl_.showcase_;
  _impl_.showcase_ = nullptr;
  return temp;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserData::_internal_mutable_showcase() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.showcase_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcase>(GetArenaForAllocation());
    _impl_.showcase_ = p;
  }
  return _impl_.showcase_;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserData::mutable_showcase() {
  ::CMsgShowcase* _msg = _internal_mutable_showcase();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCShowcaseSetUserData.showcase)
  return _msg;
}
inline void CMsgClientToGCShowcaseSetUserData::set_allocated_showcase(::CMsgShowcase* showcase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.showcase_;
  }
  if (showcase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(showcase);
    if (message_arena != submessage_arena) {
      showcase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, showcase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.showcase_ = showcase;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCShowcaseSetUserData.showcase)
}

// optional uint32 format_version = 3;
inline bool CMsgClientToGCShowcaseSetUserData::_internal_has_format_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseSetUserData::has_format_version() const {
  return _internal_has_format_version();
}
inline void CMsgClientToGCShowcaseSetUserData::clear_format_version() {
  _impl_.format_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCShowcaseSetUserData::_internal_format_version() const {
  return _impl_.format_version_;
}
inline uint32_t CMsgClientToGCShowcaseSetUserData::format_version() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSetUserData.format_version)
  return _internal_format_version();
}
inline void CMsgClientToGCShowcaseSetUserData::_internal_set_format_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.format_version_ = value;
}
inline void CMsgClientToGCShowcaseSetUserData::set_format_version(uint32_t value) {
  _internal_set_format_version(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseSetUserData.format_version)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseSetUserDataResponse

// optional .CMsgClientToGCShowcaseSetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseSetUserDataResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseSetUserDataResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSetUserDataResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::_internal_set_response(::CMsgClientToGCShowcaseSetUserDataResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseSetUserDataResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::set_response(::CMsgClientToGCShowcaseSetUserDataResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseSetUserDataResponse.response)
}

// optional .CMsgShowcase validated_showcase = 2;
inline bool CMsgClientToGCShowcaseSetUserDataResponse::_internal_has_validated_showcase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validated_showcase_ != nullptr);
  return value;
}
inline bool CMsgClientToGCShowcaseSetUserDataResponse::has_validated_showcase() const {
  return _internal_has_validated_showcase();
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::clear_validated_showcase() {
  if (_impl_.validated_showcase_ != nullptr) _impl_.validated_showcase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcase& CMsgClientToGCShowcaseSetUserDataResponse::_internal_validated_showcase() const {
  const ::CMsgShowcase* p = _impl_.validated_showcase_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcase&>(
      ::_CMsgShowcase_default_instance_);
}
inline const ::CMsgShowcase& CMsgClientToGCShowcaseSetUserDataResponse::validated_showcase() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSetUserDataResponse.validated_showcase)
  return _internal_validated_showcase();
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::unsafe_arena_set_allocated_validated_showcase(
    ::CMsgShowcase* validated_showcase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validated_showcase_);
  }
  _impl_.validated_showcase_ = validated_showcase;
  if (validated_showcase) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCShowcaseSetUserDataResponse.validated_showcase)
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserDataResponse::release_validated_showcase() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcase* temp = _impl_.validated_showcase_;
  _impl_.validated_showcase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserDataResponse::unsafe_arena_release_validated_showcase() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCShowcaseSetUserDataResponse.validated_showcase)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcase* temp = _impl_.validated_showcase_;
  _impl_.validated_showcase_ = nullptr;
  return temp;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserDataResponse::_internal_mutable_validated_showcase() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.validated_showcase_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcase>(GetArenaForAllocation());
    _impl_.validated_showcase_ = p;
  }
  return _impl_.validated_showcase_;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserDataResponse::mutable_validated_showcase() {
  ::CMsgShowcase* _msg = _internal_mutable_validated_showcase();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCShowcaseSetUserDataResponse.validated_showcase)
  return _msg;
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::set_allocated_validated_showcase(::CMsgShowcase* validated_showcase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.validated_showcase_;
  }
  if (validated_showcase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(validated_showcase);
    if (message_arena != submessage_arena) {
      validated_showcase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validated_showcase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.validated_showcase_ = validated_showcase;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCShowcaseSetUserDataResponse.validated_showcase)
}

// optional uint32 locked_until_timestamp = 3;
inline bool CMsgClientToGCShowcaseSetUserDataResponse::_internal_has_locked_until_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseSetUserDataResponse::has_locked_until_timestamp() const {
  return _internal_has_locked_until_timestamp();
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::clear_locked_until_timestamp() {
  _impl_.locked_until_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCShowcaseSetUserDataResponse::_internal_locked_until_timestamp() const {
  return _impl_.locked_until_timestamp_;
}
inline uint32_t CMsgClientToGCShowcaseSetUserDataResponse::locked_until_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSetUserDataResponse.locked_until_timestamp)
  return _internal_locked_until_timestamp();
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::_internal_set_locked_until_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.locked_until_timestamp_ = value;
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::set_locked_until_timestamp(uint32_t value) {
  _internal_set_locked_until_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseSetUserDataResponse.locked_until_timestamp)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseSubmitReport

// optional uint32 target_account_id = 1;
inline bool CMsgClientToGCShowcaseSubmitReport::_internal_has_target_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseSubmitReport::has_target_account_id() const {
  return _internal_has_target_account_id();
}
inline void CMsgClientToGCShowcaseSubmitReport::clear_target_account_id() {
  _impl_.target_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCShowcaseSubmitReport::_internal_target_account_id() const {
  return _impl_.target_account_id_;
}
inline uint32_t CMsgClientToGCShowcaseSubmitReport::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSubmitReport.target_account_id)
  return _internal_target_account_id();
}
inline void CMsgClientToGCShowcaseSubmitReport::_internal_set_target_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_account_id_ = value;
}
inline void CMsgClientToGCShowcaseSubmitReport::set_target_account_id(uint32_t value) {
  _internal_set_target_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseSubmitReport.target_account_id)
}

// optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
inline bool CMsgClientToGCShowcaseSubmitReport::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseSubmitReport::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgClientToGCShowcaseSubmitReport::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::EShowcaseType CMsgClientToGCShowcaseSubmitReport::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgClientToGCShowcaseSubmitReport::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSubmitReport.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgClientToGCShowcaseSubmitReport::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.showcase_type_ = value;
}
inline void CMsgClientToGCShowcaseSubmitReport::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseSubmitReport.showcase_type)
}

// optional string report_comment = 3;
inline bool CMsgClientToGCShowcaseSubmitReport::_internal_has_report_comment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseSubmitReport::has_report_comment() const {
  return _internal_has_report_comment();
}
inline void CMsgClientToGCShowcaseSubmitReport::clear_report_comment() {
  _impl_.report_comment_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientToGCShowcaseSubmitReport::report_comment() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSubmitReport.report_comment)
  return _internal_report_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientToGCShowcaseSubmitReport::set_report_comment(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.report_comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseSubmitReport.report_comment)
}
inline std::string* CMsgClientToGCShowcaseSubmitReport::mutable_report_comment() {
  std::string* _s = _internal_mutable_report_comment();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCShowcaseSubmitReport.report_comment)
  return _s;
}
inline const std::string& CMsgClientToGCShowcaseSubmitReport::_internal_report_comment() const {
  return _impl_.report_comment_.Get();
}
inline void CMsgClientToGCShowcaseSubmitReport::_internal_set_report_comment(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.report_comment_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgClientToGCShowcaseSubmitReport::_internal_mutable_report_comment() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.report_comment_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgClientToGCShowcaseSubmitReport::release_report_comment() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCShowcaseSubmitReport.report_comment)
  if (!_internal_has_report_comment()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.report_comment_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.report_comment_.IsDefault()) {
    _impl_.report_comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientToGCShowcaseSubmitReport::set_allocated_report_comment(std::string* report_comment) {
  if (report_comment != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.report_comment_.SetAllocated(report_comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.report_comment_.IsDefault()) {
    _impl_.report_comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCShowcaseSubmitReport.report_comment)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseSubmitReportResponse

// optional .CMsgClientToGCShowcaseSubmitReportResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseSubmitReportResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseSubmitReportResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseSubmitReportResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCShowcaseSubmitReportResponse_EResponse CMsgClientToGCShowcaseSubmitReportResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseSubmitReportResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseSubmitReportResponse_EResponse CMsgClientToGCShowcaseSubmitReportResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSubmitReportResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseSubmitReportResponse::_internal_set_response(::CMsgClientToGCShowcaseSubmitReportResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseSubmitReportResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseSubmitReportResponse::set_response(::CMsgClientToGCShowcaseSubmitReportResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseSubmitReportResponse.response)
}

// -------------------------------------------------------------------

// CMsgShowcaseReportsRollupInfo

// optional uint32 rollup_id = 1;
inline bool CMsgShowcaseReportsRollupInfo::_internal_has_rollup_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseReportsRollupInfo::has_rollup_id() const {
  return _internal_has_rollup_id();
}
inline void CMsgShowcaseReportsRollupInfo::clear_rollup_id() {
  _impl_.rollup_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgShowcaseReportsRollupInfo::_internal_rollup_id() const {
  return _impl_.rollup_id_;
}
inline uint32_t CMsgShowcaseReportsRollupInfo::rollup_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReportsRollupInfo.rollup_id)
  return _internal_rollup_id();
}
inline void CMsgShowcaseReportsRollupInfo::_internal_set_rollup_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rollup_id_ = value;
}
inline void CMsgShowcaseReportsRollupInfo::set_rollup_id(uint32_t value) {
  _internal_set_rollup_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseReportsRollupInfo.rollup_id)
}

// optional uint32 start_timestamp = 2;
inline bool CMsgShowcaseReportsRollupInfo::_internal_has_start_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseReportsRollupInfo::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void CMsgShowcaseReportsRollupInfo::clear_start_timestamp() {
  _impl_.start_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowcaseReportsRollupInfo::_internal_start_timestamp() const {
  return _impl_.start_timestamp_;
}
inline uint32_t CMsgShowcaseReportsRollupInfo::start_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReportsRollupInfo.start_timestamp)
  return _internal_start_timestamp();
}
inline void CMsgShowcaseReportsRollupInfo::_internal_set_start_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_timestamp_ = value;
}
inline void CMsgShowcaseReportsRollupInfo::set_start_timestamp(uint32_t value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseReportsRollupInfo.start_timestamp)
}

// optional uint32 end_timestamp = 3;
inline bool CMsgShowcaseReportsRollupInfo::_internal_has_end_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseReportsRollupInfo::has_end_timestamp() const {
  return _internal_has_end_timestamp();
}
inline void CMsgShowcaseReportsRollupInfo::clear_end_timestamp() {
  _impl_.end_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseReportsRollupInfo::_internal_end_timestamp() const {
  return _impl_.end_timestamp_;
}
inline uint32_t CMsgShowcaseReportsRollupInfo::end_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReportsRollupInfo.end_timestamp)
  return _internal_end_timestamp();
}
inline void CMsgShowcaseReportsRollupInfo::_internal_set_end_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.end_timestamp_ = value;
}
inline void CMsgShowcaseReportsRollupInfo::set_end_timestamp(uint32_t value) {
  _internal_set_end_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseReportsRollupInfo.end_timestamp)
}

// -------------------------------------------------------------------

// CMsgShowcaseReportsRollupList

// repeated .CMsgShowcaseReportsRollupInfo rollups = 1;
inline int CMsgShowcaseReportsRollupList::_internal_rollups_size() const {
  return _impl_.rollups_.size();
}
inline int CMsgShowcaseReportsRollupList::rollups_size() const {
  return _internal_rollups_size();
}
inline void CMsgShowcaseReportsRollupList::clear_rollups() {
  _impl_.rollups_.Clear();
}
inline ::CMsgShowcaseReportsRollupInfo* CMsgShowcaseReportsRollupList::mutable_rollups(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseReportsRollupList.rollups)
  return _impl_.rollups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReportsRollupInfo >*
CMsgShowcaseReportsRollupList::mutable_rollups() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShowcaseReportsRollupList.rollups)
  return &_impl_.rollups_;
}
inline const ::CMsgShowcaseReportsRollupInfo& CMsgShowcaseReportsRollupList::_internal_rollups(int index) const {
  return _impl_.rollups_.Get(index);
}
inline const ::CMsgShowcaseReportsRollupInfo& CMsgShowcaseReportsRollupList::rollups(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReportsRollupList.rollups)
  return _internal_rollups(index);
}
inline ::CMsgShowcaseReportsRollupInfo* CMsgShowcaseReportsRollupList::_internal_add_rollups() {
  return _impl_.rollups_.Add();
}
inline ::CMsgShowcaseReportsRollupInfo* CMsgShowcaseReportsRollupList::add_rollups() {
  ::CMsgShowcaseReportsRollupInfo* _add = _internal_add_rollups();
  // @@protoc_insertion_point(field_add:CMsgShowcaseReportsRollupList.rollups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReportsRollupInfo >&
CMsgShowcaseReportsRollupList::rollups() const {
  // @@protoc_insertion_point(field_list:CMsgShowcaseReportsRollupList.rollups)
  return _impl_.rollups_;
}

// -------------------------------------------------------------------

// CMsgShowcaseReportsRollupEntry

// optional uint32 account_id = 1;
inline bool CMsgShowcaseReportsRollupEntry::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseReportsRollupEntry::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgShowcaseReportsRollupEntry::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgShowcaseReportsRollupEntry::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgShowcaseReportsRollupEntry::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReportsRollupEntry.account_id)
  return _internal_account_id();
}
inline void CMsgShowcaseReportsRollupEntry::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgShowcaseReportsRollupEntry::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseReportsRollupEntry.account_id)
}

// optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
inline bool CMsgShowcaseReportsRollupEntry::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseReportsRollupEntry::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgShowcaseReportsRollupEntry::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EShowcaseType CMsgShowcaseReportsRollupEntry::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgShowcaseReportsRollupEntry::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReportsRollupEntry.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgShowcaseReportsRollupEntry::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.showcase_type_ = value;
}
inline void CMsgShowcaseReportsRollupEntry::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseReportsRollupEntry.showcase_type)
}

// optional uint32 report_count = 3;
inline bool CMsgShowcaseReportsRollupEntry::_internal_has_report_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseReportsRollupEntry::has_report_count() const {
  return _internal_has_report_count();
}
inline void CMsgShowcaseReportsRollupEntry::clear_report_count() {
  _impl_.report_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseReportsRollupEntry::_internal_report_count() const {
  return _impl_.report_count_;
}
inline uint32_t CMsgShowcaseReportsRollupEntry::report_count() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReportsRollupEntry.report_count)
  return _internal_report_count();
}
inline void CMsgShowcaseReportsRollupEntry::_internal_set_report_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.report_count_ = value;
}
inline void CMsgShowcaseReportsRollupEntry::set_report_count(uint32_t value) {
  _internal_set_report_count(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseReportsRollupEntry.report_count)
}

// -------------------------------------------------------------------

// CMsgShowcaseReportsRollup

// optional .CMsgShowcaseReportsRollupInfo rollup_info = 1;
inline bool CMsgShowcaseReportsRollup::_internal_has_rollup_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rollup_info_ != nullptr);
  return value;
}
inline bool CMsgShowcaseReportsRollup::has_rollup_info() const {
  return _internal_has_rollup_info();
}
inline void CMsgShowcaseReportsRollup::clear_rollup_info() {
  if (_impl_.rollup_info_ != nullptr) _impl_.rollup_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseReportsRollupInfo& CMsgShowcaseReportsRollup::_internal_rollup_info() const {
  const ::CMsgShowcaseReportsRollupInfo* p = _impl_.rollup_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseReportsRollupInfo&>(
      ::_CMsgShowcaseReportsRollupInfo_default_instance_);
}
inline const ::CMsgShowcaseReportsRollupInfo& CMsgShowcaseReportsRollup::rollup_info() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReportsRollup.rollup_info)
  return _internal_rollup_info();
}
inline void CMsgShowcaseReportsRollup::unsafe_arena_set_allocated_rollup_info(
    ::CMsgShowcaseReportsRollupInfo* rollup_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rollup_info_);
  }
  _impl_.rollup_info_ = rollup_info;
  if (rollup_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseReportsRollup.rollup_info)
}
inline ::CMsgShowcaseReportsRollupInfo* CMsgShowcaseReportsRollup::release_rollup_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseReportsRollupInfo* temp = _impl_.rollup_info_;
  _impl_.rollup_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseReportsRollupInfo* CMsgShowcaseReportsRollup::unsafe_arena_release_rollup_info() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseReportsRollup.rollup_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseReportsRollupInfo* temp = _impl_.rollup_info_;
  _impl_.rollup_info_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseReportsRollupInfo* CMsgShowcaseReportsRollup::_internal_mutable_rollup_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rollup_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseReportsRollupInfo>(GetArenaForAllocation());
    _impl_.rollup_info_ = p;
  }
  return _impl_.rollup_info_;
}
inline ::CMsgShowcaseReportsRollupInfo* CMsgShowcaseReportsRollup::mutable_rollup_info() {
  ::CMsgShowcaseReportsRollupInfo* _msg = _internal_mutable_rollup_info();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseReportsRollup.rollup_info)
  return _msg;
}
inline void CMsgShowcaseReportsRollup::set_allocated_rollup_info(::CMsgShowcaseReportsRollupInfo* rollup_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rollup_info_;
  }
  if (rollup_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rollup_info);
    if (message_arena != submessage_arena) {
      rollup_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollup_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rollup_info_ = rollup_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseReportsRollup.rollup_info)
}

// repeated .CMsgShowcaseReportsRollupEntry rollup_entries = 2;
inline int CMsgShowcaseReportsRollup::_internal_rollup_entries_size() const {
  return _impl_.rollup_entries_.size();
}
inline int CMsgShowcaseReportsRollup::rollup_entries_size() const {
  return _internal_rollup_entries_size();
}
inline void CMsgShowcaseReportsRollup::clear_rollup_entries() {
  _impl_.rollup_entries_.Clear();
}
inline ::CMsgShowcaseReportsRollupEntry* CMsgShowcaseReportsRollup::mutable_rollup_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseReportsRollup.rollup_entries)
  return _impl_.rollup_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReportsRollupEntry >*
CMsgShowcaseReportsRollup::mutable_rollup_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShowcaseReportsRollup.rollup_entries)
  return &_impl_.rollup_entries_;
}
inline const ::CMsgShowcaseReportsRollupEntry& CMsgShowcaseReportsRollup::_internal_rollup_entries(int index) const {
  return _impl_.rollup_entries_.Get(index);
}
inline const ::CMsgShowcaseReportsRollupEntry& CMsgShowcaseReportsRollup::rollup_entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReportsRollup.rollup_entries)
  return _internal_rollup_entries(index);
}
inline ::CMsgShowcaseReportsRollupEntry* CMsgShowcaseReportsRollup::_internal_add_rollup_entries() {
  return _impl_.rollup_entries_.Add();
}
inline ::CMsgShowcaseReportsRollupEntry* CMsgShowcaseReportsRollup::add_rollup_entries() {
  ::CMsgShowcaseReportsRollupEntry* _add = _internal_add_rollup_entries();
  // @@protoc_insertion_point(field_add:CMsgShowcaseReportsRollup.rollup_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReportsRollupEntry >&
CMsgShowcaseReportsRollup::rollup_entries() const {
  // @@protoc_insertion_point(field_list:CMsgShowcaseReportsRollup.rollup_entries)
  return _impl_.rollup_entries_;
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminGetReportsRollupList

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminGetReportsRollupListResponse

// optional .CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::_internal_set_response(::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::set_response(::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.response)
}

// optional .CMsgShowcaseReportsRollupList rollup_list = 2;
inline bool CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::_internal_has_rollup_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rollup_list_ != nullptr);
  return value;
}
inline bool CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::has_rollup_list() const {
  return _internal_has_rollup_list();
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::clear_rollup_list() {
  if (_impl_.rollup_list_ != nullptr) _impl_.rollup_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseReportsRollupList& CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::_internal_rollup_list() const {
  const ::CMsgShowcaseReportsRollupList* p = _impl_.rollup_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseReportsRollupList&>(
      ::_CMsgShowcaseReportsRollupList_default_instance_);
}
inline const ::CMsgShowcaseReportsRollupList& CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::rollup_list() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.rollup_list)
  return _internal_rollup_list();
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::unsafe_arena_set_allocated_rollup_list(
    ::CMsgShowcaseReportsRollupList* rollup_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rollup_list_);
  }
  _impl_.rollup_list_ = rollup_list;
  if (rollup_list) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.rollup_list)
}
inline ::CMsgShowcaseReportsRollupList* CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::release_rollup_list() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseReportsRollupList* temp = _impl_.rollup_list_;
  _impl_.rollup_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseReportsRollupList* CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::unsafe_arena_release_rollup_list() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.rollup_list)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseReportsRollupList* temp = _impl_.rollup_list_;
  _impl_.rollup_list_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseReportsRollupList* CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::_internal_mutable_rollup_list() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rollup_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseReportsRollupList>(GetArenaForAllocation());
    _impl_.rollup_list_ = p;
  }
  return _impl_.rollup_list_;
}
inline ::CMsgShowcaseReportsRollupList* CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::mutable_rollup_list() {
  ::CMsgShowcaseReportsRollupList* _msg = _internal_mutable_rollup_list();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.rollup_list)
  return _msg;
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::set_allocated_rollup_list(::CMsgShowcaseReportsRollupList* rollup_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rollup_list_;
  }
  if (rollup_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rollup_list);
    if (message_arena != submessage_arena) {
      rollup_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollup_list, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rollup_list_ = rollup_list;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.rollup_list)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminGetReportsRollup

// optional uint32 rollup_id = 1;
inline bool CMsgClientToGCShowcaseAdminGetReportsRollup::_internal_has_rollup_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminGetReportsRollup::has_rollup_id() const {
  return _internal_has_rollup_id();
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollup::clear_rollup_id() {
  _impl_.rollup_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCShowcaseAdminGetReportsRollup::_internal_rollup_id() const {
  return _impl_.rollup_id_;
}
inline uint32_t CMsgClientToGCShowcaseAdminGetReportsRollup::rollup_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminGetReportsRollup.rollup_id)
  return _internal_rollup_id();
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollup::_internal_set_rollup_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rollup_id_ = value;
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollup::set_rollup_id(uint32_t value) {
  _internal_set_rollup_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminGetReportsRollup.rollup_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminGetReportsRollupResponse

// optional .CMsgClientToGCShowcaseAdminGetReportsRollupResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseAdminGetReportsRollupResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminGetReportsRollupResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminGetReportsRollupResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::_internal_set_response(::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::set_response(::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminGetReportsRollupResponse.response)
}

// optional .CMsgShowcaseReportsRollup rollup = 2;
inline bool CMsgClientToGCShowcaseAdminGetReportsRollupResponse::_internal_has_rollup() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rollup_ != nullptr);
  return value;
}
inline bool CMsgClientToGCShowcaseAdminGetReportsRollupResponse::has_rollup() const {
  return _internal_has_rollup();
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::clear_rollup() {
  if (_impl_.rollup_ != nullptr) _impl_.rollup_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseReportsRollup& CMsgClientToGCShowcaseAdminGetReportsRollupResponse::_internal_rollup() const {
  const ::CMsgShowcaseReportsRollup* p = _impl_.rollup_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseReportsRollup&>(
      ::_CMsgShowcaseReportsRollup_default_instance_);
}
inline const ::CMsgShowcaseReportsRollup& CMsgClientToGCShowcaseAdminGetReportsRollupResponse::rollup() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminGetReportsRollupResponse.rollup)
  return _internal_rollup();
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::unsafe_arena_set_allocated_rollup(
    ::CMsgShowcaseReportsRollup* rollup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rollup_);
  }
  _impl_.rollup_ = rollup;
  if (rollup) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCShowcaseAdminGetReportsRollupResponse.rollup)
}
inline ::CMsgShowcaseReportsRollup* CMsgClientToGCShowcaseAdminGetReportsRollupResponse::release_rollup() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseReportsRollup* temp = _impl_.rollup_;
  _impl_.rollup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseReportsRollup* CMsgClientToGCShowcaseAdminGetReportsRollupResponse::unsafe_arena_release_rollup() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCShowcaseAdminGetReportsRollupResponse.rollup)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseReportsRollup* temp = _impl_.rollup_;
  _impl_.rollup_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseReportsRollup* CMsgClientToGCShowcaseAdminGetReportsRollupResponse::_internal_mutable_rollup() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rollup_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseReportsRollup>(GetArenaForAllocation());
    _impl_.rollup_ = p;
  }
  return _impl_.rollup_;
}
inline ::CMsgShowcaseReportsRollup* CMsgClientToGCShowcaseAdminGetReportsRollupResponse::mutable_rollup() {
  ::CMsgShowcaseReportsRollup* _msg = _internal_mutable_rollup();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCShowcaseAdminGetReportsRollupResponse.rollup)
  return _msg;
}
inline void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::set_allocated_rollup(::CMsgShowcaseReportsRollup* rollup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rollup_;
  }
  if (rollup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rollup);
    if (message_arena != submessage_arena) {
      rollup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollup, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rollup_ = rollup;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCShowcaseAdminGetReportsRollupResponse.rollup)
}

// -------------------------------------------------------------------

// CMsgShowcaseAuditEntry

// optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
inline bool CMsgShowcaseAuditEntry::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseAuditEntry::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgShowcaseAuditEntry::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::EShowcaseType CMsgShowcaseAuditEntry::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgShowcaseAuditEntry::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseAuditEntry.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgShowcaseAuditEntry::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.showcase_type_ = value;
}
inline void CMsgShowcaseAuditEntry::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseAuditEntry.showcase_type)
}

// optional .EShowcaseAuditAction audit_action = 2 [default = k_eShowcaseAuditAction_Invalid];
inline bool CMsgShowcaseAuditEntry::_internal_has_audit_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseAuditEntry::has_audit_action() const {
  return _internal_has_audit_action();
}
inline void CMsgShowcaseAuditEntry::clear_audit_action() {
  _impl_.audit_action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EShowcaseAuditAction CMsgShowcaseAuditEntry::_internal_audit_action() const {
  return static_cast< ::EShowcaseAuditAction >(_impl_.audit_action_);
}
inline ::EShowcaseAuditAction CMsgShowcaseAuditEntry::audit_action() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseAuditEntry.audit_action)
  return _internal_audit_action();
}
inline void CMsgShowcaseAuditEntry::_internal_set_audit_action(::EShowcaseAuditAction value) {
  assert(::EShowcaseAuditAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.audit_action_ = value;
}
inline void CMsgShowcaseAuditEntry::set_audit_action(::EShowcaseAuditAction value) {
  _internal_set_audit_action(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseAuditEntry.audit_action)
}

// optional uint64 audit_data = 3;
inline bool CMsgShowcaseAuditEntry::_internal_has_audit_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseAuditEntry::has_audit_data() const {
  return _internal_has_audit_data();
}
inline void CMsgShowcaseAuditEntry::clear_audit_data() {
  _impl_.audit_data_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgShowcaseAuditEntry::_internal_audit_data() const {
  return _impl_.audit_data_;
}
inline uint64_t CMsgShowcaseAuditEntry::audit_data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseAuditEntry.audit_data)
  return _internal_audit_data();
}
inline void CMsgShowcaseAuditEntry::_internal_set_audit_data(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.audit_data_ = value;
}
inline void CMsgShowcaseAuditEntry::set_audit_data(uint64_t value) {
  _internal_set_audit_data(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseAuditEntry.audit_data)
}

// optional uint32 timestamp = 4;
inline bool CMsgShowcaseAuditEntry::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgShowcaseAuditEntry::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgShowcaseAuditEntry::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgShowcaseAuditEntry::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgShowcaseAuditEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseAuditEntry.timestamp)
  return _internal_timestamp();
}
inline void CMsgShowcaseAuditEntry::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.timestamp_ = value;
}
inline void CMsgShowcaseAuditEntry::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseAuditEntry.timestamp)
}

// -------------------------------------------------------------------

// CMsgShowcaseReport

// optional uint32 reporter_account_id = 1;
inline bool CMsgShowcaseReport::_internal_has_reporter_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseReport::has_reporter_account_id() const {
  return _internal_has_reporter_account_id();
}
inline void CMsgShowcaseReport::clear_reporter_account_id() {
  _impl_.reporter_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowcaseReport::_internal_reporter_account_id() const {
  return _impl_.reporter_account_id_;
}
inline uint32_t CMsgShowcaseReport::reporter_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReport.reporter_account_id)
  return _internal_reporter_account_id();
}
inline void CMsgShowcaseReport::_internal_set_reporter_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reporter_account_id_ = value;
}
inline void CMsgShowcaseReport::set_reporter_account_id(uint32_t value) {
  _internal_set_reporter_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseReport.reporter_account_id)
}

// optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
inline bool CMsgShowcaseReport::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseReport::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgShowcaseReport::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::EShowcaseType CMsgShowcaseReport::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgShowcaseReport::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReport.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgShowcaseReport::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.showcase_type_ = value;
}
inline void CMsgShowcaseReport::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseReport.showcase_type)
}

// optional uint32 report_timestamp = 3;
inline bool CMsgShowcaseReport::_internal_has_report_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgShowcaseReport::has_report_timestamp() const {
  return _internal_has_report_timestamp();
}
inline void CMsgShowcaseReport::clear_report_timestamp() {
  _impl_.report_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgShowcaseReport::_internal_report_timestamp() const {
  return _impl_.report_timestamp_;
}
inline uint32_t CMsgShowcaseReport::report_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReport.report_timestamp)
  return _internal_report_timestamp();
}
inline void CMsgShowcaseReport::_internal_set_report_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.report_timestamp_ = value;
}
inline void CMsgShowcaseReport::set_report_timestamp(uint32_t value) {
  _internal_set_report_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseReport.report_timestamp)
}

// optional string report_comment = 4;
inline bool CMsgShowcaseReport::_internal_has_report_comment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseReport::has_report_comment() const {
  return _internal_has_report_comment();
}
inline void CMsgShowcaseReport::clear_report_comment() {
  _impl_.report_comment_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgShowcaseReport::report_comment() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseReport.report_comment)
  return _internal_report_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShowcaseReport::set_report_comment(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.report_comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShowcaseReport.report_comment)
}
inline std::string* CMsgShowcaseReport::mutable_report_comment() {
  std::string* _s = _internal_mutable_report_comment();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseReport.report_comment)
  return _s;
}
inline const std::string& CMsgShowcaseReport::_internal_report_comment() const {
  return _impl_.report_comment_.Get();
}
inline void CMsgShowcaseReport::_internal_set_report_comment(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.report_comment_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgShowcaseReport::_internal_mutable_report_comment() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.report_comment_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgShowcaseReport::release_report_comment() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseReport.report_comment)
  if (!_internal_has_report_comment()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.report_comment_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.report_comment_.IsDefault()) {
    _impl_.report_comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShowcaseReport::set_allocated_report_comment(std::string* report_comment) {
  if (report_comment != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.report_comment_.SetAllocated(report_comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.report_comment_.IsDefault()) {
    _impl_.report_comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseReport.report_comment)
}

// -------------------------------------------------------------------

// CMsgShowcaseAdminUserDetails

// optional uint32 locked_until_timestamp = 1;
inline bool CMsgShowcaseAdminUserDetails::_internal_has_locked_until_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseAdminUserDetails::has_locked_until_timestamp() const {
  return _internal_has_locked_until_timestamp();
}
inline void CMsgShowcaseAdminUserDetails::clear_locked_until_timestamp() {
  _impl_.locked_until_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgShowcaseAdminUserDetails::_internal_locked_until_timestamp() const {
  return _impl_.locked_until_timestamp_;
}
inline uint32_t CMsgShowcaseAdminUserDetails::locked_until_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseAdminUserDetails.locked_until_timestamp)
  return _internal_locked_until_timestamp();
}
inline void CMsgShowcaseAdminUserDetails::_internal_set_locked_until_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.locked_until_timestamp_ = value;
}
inline void CMsgShowcaseAdminUserDetails::set_locked_until_timestamp(uint32_t value) {
  _internal_set_locked_until_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseAdminUserDetails.locked_until_timestamp)
}

// repeated .CMsgShowcaseAuditEntry audit_entries = 2;
inline int CMsgShowcaseAdminUserDetails::_internal_audit_entries_size() const {
  return _impl_.audit_entries_.size();
}
inline int CMsgShowcaseAdminUserDetails::audit_entries_size() const {
  return _internal_audit_entries_size();
}
inline void CMsgShowcaseAdminUserDetails::clear_audit_entries() {
  _impl_.audit_entries_.Clear();
}
inline ::CMsgShowcaseAuditEntry* CMsgShowcaseAdminUserDetails::mutable_audit_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseAdminUserDetails.audit_entries)
  return _impl_.audit_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseAuditEntry >*
CMsgShowcaseAdminUserDetails::mutable_audit_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShowcaseAdminUserDetails.audit_entries)
  return &_impl_.audit_entries_;
}
inline const ::CMsgShowcaseAuditEntry& CMsgShowcaseAdminUserDetails::_internal_audit_entries(int index) const {
  return _impl_.audit_entries_.Get(index);
}
inline const ::CMsgShowcaseAuditEntry& CMsgShowcaseAdminUserDetails::audit_entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseAdminUserDetails.audit_entries)
  return _internal_audit_entries(index);
}
inline ::CMsgShowcaseAuditEntry* CMsgShowcaseAdminUserDetails::_internal_add_audit_entries() {
  return _impl_.audit_entries_.Add();
}
inline ::CMsgShowcaseAuditEntry* CMsgShowcaseAdminUserDetails::add_audit_entries() {
  ::CMsgShowcaseAuditEntry* _add = _internal_add_audit_entries();
  // @@protoc_insertion_point(field_add:CMsgShowcaseAdminUserDetails.audit_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseAuditEntry >&
CMsgShowcaseAdminUserDetails::audit_entries() const {
  // @@protoc_insertion_point(field_list:CMsgShowcaseAdminUserDetails.audit_entries)
  return _impl_.audit_entries_;
}

// repeated .CMsgShowcaseReport reports = 3;
inline int CMsgShowcaseAdminUserDetails::_internal_reports_size() const {
  return _impl_.reports_.size();
}
inline int CMsgShowcaseAdminUserDetails::reports_size() const {
  return _internal_reports_size();
}
inline void CMsgShowcaseAdminUserDetails::clear_reports() {
  _impl_.reports_.Clear();
}
inline ::CMsgShowcaseReport* CMsgShowcaseAdminUserDetails::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseAdminUserDetails.reports)
  return _impl_.reports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReport >*
CMsgShowcaseAdminUserDetails::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShowcaseAdminUserDetails.reports)
  return &_impl_.reports_;
}
inline const ::CMsgShowcaseReport& CMsgShowcaseAdminUserDetails::_internal_reports(int index) const {
  return _impl_.reports_.Get(index);
}
inline const ::CMsgShowcaseReport& CMsgShowcaseAdminUserDetails::reports(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseAdminUserDetails.reports)
  return _internal_reports(index);
}
inline ::CMsgShowcaseReport* CMsgShowcaseAdminUserDetails::_internal_add_reports() {
  return _impl_.reports_.Add();
}
inline ::CMsgShowcaseReport* CMsgShowcaseAdminUserDetails::add_reports() {
  ::CMsgShowcaseReport* _add = _internal_add_reports();
  // @@protoc_insertion_point(field_add:CMsgShowcaseAdminUserDetails.reports)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseReport >&
CMsgShowcaseAdminUserDetails::reports() const {
  // @@protoc_insertion_point(field_list:CMsgShowcaseAdminUserDetails.reports)
  return _impl_.reports_;
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminGetUserDetails

// optional uint32 account_id = 1;
inline bool CMsgClientToGCShowcaseAdminGetUserDetails::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminGetUserDetails::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgClientToGCShowcaseAdminGetUserDetails::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCShowcaseAdminGetUserDetails::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgClientToGCShowcaseAdminGetUserDetails::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminGetUserDetails.account_id)
  return _internal_account_id();
}
inline void CMsgClientToGCShowcaseAdminGetUserDetails::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgClientToGCShowcaseAdminGetUserDetails::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminGetUserDetails.account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminGetUserDetailsResponse

// optional .CMsgClientToGCShowcaseAdminGetUserDetailsResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseAdminGetUserDetailsResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminGetUserDetailsResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse CMsgClientToGCShowcaseAdminGetUserDetailsResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse CMsgClientToGCShowcaseAdminGetUserDetailsResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminGetUserDetailsResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::_internal_set_response(::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::set_response(::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminGetUserDetailsResponse.response)
}

// optional .CMsgShowcaseAdminUserDetails user_details = 2;
inline bool CMsgClientToGCShowcaseAdminGetUserDetailsResponse::_internal_has_user_details() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_details_ != nullptr);
  return value;
}
inline bool CMsgClientToGCShowcaseAdminGetUserDetailsResponse::has_user_details() const {
  return _internal_has_user_details();
}
inline void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::clear_user_details() {
  if (_impl_.user_details_ != nullptr) _impl_.user_details_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseAdminUserDetails& CMsgClientToGCShowcaseAdminGetUserDetailsResponse::_internal_user_details() const {
  const ::CMsgShowcaseAdminUserDetails* p = _impl_.user_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseAdminUserDetails&>(
      ::_CMsgShowcaseAdminUserDetails_default_instance_);
}
inline const ::CMsgShowcaseAdminUserDetails& CMsgClientToGCShowcaseAdminGetUserDetailsResponse::user_details() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminGetUserDetailsResponse.user_details)
  return _internal_user_details();
}
inline void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::unsafe_arena_set_allocated_user_details(
    ::CMsgShowcaseAdminUserDetails* user_details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_details_);
  }
  _impl_.user_details_ = user_details;
  if (user_details) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCShowcaseAdminGetUserDetailsResponse.user_details)
}
inline ::CMsgShowcaseAdminUserDetails* CMsgClientToGCShowcaseAdminGetUserDetailsResponse::release_user_details() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseAdminUserDetails* temp = _impl_.user_details_;
  _impl_.user_details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseAdminUserDetails* CMsgClientToGCShowcaseAdminGetUserDetailsResponse::unsafe_arena_release_user_details() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCShowcaseAdminGetUserDetailsResponse.user_details)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseAdminUserDetails* temp = _impl_.user_details_;
  _impl_.user_details_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseAdminUserDetails* CMsgClientToGCShowcaseAdminGetUserDetailsResponse::_internal_mutable_user_details() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseAdminUserDetails>(GetArenaForAllocation());
    _impl_.user_details_ = p;
  }
  return _impl_.user_details_;
}
inline ::CMsgShowcaseAdminUserDetails* CMsgClientToGCShowcaseAdminGetUserDetailsResponse::mutable_user_details() {
  ::CMsgShowcaseAdminUserDetails* _msg = _internal_mutable_user_details();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCShowcaseAdminGetUserDetailsResponse.user_details)
  return _msg;
}
inline void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::set_allocated_user_details(::CMsgShowcaseAdminUserDetails* user_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_details_;
  }
  if (user_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_details);
    if (message_arena != submessage_arena) {
      user_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_details, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_details_ = user_details;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCShowcaseAdminGetUserDetailsResponse.user_details)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminReset

// optional uint32 target_account_id = 1;
inline bool CMsgClientToGCShowcaseAdminReset::_internal_has_target_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminReset::has_target_account_id() const {
  return _internal_has_target_account_id();
}
inline void CMsgClientToGCShowcaseAdminReset::clear_target_account_id() {
  _impl_.target_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCShowcaseAdminReset::_internal_target_account_id() const {
  return _impl_.target_account_id_;
}
inline uint32_t CMsgClientToGCShowcaseAdminReset::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminReset.target_account_id)
  return _internal_target_account_id();
}
inline void CMsgClientToGCShowcaseAdminReset::_internal_set_target_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_account_id_ = value;
}
inline void CMsgClientToGCShowcaseAdminReset::set_target_account_id(uint32_t value) {
  _internal_set_target_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminReset.target_account_id)
}

// optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
inline bool CMsgClientToGCShowcaseAdminReset::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminReset::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgClientToGCShowcaseAdminReset::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EShowcaseType CMsgClientToGCShowcaseAdminReset::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgClientToGCShowcaseAdminReset::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminReset.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgClientToGCShowcaseAdminReset::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.showcase_type_ = value;
}
inline void CMsgClientToGCShowcaseAdminReset::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminReset.showcase_type)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminResetResponse

// optional .CMsgClientToGCShowcaseAdminResetResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseAdminResetResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminResetResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseAdminResetResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCShowcaseAdminResetResponse_EResponse CMsgClientToGCShowcaseAdminResetResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseAdminResetResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseAdminResetResponse_EResponse CMsgClientToGCShowcaseAdminResetResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminResetResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseAdminResetResponse::_internal_set_response(::CMsgClientToGCShowcaseAdminResetResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseAdminResetResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseAdminResetResponse::set_response(::CMsgClientToGCShowcaseAdminResetResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminResetResponse.response)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminLockAccount

// optional uint32 target_account_id = 1;
inline bool CMsgClientToGCShowcaseAdminLockAccount::_internal_has_target_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminLockAccount::has_target_account_id() const {
  return _internal_has_target_account_id();
}
inline void CMsgClientToGCShowcaseAdminLockAccount::clear_target_account_id() {
  _impl_.target_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCShowcaseAdminLockAccount::_internal_target_account_id() const {
  return _impl_.target_account_id_;
}
inline uint32_t CMsgClientToGCShowcaseAdminLockAccount::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminLockAccount.target_account_id)
  return _internal_target_account_id();
}
inline void CMsgClientToGCShowcaseAdminLockAccount::_internal_set_target_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_account_id_ = value;
}
inline void CMsgClientToGCShowcaseAdminLockAccount::set_target_account_id(uint32_t value) {
  _internal_set_target_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminLockAccount.target_account_id)
}

// optional uint32 locked_until_timestamp = 2;
inline bool CMsgClientToGCShowcaseAdminLockAccount::_internal_has_locked_until_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminLockAccount::has_locked_until_timestamp() const {
  return _internal_has_locked_until_timestamp();
}
inline void CMsgClientToGCShowcaseAdminLockAccount::clear_locked_until_timestamp() {
  _impl_.locked_until_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCShowcaseAdminLockAccount::_internal_locked_until_timestamp() const {
  return _impl_.locked_until_timestamp_;
}
inline uint32_t CMsgClientToGCShowcaseAdminLockAccount::locked_until_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminLockAccount.locked_until_timestamp)
  return _internal_locked_until_timestamp();
}
inline void CMsgClientToGCShowcaseAdminLockAccount::_internal_set_locked_until_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.locked_until_timestamp_ = value;
}
inline void CMsgClientToGCShowcaseAdminLockAccount::set_locked_until_timestamp(uint32_t value) {
  _internal_set_locked_until_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminLockAccount.locked_until_timestamp)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminLockAccountResponse

// optional .CMsgClientToGCShowcaseAdminLockAccountResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseAdminLockAccountResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminLockAccountResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseAdminLockAccountResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse CMsgClientToGCShowcaseAdminLockAccountResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse CMsgClientToGCShowcaseAdminLockAccountResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminLockAccountResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseAdminLockAccountResponse::_internal_set_response(::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseAdminLockAccountResponse::set_response(::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminLockAccountResponse.response)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminConvict

// optional uint32 target_account_id = 1;
inline bool CMsgClientToGCShowcaseAdminConvict::_internal_has_target_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminConvict::has_target_account_id() const {
  return _internal_has_target_account_id();
}
inline void CMsgClientToGCShowcaseAdminConvict::clear_target_account_id() {
  _impl_.target_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCShowcaseAdminConvict::_internal_target_account_id() const {
  return _impl_.target_account_id_;
}
inline uint32_t CMsgClientToGCShowcaseAdminConvict::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminConvict.target_account_id)
  return _internal_target_account_id();
}
inline void CMsgClientToGCShowcaseAdminConvict::_internal_set_target_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_account_id_ = value;
}
inline void CMsgClientToGCShowcaseAdminConvict::set_target_account_id(uint32_t value) {
  _internal_set_target_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminConvict.target_account_id)
}

// optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
inline bool CMsgClientToGCShowcaseAdminConvict::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminConvict::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgClientToGCShowcaseAdminConvict::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EShowcaseType CMsgClientToGCShowcaseAdminConvict::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgClientToGCShowcaseAdminConvict::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminConvict.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgClientToGCShowcaseAdminConvict::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.showcase_type_ = value;
}
inline void CMsgClientToGCShowcaseAdminConvict::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminConvict.showcase_type)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminConvictResponse

// optional .CMsgClientToGCShowcaseAdminConvictResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseAdminConvictResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminConvictResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseAdminConvictResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseAdminConvictResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminConvictResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseAdminConvictResponse::_internal_set_response(::CMsgClientToGCShowcaseAdminConvictResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseAdminConvictResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseAdminConvictResponse::set_response(::CMsgClientToGCShowcaseAdminConvictResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminConvictResponse.response)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminExonerate

// optional uint32 target_account_id = 1;
inline bool CMsgClientToGCShowcaseAdminExonerate::_internal_has_target_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminExonerate::has_target_account_id() const {
  return _internal_has_target_account_id();
}
inline void CMsgClientToGCShowcaseAdminExonerate::clear_target_account_id() {
  _impl_.target_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCShowcaseAdminExonerate::_internal_target_account_id() const {
  return _impl_.target_account_id_;
}
inline uint32_t CMsgClientToGCShowcaseAdminExonerate::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminExonerate.target_account_id)
  return _internal_target_account_id();
}
inline void CMsgClientToGCShowcaseAdminExonerate::_internal_set_target_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_account_id_ = value;
}
inline void CMsgClientToGCShowcaseAdminExonerate::set_target_account_id(uint32_t value) {
  _internal_set_target_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminExonerate.target_account_id)
}

// optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
inline bool CMsgClientToGCShowcaseAdminExonerate::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminExonerate::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgClientToGCShowcaseAdminExonerate::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EShowcaseType CMsgClientToGCShowcaseAdminExonerate::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgClientToGCShowcaseAdminExonerate::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminExonerate.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgClientToGCShowcaseAdminExonerate::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.showcase_type_ = value;
}
inline void CMsgClientToGCShowcaseAdminExonerate::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminExonerate.showcase_type)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseAdminExonerateResponse

// optional .CMsgClientToGCShowcaseAdminExonerateResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseAdminExonerateResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseAdminExonerateResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseAdminExonerateResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseAdminExonerateResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseAdminExonerateResponse::_internal_set_response(::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseAdminExonerateResponse::set_response(::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseAdminExonerateResponse.response)
}

// -------------------------------------------------------------------

// CMsgShowcaseModerationInfo

// optional uint32 account_id = 1;
inline bool CMsgShowcaseModerationInfo::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseModerationInfo::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgShowcaseModerationInfo::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgShowcaseModerationInfo::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgShowcaseModerationInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseModerationInfo.account_id)
  return _internal_account_id();
}
inline void CMsgShowcaseModerationInfo::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgShowcaseModerationInfo::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseModerationInfo.account_id)
}

// optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
inline bool CMsgShowcaseModerationInfo::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseModerationInfo::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgShowcaseModerationInfo::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EShowcaseType CMsgShowcaseModerationInfo::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgShowcaseModerationInfo::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseModerationInfo.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgShowcaseModerationInfo::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.showcase_type_ = value;
}
inline void CMsgShowcaseModerationInfo::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseModerationInfo.showcase_type)
}

// optional uint32 showcase_timestamp = 3;
inline bool CMsgShowcaseModerationInfo::_internal_has_showcase_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseModerationInfo::has_showcase_timestamp() const {
  return _internal_has_showcase_timestamp();
}
inline void CMsgShowcaseModerationInfo::clear_showcase_timestamp() {
  _impl_.showcase_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseModerationInfo::_internal_showcase_timestamp() const {
  return _impl_.showcase_timestamp_;
}
inline uint32_t CMsgShowcaseModerationInfo::showcase_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseModerationInfo.showcase_timestamp)
  return _internal_showcase_timestamp();
}
inline void CMsgShowcaseModerationInfo::_internal_set_showcase_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.showcase_timestamp_ = value;
}
inline void CMsgShowcaseModerationInfo::set_showcase_timestamp(uint32_t value) {
  _internal_set_showcase_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseModerationInfo.showcase_timestamp)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseModerationGetQueue

// optional uint32 start_timestamp = 1;
inline bool CMsgClientToGCShowcaseModerationGetQueue::_internal_has_start_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseModerationGetQueue::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void CMsgClientToGCShowcaseModerationGetQueue::clear_start_timestamp() {
  _impl_.start_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCShowcaseModerationGetQueue::_internal_start_timestamp() const {
  return _impl_.start_timestamp_;
}
inline uint32_t CMsgClientToGCShowcaseModerationGetQueue::start_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseModerationGetQueue.start_timestamp)
  return _internal_start_timestamp();
}
inline void CMsgClientToGCShowcaseModerationGetQueue::_internal_set_start_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_timestamp_ = value;
}
inline void CMsgClientToGCShowcaseModerationGetQueue::set_start_timestamp(uint32_t value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseModerationGetQueue.start_timestamp)
}

// optional uint32 result_count = 2;
inline bool CMsgClientToGCShowcaseModerationGetQueue::_internal_has_result_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseModerationGetQueue::has_result_count() const {
  return _internal_has_result_count();
}
inline void CMsgClientToGCShowcaseModerationGetQueue::clear_result_count() {
  _impl_.result_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCShowcaseModerationGetQueue::_internal_result_count() const {
  return _impl_.result_count_;
}
inline uint32_t CMsgClientToGCShowcaseModerationGetQueue::result_count() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseModerationGetQueue.result_count)
  return _internal_result_count();
}
inline void CMsgClientToGCShowcaseModerationGetQueue::_internal_set_result_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.result_count_ = value;
}
inline void CMsgClientToGCShowcaseModerationGetQueue::set_result_count(uint32_t value) {
  _internal_set_result_count(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseModerationGetQueue.result_count)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseModerationGetQueueResponse

// optional .CMsgClientToGCShowcaseModerationGetQueueResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseModerationGetQueueResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseModerationGetQueueResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseModerationGetQueueResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse CMsgClientToGCShowcaseModerationGetQueueResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse CMsgClientToGCShowcaseModerationGetQueueResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseModerationGetQueueResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseModerationGetQueueResponse::_internal_set_response(::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseModerationGetQueueResponse::set_response(::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseModerationGetQueueResponse.response)
}

// repeated .CMsgShowcaseModerationInfo showcases = 2;
inline int CMsgClientToGCShowcaseModerationGetQueueResponse::_internal_showcases_size() const {
  return _impl_.showcases_.size();
}
inline int CMsgClientToGCShowcaseModerationGetQueueResponse::showcases_size() const {
  return _internal_showcases_size();
}
inline void CMsgClientToGCShowcaseModerationGetQueueResponse::clear_showcases() {
  _impl_.showcases_.Clear();
}
inline ::CMsgShowcaseModerationInfo* CMsgClientToGCShowcaseModerationGetQueueResponse::mutable_showcases(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCShowcaseModerationGetQueueResponse.showcases)
  return _impl_.showcases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseModerationInfo >*
CMsgClientToGCShowcaseModerationGetQueueResponse::mutable_showcases() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCShowcaseModerationGetQueueResponse.showcases)
  return &_impl_.showcases_;
}
inline const ::CMsgShowcaseModerationInfo& CMsgClientToGCShowcaseModerationGetQueueResponse::_internal_showcases(int index) const {
  return _impl_.showcases_.Get(index);
}
inline const ::CMsgShowcaseModerationInfo& CMsgClientToGCShowcaseModerationGetQueueResponse::showcases(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseModerationGetQueueResponse.showcases)
  return _internal_showcases(index);
}
inline ::CMsgShowcaseModerationInfo* CMsgClientToGCShowcaseModerationGetQueueResponse::_internal_add_showcases() {
  return _impl_.showcases_.Add();
}
inline ::CMsgShowcaseModerationInfo* CMsgClientToGCShowcaseModerationGetQueueResponse::add_showcases() {
  ::CMsgShowcaseModerationInfo* _add = _internal_add_showcases();
  // @@protoc_insertion_point(field_add:CMsgClientToGCShowcaseModerationGetQueueResponse.showcases)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseModerationInfo >&
CMsgClientToGCShowcaseModerationGetQueueResponse::showcases() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCShowcaseModerationGetQueueResponse.showcases)
  return _impl_.showcases_;
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseModerationApplyModeration

// optional uint32 account_id = 1;
inline bool CMsgClientToGCShowcaseModerationApplyModeration::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseModerationApplyModeration::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgClientToGCShowcaseModerationApplyModeration::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCShowcaseModerationApplyModeration::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgClientToGCShowcaseModerationApplyModeration::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseModerationApplyModeration.account_id)
  return _internal_account_id();
}
inline void CMsgClientToGCShowcaseModerationApplyModeration::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgClientToGCShowcaseModerationApplyModeration::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseModerationApplyModeration.account_id)
}

// optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
inline bool CMsgClientToGCShowcaseModerationApplyModeration::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseModerationApplyModeration::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgClientToGCShowcaseModerationApplyModeration::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EShowcaseType CMsgClientToGCShowcaseModerationApplyModeration::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgClientToGCShowcaseModerationApplyModeration::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseModerationApplyModeration.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgClientToGCShowcaseModerationApplyModeration::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.showcase_type_ = value;
}
inline void CMsgClientToGCShowcaseModerationApplyModeration::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseModerationApplyModeration.showcase_type)
}

// optional uint32 showcase_timestamp = 3;
inline bool CMsgClientToGCShowcaseModerationApplyModeration::_internal_has_showcase_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseModerationApplyModeration::has_showcase_timestamp() const {
  return _internal_has_showcase_timestamp();
}
inline void CMsgClientToGCShowcaseModerationApplyModeration::clear_showcase_timestamp() {
  _impl_.showcase_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCShowcaseModerationApplyModeration::_internal_showcase_timestamp() const {
  return _impl_.showcase_timestamp_;
}
inline uint32_t CMsgClientToGCShowcaseModerationApplyModeration::showcase_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseModerationApplyModeration.showcase_timestamp)
  return _internal_showcase_timestamp();
}
inline void CMsgClientToGCShowcaseModerationApplyModeration::_internal_set_showcase_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.showcase_timestamp_ = value;
}
inline void CMsgClientToGCShowcaseModerationApplyModeration::set_showcase_timestamp(uint32_t value) {
  _internal_set_showcase_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseModerationApplyModeration.showcase_timestamp)
}

// optional bool approve = 4;
inline bool CMsgClientToGCShowcaseModerationApplyModeration::_internal_has_approve() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseModerationApplyModeration::has_approve() const {
  return _internal_has_approve();
}
inline void CMsgClientToGCShowcaseModerationApplyModeration::clear_approve() {
  _impl_.approve_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgClientToGCShowcaseModerationApplyModeration::_internal_approve() const {
  return _impl_.approve_;
}
inline bool CMsgClientToGCShowcaseModerationApplyModeration::approve() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseModerationApplyModeration.approve)
  return _internal_approve();
}
inline void CMsgClientToGCShowcaseModerationApplyModeration::_internal_set_approve(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.approve_ = value;
}
inline void CMsgClientToGCShowcaseModerationApplyModeration::set_approve(bool value) {
  _internal_set_approve(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseModerationApplyModeration.approve)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseModerationApplyModerationResponse

// optional .CMsgClientToGCShowcaseModerationApplyModerationResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseModerationApplyModerationResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseModerationApplyModerationResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseModerationApplyModerationResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseModerationApplyModerationResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseModerationApplyModerationResponse::_internal_set_response(::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseModerationApplyModerationResponse::set_response(::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseModerationApplyModerationResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome>() {
  return ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_descriptor();
}
template <> struct is_proto_enum< ::CMsgShowcase_EModerationState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgShowcase_EModerationState>() {
  return ::CMsgShowcase_EModerationState_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseSubmitReportResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseSubmitReportResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseSubmitReportResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseAdminResetResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseAdminResetResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseAdminResetResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseAdminConvictResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseAdminConvictResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseAdminConvictResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::EShowcaseHeroPlusFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EShowcaseHeroPlusFlag>() {
  return ::EShowcaseHeroPlusFlag_descriptor();
}
template <> struct is_proto_enum< ::EShowcaseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EShowcaseType>() {
  return ::EShowcaseType_descriptor();
}
template <> struct is_proto_enum< ::EShowcaseItemState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EShowcaseItemState>() {
  return ::EShowcaseItemState_descriptor();
}
template <> struct is_proto_enum< ::EShowcaseAuditAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EShowcaseAuditAction>() {
  return ::EShowcaseAuditAction_descriptor();
}
template <> struct is_proto_enum< ::EShowcaseItemFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EShowcaseItemFlag>() {
  return ::EShowcaseItemFlag_descriptor();
}
template <> struct is_proto_enum< ::EShowcaseItemFlag_Hero> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EShowcaseItemFlag_Hero>() {
  return ::EShowcaseItemFlag_Hero_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fshowcase_2eproto
