// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_fighting_game_p2p_messages.proto

#include "dota_fighting_game_p2p_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_Fighting_InputSample::CMsgFightingGame_GameData_Fighting_InputSample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.button_mask_)*/0u} {}
struct CMsgFightingGame_GameData_Fighting_InputSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_Fighting_InputSampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgFightingGame_GameData_Fighting_InputSampleDefaultTypeInternal() {}
  union {
    CMsgFightingGame_GameData_Fighting_InputSample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgFightingGame_GameData_Fighting_InputSampleDefaultTypeInternal _CMsgFightingGame_GameData_Fighting_InputSample_default_instance_;
PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_Fighting::CMsgFightingGame_GameData_Fighting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_sample_)*/{}
  , /*decltype(_impl_.last_acked_frame_)*/0
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.last_crc_frame_)*/0
  , /*decltype(_impl_.last_crc_value_)*/0u
  , /*decltype(_impl_.now_)*/0
  , /*decltype(_impl_.peer_ack_time_)*/0
  , /*decltype(_impl_.input_start_frame_)*/0} {}
struct CMsgFightingGame_GameData_FightingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_FightingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgFightingGame_GameData_FightingDefaultTypeInternal() {}
  union {
    CMsgFightingGame_GameData_Fighting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgFightingGame_GameData_FightingDefaultTypeInternal _CMsgFightingGame_GameData_Fighting_default_instance_;
PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_CharacterSelect_Item::CMsgFightingGame_GameData_CharacterSelect_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_def_)*/0u
  , /*decltype(_impl_.style_index_)*/255u} {}
struct CMsgFightingGame_GameData_CharacterSelect_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_CharacterSelect_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgFightingGame_GameData_CharacterSelect_ItemDefaultTypeInternal() {}
  union {
    CMsgFightingGame_GameData_CharacterSelect_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgFightingGame_GameData_CharacterSelect_ItemDefaultTypeInternal _CMsgFightingGame_GameData_CharacterSelect_Item_default_instance_;
PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_CharacterSelect::CMsgFightingGame_GameData_CharacterSelect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.econ_item_refs_)*/{}
  , /*decltype(_impl_.cursor_index_)*/0u
  , /*decltype(_impl_.selected_hero_id_)*/0
  , /*decltype(_impl_.selected_style_)*/0u
  , /*decltype(_impl_.confirmed_style_)*/false
  , /*decltype(_impl_.message_ack_)*/int64_t{0}} {}
struct CMsgFightingGame_GameData_CharacterSelectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_CharacterSelectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgFightingGame_GameData_CharacterSelectDefaultTypeInternal() {}
  union {
    CMsgFightingGame_GameData_CharacterSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgFightingGame_GameData_CharacterSelectDefaultTypeInternal _CMsgFightingGame_GameData_CharacterSelect_default_instance_;
PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_Loaded::CMsgFightingGame_GameData_Loaded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.now_)*/0
  , /*decltype(_impl_.peer_ack_time_)*/0
  , /*decltype(_impl_.proposed_start_time_)*/0
  , /*decltype(_impl_.accepted_start_time_)*/0} {}
struct CMsgFightingGame_GameData_LoadedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_LoadedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgFightingGame_GameData_LoadedDefaultTypeInternal() {}
  union {
    CMsgFightingGame_GameData_Loaded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgFightingGame_GameData_LoadedDefaultTypeInternal _CMsgFightingGame_GameData_Loaded_default_instance_;
PROTOBUF_CONSTEXPR CP2P_FightingGame_GameData::CP2P_FightingGame_GameData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_)*/1
  , /*decltype(_impl_.state_data_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CP2P_FightingGame_GameDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CP2P_FightingGame_GameDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CP2P_FightingGame_GameDataDefaultTypeInternal() {}
  union {
    CP2P_FightingGame_GameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CP2P_FightingGame_GameDataDefaultTypeInternal _CP2P_FightingGame_GameData_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto = nullptr;

const uint32_t TableStruct_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting_InputSample, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting_InputSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting_InputSample, _impl_.button_mask_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting, _impl_.last_acked_frame_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting, _impl_.last_crc_frame_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting, _impl_.last_crc_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting, _impl_.now_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting, _impl_.peer_ack_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting, _impl_.input_start_frame_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Fighting, _impl_.input_sample_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_CharacterSelect_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_CharacterSelect_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_CharacterSelect_Item, _impl_.item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_CharacterSelect_Item, _impl_.style_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_CharacterSelect, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_CharacterSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_CharacterSelect, _impl_.cursor_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_CharacterSelect, _impl_.selected_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_CharacterSelect, _impl_.selected_style_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_CharacterSelect, _impl_.econ_item_refs_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_CharacterSelect, _impl_.message_ack_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_CharacterSelect, _impl_.confirmed_style_),
  0,
  1,
  2,
  ~0u,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Loaded, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Loaded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Loaded, _impl_.now_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Loaded, _impl_.peer_ack_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Loaded, _impl_.proposed_start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgFightingGame_GameData_Loaded, _impl_.accepted_start_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CP2P_FightingGame_GameData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_FightingGame_GameData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CP2P_FightingGame_GameData, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CP2P_FightingGame_GameData, _impl_.state_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CP2P_FightingGame_GameData, _impl_.state_data_),
  0,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::CMsgFightingGame_GameData_Fighting_InputSample)},
  { 8, 22, -1, sizeof(::CMsgFightingGame_GameData_Fighting)},
  { 30, 38, -1, sizeof(::CMsgFightingGame_GameData_CharacterSelect_Item)},
  { 40, 52, -1, sizeof(::CMsgFightingGame_GameData_CharacterSelect)},
  { 58, 68, -1, sizeof(::CMsgFightingGame_GameData_Loaded)},
  { 72, 83, -1, sizeof(::CP2P_FightingGame_GameData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgFightingGame_GameData_Fighting_InputSample_default_instance_._instance,
  &::_CMsgFightingGame_GameData_Fighting_default_instance_._instance,
  &::_CMsgFightingGame_GameData_CharacterSelect_Item_default_instance_._instance,
  &::_CMsgFightingGame_GameData_CharacterSelect_default_instance_._instance,
  &::_CMsgFightingGame_GameData_Loaded_default_instance_._instance,
  &::_CP2P_FightingGame_GameData_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%dota_fighting_game_p2p_messages.proto\032"
  "\021netmessages.proto\032\026networkbasetypes.pro"
  "to\"\253\002\n\"CMsgFightingGame_GameData_Fightin"
  "g\022\030\n\020last_acked_frame\030\001 \001(\005\022\021\n\tplayer_id"
  "\030\002 \001(\r\022\026\n\016last_crc_frame\030\003 \001(\005\022\026\n\016last_c"
  "rc_value\030\004 \001(\r\022\013\n\003now\030\005 \001(\002\022\025\n\rpeer_ack_"
  "time\030\006 \001(\002\022\031\n\021input_start_frame\030\007 \001(\005\022E\n"
  "\014input_sample\030\010 \003(\0132/.CMsgFightingGame_G"
  "ameData_Fighting.InputSample\032\"\n\013InputSam"
  "ple\022\023\n\013button_mask\030\001 \001(\r\"\236\002\n)CMsgFightin"
  "gGame_GameData_CharacterSelect\022\024\n\014cursor"
  "_index\030\001 \001(\r\022\030\n\020selected_hero_id\030\002 \001(\005\022\026"
  "\n\016selected_style\030\003 \001(\r\022G\n\016econ_item_refs"
  "\030\004 \003(\0132/.CMsgFightingGame_GameData_Chara"
  "cterSelect.Item\022\023\n\013message_ack\030\005 \001(\003\022\027\n\017"
  "confirmed_style\030\006 \001(\010\0322\n\004Item\022\020\n\010item_de"
  "f\030\001 \001(\r\022\030\n\013style_index\030\002 \001(\r:\003255\"\200\001\n CM"
  "sgFightingGame_GameData_Loaded\022\013\n\003now\030\001 "
  "\001(\002\022\025\n\rpeer_ack_time\030\002 \001(\002\022\033\n\023proposed_s"
  "tart_time\030\003 \001(\002\022\033\n\023accepted_start_time\030\004"
  " \001(\002\"\346\002\n\032CP2P_FightingGame_GameData\022F\n\005s"
  "tate\030\001 \001(\0162\".CP2P_FightingGame_GameData."
  "EState:\023k_ChoosingCharacter\0224\n\005fight\030\002 \001"
  "(\0132#.CMsgFightingGame_GameData_FightingH"
  "\000\022F\n\020character_select\030\003 \001(\0132*.CMsgFighti"
  "ngGame_GameData_CharacterSelectH\000\0223\n\006loa"
  "ded\030\004 \001(\0132!.CMsgFightingGame_GameData_Lo"
  "adedH\000\"\?\n\006EState\022\027\n\023k_ChoosingCharacter\020"
  "\001\022\014\n\010k_Loaded\020\002\022\016\n\nk_Fighting\020\003B\014\n\nstate"
  "_data"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_deps[2] = {
  &::descriptor_table_netmessages_2eproto,
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto = {
    false, false, 1165, descriptor_table_protodef_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto,
    "dota_fighting_game_p2p_messages.proto",
    &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_once, descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto::offsets,
    file_level_metadata_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto, file_level_enum_descriptors_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto,
    file_level_service_descriptors_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_getter() {
  return &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto(&descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CP2P_FightingGame_GameData_EState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto);
  return file_level_enum_descriptors_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto[0];
}
bool CP2P_FightingGame_GameData_EState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CP2P_FightingGame_GameData_EState CP2P_FightingGame_GameData::k_ChoosingCharacter;
constexpr CP2P_FightingGame_GameData_EState CP2P_FightingGame_GameData::k_Loaded;
constexpr CP2P_FightingGame_GameData_EState CP2P_FightingGame_GameData::k_Fighting;
constexpr CP2P_FightingGame_GameData_EState CP2P_FightingGame_GameData::EState_MIN;
constexpr CP2P_FightingGame_GameData_EState CP2P_FightingGame_GameData::EState_MAX;
constexpr int CP2P_FightingGame_GameData::EState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CMsgFightingGame_GameData_Fighting_InputSample::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFightingGame_GameData_Fighting_InputSample>()._impl_._has_bits_);
  static void set_has_button_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgFightingGame_GameData_Fighting_InputSample::CMsgFightingGame_GameData_Fighting_InputSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgFightingGame_GameData_Fighting.InputSample)
}
CMsgFightingGame_GameData_Fighting_InputSample::CMsgFightingGame_GameData_Fighting_InputSample(const CMsgFightingGame_GameData_Fighting_InputSample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgFightingGame_GameData_Fighting_InputSample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.button_mask_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.button_mask_ = from._impl_.button_mask_;
  // @@protoc_insertion_point(copy_constructor:CMsgFightingGame_GameData_Fighting.InputSample)
}

inline void CMsgFightingGame_GameData_Fighting_InputSample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.button_mask_){0u}
  };
}

CMsgFightingGame_GameData_Fighting_InputSample::~CMsgFightingGame_GameData_Fighting_InputSample() {
  // @@protoc_insertion_point(destructor:CMsgFightingGame_GameData_Fighting.InputSample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgFightingGame_GameData_Fighting_InputSample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgFightingGame_GameData_Fighting_InputSample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgFightingGame_GameData_Fighting_InputSample::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFightingGame_GameData_Fighting.InputSample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.button_mask_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFightingGame_GameData_Fighting_InputSample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 button_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_button_mask(&has_bits);
          _impl_.button_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFightingGame_GameData_Fighting_InputSample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFightingGame_GameData_Fighting.InputSample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 button_mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_button_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFightingGame_GameData_Fighting.InputSample)
  return target;
}

size_t CMsgFightingGame_GameData_Fighting_InputSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFightingGame_GameData_Fighting.InputSample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 button_mask = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_button_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFightingGame_GameData_Fighting_InputSample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgFightingGame_GameData_Fighting_InputSample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFightingGame_GameData_Fighting_InputSample::GetClassData() const { return &_class_data_; }


void CMsgFightingGame_GameData_Fighting_InputSample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgFightingGame_GameData_Fighting_InputSample*>(&to_msg);
  auto& from = static_cast<const CMsgFightingGame_GameData_Fighting_InputSample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgFightingGame_GameData_Fighting.InputSample)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_button_mask()) {
    _this->_internal_set_button_mask(from._internal_button_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFightingGame_GameData_Fighting_InputSample::CopyFrom(const CMsgFightingGame_GameData_Fighting_InputSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFightingGame_GameData_Fighting.InputSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFightingGame_GameData_Fighting_InputSample::IsInitialized() const {
  return true;
}

void CMsgFightingGame_GameData_Fighting_InputSample::InternalSwap(CMsgFightingGame_GameData_Fighting_InputSample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.button_mask_, other->_impl_.button_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFightingGame_GameData_Fighting_InputSample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_getter, &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_once,
      file_level_metadata_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto[0]);
}

// ===================================================================

class CMsgFightingGame_GameData_Fighting::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFightingGame_GameData_Fighting>()._impl_._has_bits_);
  static void set_has_last_acked_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_crc_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_crc_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_now(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_peer_ack_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_input_start_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgFightingGame_GameData_Fighting::CMsgFightingGame_GameData_Fighting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgFightingGame_GameData_Fighting)
}
CMsgFightingGame_GameData_Fighting::CMsgFightingGame_GameData_Fighting(const CMsgFightingGame_GameData_Fighting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgFightingGame_GameData_Fighting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_sample_){from._impl_.input_sample_}
    , decltype(_impl_.last_acked_frame_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.last_crc_frame_){}
    , decltype(_impl_.last_crc_value_){}
    , decltype(_impl_.now_){}
    , decltype(_impl_.peer_ack_time_){}
    , decltype(_impl_.input_start_frame_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.last_acked_frame_, &from._impl_.last_acked_frame_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.input_start_frame_) -
    reinterpret_cast<char*>(&_impl_.last_acked_frame_)) + sizeof(_impl_.input_start_frame_));
  // @@protoc_insertion_point(copy_constructor:CMsgFightingGame_GameData_Fighting)
}

inline void CMsgFightingGame_GameData_Fighting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_sample_){arena}
    , decltype(_impl_.last_acked_frame_){0}
    , decltype(_impl_.player_id_){0u}
    , decltype(_impl_.last_crc_frame_){0}
    , decltype(_impl_.last_crc_value_){0u}
    , decltype(_impl_.now_){0}
    , decltype(_impl_.peer_ack_time_){0}
    , decltype(_impl_.input_start_frame_){0}
  };
}

CMsgFightingGame_GameData_Fighting::~CMsgFightingGame_GameData_Fighting() {
  // @@protoc_insertion_point(destructor:CMsgFightingGame_GameData_Fighting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgFightingGame_GameData_Fighting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_sample_.~RepeatedPtrField();
}

void CMsgFightingGame_GameData_Fighting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgFightingGame_GameData_Fighting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFightingGame_GameData_Fighting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_sample_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.last_acked_frame_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.input_start_frame_) -
        reinterpret_cast<char*>(&_impl_.last_acked_frame_)) + sizeof(_impl_.input_start_frame_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFightingGame_GameData_Fighting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 last_acked_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_last_acked_frame(&has_bits);
          _impl_.last_acked_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_crc_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_crc_frame(&has_bits);
          _impl_.last_crc_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_crc_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_last_crc_value(&has_bits);
          _impl_.last_crc_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float now = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_now(&has_bits);
          _impl_.now_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float peer_ack_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_peer_ack_time(&has_bits);
          _impl_.peer_ack_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 input_start_frame = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_input_start_frame(&has_bits);
          _impl_.input_start_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgFightingGame_GameData_Fighting.InputSample input_sample = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFightingGame_GameData_Fighting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFightingGame_GameData_Fighting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 last_acked_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_last_acked_frame(), target);
  }

  // optional uint32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id(), target);
  }

  // optional int32 last_crc_frame = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_last_crc_frame(), target);
  }

  // optional uint32 last_crc_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_crc_value(), target);
  }

  // optional float now = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_now(), target);
  }

  // optional float peer_ack_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_peer_ack_time(), target);
  }

  // optional int32 input_start_frame = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_input_start_frame(), target);
  }

  // repeated .CMsgFightingGame_GameData_Fighting.InputSample input_sample = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_input_sample_size()); i < n; i++) {
    const auto& repfield = this->_internal_input_sample(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFightingGame_GameData_Fighting)
  return target;
}

size_t CMsgFightingGame_GameData_Fighting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFightingGame_GameData_Fighting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgFightingGame_GameData_Fighting.InputSample input_sample = 8;
  total_size += 1UL * this->_internal_input_sample_size();
  for (const auto& msg : this->_impl_.input_sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 last_acked_frame = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_acked_frame());
    }

    // optional uint32 player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
    }

    // optional int32 last_crc_frame = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_crc_frame());
    }

    // optional uint32 last_crc_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_crc_value());
    }

    // optional float now = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float peer_ack_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 input_start_frame = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_input_start_frame());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFightingGame_GameData_Fighting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgFightingGame_GameData_Fighting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFightingGame_GameData_Fighting::GetClassData() const { return &_class_data_; }


void CMsgFightingGame_GameData_Fighting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgFightingGame_GameData_Fighting*>(&to_msg);
  auto& from = static_cast<const CMsgFightingGame_GameData_Fighting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgFightingGame_GameData_Fighting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_sample_.MergeFrom(from._impl_.input_sample_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.last_acked_frame_ = from._impl_.last_acked_frame_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.last_crc_frame_ = from._impl_.last_crc_frame_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.last_crc_value_ = from._impl_.last_crc_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.now_ = from._impl_.now_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.peer_ack_time_ = from._impl_.peer_ack_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.input_start_frame_ = from._impl_.input_start_frame_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFightingGame_GameData_Fighting::CopyFrom(const CMsgFightingGame_GameData_Fighting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFightingGame_GameData_Fighting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFightingGame_GameData_Fighting::IsInitialized() const {
  return true;
}

void CMsgFightingGame_GameData_Fighting::InternalSwap(CMsgFightingGame_GameData_Fighting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.input_sample_.InternalSwap(&other->_impl_.input_sample_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgFightingGame_GameData_Fighting, _impl_.input_start_frame_)
      + sizeof(CMsgFightingGame_GameData_Fighting::_impl_.input_start_frame_)
      - PROTOBUF_FIELD_OFFSET(CMsgFightingGame_GameData_Fighting, _impl_.last_acked_frame_)>(
          reinterpret_cast<char*>(&_impl_.last_acked_frame_),
          reinterpret_cast<char*>(&other->_impl_.last_acked_frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFightingGame_GameData_Fighting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_getter, &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_once,
      file_level_metadata_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto[1]);
}

// ===================================================================

class CMsgFightingGame_GameData_CharacterSelect_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFightingGame_GameData_CharacterSelect_Item>()._impl_._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgFightingGame_GameData_CharacterSelect_Item::CMsgFightingGame_GameData_CharacterSelect_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgFightingGame_GameData_CharacterSelect.Item)
}
CMsgFightingGame_GameData_CharacterSelect_Item::CMsgFightingGame_GameData_CharacterSelect_Item(const CMsgFightingGame_GameData_CharacterSelect_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgFightingGame_GameData_CharacterSelect_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_){}
    , decltype(_impl_.style_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_def_, &from._impl_.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.style_index_) -
    reinterpret_cast<char*>(&_impl_.item_def_)) + sizeof(_impl_.style_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgFightingGame_GameData_CharacterSelect.Item)
}

inline void CMsgFightingGame_GameData_CharacterSelect_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_){0u}
    , decltype(_impl_.style_index_){255u}
  };
}

CMsgFightingGame_GameData_CharacterSelect_Item::~CMsgFightingGame_GameData_CharacterSelect_Item() {
  // @@protoc_insertion_point(destructor:CMsgFightingGame_GameData_CharacterSelect.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgFightingGame_GameData_CharacterSelect_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgFightingGame_GameData_CharacterSelect_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgFightingGame_GameData_CharacterSelect_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFightingGame_GameData_CharacterSelect.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.item_def_ = 0u;
    _impl_.style_index_ = 255u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFightingGame_GameData_CharacterSelect_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          _impl_.item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 style_index = 2 [default = 255];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_style_index(&has_bits);
          _impl_.style_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFightingGame_GameData_CharacterSelect_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFightingGame_GameData_CharacterSelect.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // optional uint32 style_index = 2 [default = 255];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_style_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFightingGame_GameData_CharacterSelect.Item)
  return target;
}

size_t CMsgFightingGame_GameData_CharacterSelect_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFightingGame_GameData_CharacterSelect.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def());
    }

    // optional uint32 style_index = 2 [default = 255];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFightingGame_GameData_CharacterSelect_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgFightingGame_GameData_CharacterSelect_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFightingGame_GameData_CharacterSelect_Item::GetClassData() const { return &_class_data_; }


void CMsgFightingGame_GameData_CharacterSelect_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgFightingGame_GameData_CharacterSelect_Item*>(&to_msg);
  auto& from = static_cast<const CMsgFightingGame_GameData_CharacterSelect_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgFightingGame_GameData_CharacterSelect.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_def_ = from._impl_.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.style_index_ = from._impl_.style_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFightingGame_GameData_CharacterSelect_Item::CopyFrom(const CMsgFightingGame_GameData_CharacterSelect_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFightingGame_GameData_CharacterSelect.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFightingGame_GameData_CharacterSelect_Item::IsInitialized() const {
  return true;
}

void CMsgFightingGame_GameData_CharacterSelect_Item::InternalSwap(CMsgFightingGame_GameData_CharacterSelect_Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.item_def_, other->_impl_.item_def_);
  swap(_impl_.style_index_, other->_impl_.style_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFightingGame_GameData_CharacterSelect_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_getter, &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_once,
      file_level_metadata_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto[2]);
}

// ===================================================================

class CMsgFightingGame_GameData_CharacterSelect::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFightingGame_GameData_CharacterSelect>()._impl_._has_bits_);
  static void set_has_cursor_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selected_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_selected_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_confirmed_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgFightingGame_GameData_CharacterSelect::CMsgFightingGame_GameData_CharacterSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgFightingGame_GameData_CharacterSelect)
}
CMsgFightingGame_GameData_CharacterSelect::CMsgFightingGame_GameData_CharacterSelect(const CMsgFightingGame_GameData_CharacterSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgFightingGame_GameData_CharacterSelect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_item_refs_){from._impl_.econ_item_refs_}
    , decltype(_impl_.cursor_index_){}
    , decltype(_impl_.selected_hero_id_){}
    , decltype(_impl_.selected_style_){}
    , decltype(_impl_.confirmed_style_){}
    , decltype(_impl_.message_ack_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cursor_index_, &from._impl_.cursor_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_ack_) -
    reinterpret_cast<char*>(&_impl_.cursor_index_)) + sizeof(_impl_.message_ack_));
  // @@protoc_insertion_point(copy_constructor:CMsgFightingGame_GameData_CharacterSelect)
}

inline void CMsgFightingGame_GameData_CharacterSelect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_item_refs_){arena}
    , decltype(_impl_.cursor_index_){0u}
    , decltype(_impl_.selected_hero_id_){0}
    , decltype(_impl_.selected_style_){0u}
    , decltype(_impl_.confirmed_style_){false}
    , decltype(_impl_.message_ack_){int64_t{0}}
  };
}

CMsgFightingGame_GameData_CharacterSelect::~CMsgFightingGame_GameData_CharacterSelect() {
  // @@protoc_insertion_point(destructor:CMsgFightingGame_GameData_CharacterSelect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgFightingGame_GameData_CharacterSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.econ_item_refs_.~RepeatedPtrField();
}

void CMsgFightingGame_GameData_CharacterSelect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgFightingGame_GameData_CharacterSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFightingGame_GameData_CharacterSelect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.econ_item_refs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.cursor_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.message_ack_) -
        reinterpret_cast<char*>(&_impl_.cursor_index_)) + sizeof(_impl_.message_ack_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFightingGame_GameData_CharacterSelect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cursor_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cursor_index(&has_bits);
          _impl_.cursor_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 selected_hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_selected_hero_id(&has_bits);
          _impl_.selected_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 selected_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_selected_style(&has_bits);
          _impl_.selected_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgFightingGame_GameData_CharacterSelect.Item econ_item_refs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_econ_item_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 message_ack = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_message_ack(&has_bits);
          _impl_.message_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool confirmed_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_confirmed_style(&has_bits);
          _impl_.confirmed_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFightingGame_GameData_CharacterSelect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFightingGame_GameData_CharacterSelect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cursor_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cursor_index(), target);
  }

  // optional int32 selected_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_selected_hero_id(), target);
  }

  // optional uint32 selected_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_selected_style(), target);
  }

  // repeated .CMsgFightingGame_GameData_CharacterSelect.Item econ_item_refs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_econ_item_refs_size()); i < n; i++) {
    const auto& repfield = this->_internal_econ_item_refs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 message_ack = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_message_ack(), target);
  }

  // optional bool confirmed_style = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_confirmed_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFightingGame_GameData_CharacterSelect)
  return target;
}

size_t CMsgFightingGame_GameData_CharacterSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFightingGame_GameData_CharacterSelect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgFightingGame_GameData_CharacterSelect.Item econ_item_refs = 4;
  total_size += 1UL * this->_internal_econ_item_refs_size();
  for (const auto& msg : this->_impl_.econ_item_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 cursor_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cursor_index());
    }

    // optional int32 selected_hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_selected_hero_id());
    }

    // optional uint32 selected_style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_selected_style());
    }

    // optional bool confirmed_style = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int64 message_ack = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_message_ack());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFightingGame_GameData_CharacterSelect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgFightingGame_GameData_CharacterSelect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFightingGame_GameData_CharacterSelect::GetClassData() const { return &_class_data_; }


void CMsgFightingGame_GameData_CharacterSelect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgFightingGame_GameData_CharacterSelect*>(&to_msg);
  auto& from = static_cast<const CMsgFightingGame_GameData_CharacterSelect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgFightingGame_GameData_CharacterSelect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.econ_item_refs_.MergeFrom(from._impl_.econ_item_refs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cursor_index_ = from._impl_.cursor_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.selected_hero_id_ = from._impl_.selected_hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.selected_style_ = from._impl_.selected_style_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.confirmed_style_ = from._impl_.confirmed_style_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.message_ack_ = from._impl_.message_ack_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFightingGame_GameData_CharacterSelect::CopyFrom(const CMsgFightingGame_GameData_CharacterSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFightingGame_GameData_CharacterSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFightingGame_GameData_CharacterSelect::IsInitialized() const {
  return true;
}

void CMsgFightingGame_GameData_CharacterSelect::InternalSwap(CMsgFightingGame_GameData_CharacterSelect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.econ_item_refs_.InternalSwap(&other->_impl_.econ_item_refs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgFightingGame_GameData_CharacterSelect, _impl_.message_ack_)
      + sizeof(CMsgFightingGame_GameData_CharacterSelect::_impl_.message_ack_)
      - PROTOBUF_FIELD_OFFSET(CMsgFightingGame_GameData_CharacterSelect, _impl_.cursor_index_)>(
          reinterpret_cast<char*>(&_impl_.cursor_index_),
          reinterpret_cast<char*>(&other->_impl_.cursor_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFightingGame_GameData_CharacterSelect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_getter, &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_once,
      file_level_metadata_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto[3]);
}

// ===================================================================

class CMsgFightingGame_GameData_Loaded::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFightingGame_GameData_Loaded>()._impl_._has_bits_);
  static void set_has_now(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_peer_ack_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proposed_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_accepted_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgFightingGame_GameData_Loaded::CMsgFightingGame_GameData_Loaded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgFightingGame_GameData_Loaded)
}
CMsgFightingGame_GameData_Loaded::CMsgFightingGame_GameData_Loaded(const CMsgFightingGame_GameData_Loaded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgFightingGame_GameData_Loaded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.now_){}
    , decltype(_impl_.peer_ack_time_){}
    , decltype(_impl_.proposed_start_time_){}
    , decltype(_impl_.accepted_start_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.now_, &from._impl_.now_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accepted_start_time_) -
    reinterpret_cast<char*>(&_impl_.now_)) + sizeof(_impl_.accepted_start_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgFightingGame_GameData_Loaded)
}

inline void CMsgFightingGame_GameData_Loaded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.now_){0}
    , decltype(_impl_.peer_ack_time_){0}
    , decltype(_impl_.proposed_start_time_){0}
    , decltype(_impl_.accepted_start_time_){0}
  };
}

CMsgFightingGame_GameData_Loaded::~CMsgFightingGame_GameData_Loaded() {
  // @@protoc_insertion_point(destructor:CMsgFightingGame_GameData_Loaded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgFightingGame_GameData_Loaded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgFightingGame_GameData_Loaded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgFightingGame_GameData_Loaded::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFightingGame_GameData_Loaded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.now_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accepted_start_time_) -
        reinterpret_cast<char*>(&_impl_.now_)) + sizeof(_impl_.accepted_start_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFightingGame_GameData_Loaded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float now = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_now(&has_bits);
          _impl_.now_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float peer_ack_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_peer_ack_time(&has_bits);
          _impl_.peer_ack_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float proposed_start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_proposed_start_time(&has_bits);
          _impl_.proposed_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float accepted_start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_accepted_start_time(&has_bits);
          _impl_.accepted_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFightingGame_GameData_Loaded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFightingGame_GameData_Loaded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float now = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_now(), target);
  }

  // optional float peer_ack_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_peer_ack_time(), target);
  }

  // optional float proposed_start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_proposed_start_time(), target);
  }

  // optional float accepted_start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_accepted_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFightingGame_GameData_Loaded)
  return target;
}

size_t CMsgFightingGame_GameData_Loaded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFightingGame_GameData_Loaded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float now = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float peer_ack_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float proposed_start_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float accepted_start_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFightingGame_GameData_Loaded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgFightingGame_GameData_Loaded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFightingGame_GameData_Loaded::GetClassData() const { return &_class_data_; }


void CMsgFightingGame_GameData_Loaded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgFightingGame_GameData_Loaded*>(&to_msg);
  auto& from = static_cast<const CMsgFightingGame_GameData_Loaded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgFightingGame_GameData_Loaded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.now_ = from._impl_.now_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.peer_ack_time_ = from._impl_.peer_ack_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.proposed_start_time_ = from._impl_.proposed_start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.accepted_start_time_ = from._impl_.accepted_start_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFightingGame_GameData_Loaded::CopyFrom(const CMsgFightingGame_GameData_Loaded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFightingGame_GameData_Loaded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFightingGame_GameData_Loaded::IsInitialized() const {
  return true;
}

void CMsgFightingGame_GameData_Loaded::InternalSwap(CMsgFightingGame_GameData_Loaded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgFightingGame_GameData_Loaded, _impl_.accepted_start_time_)
      + sizeof(CMsgFightingGame_GameData_Loaded::_impl_.accepted_start_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgFightingGame_GameData_Loaded, _impl_.now_)>(
          reinterpret_cast<char*>(&_impl_.now_),
          reinterpret_cast<char*>(&other->_impl_.now_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFightingGame_GameData_Loaded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_getter, &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_once,
      file_level_metadata_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto[4]);
}

// ===================================================================

class CP2P_FightingGame_GameData::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_FightingGame_GameData>()._impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgFightingGame_GameData_Fighting& fight(const CP2P_FightingGame_GameData* msg);
  static const ::CMsgFightingGame_GameData_CharacterSelect& character_select(const CP2P_FightingGame_GameData* msg);
  static const ::CMsgFightingGame_GameData_Loaded& loaded(const CP2P_FightingGame_GameData* msg);
};

const ::CMsgFightingGame_GameData_Fighting&
CP2P_FightingGame_GameData::_Internal::fight(const CP2P_FightingGame_GameData* msg) {
  return *msg->_impl_.state_data_.fight_;
}
const ::CMsgFightingGame_GameData_CharacterSelect&
CP2P_FightingGame_GameData::_Internal::character_select(const CP2P_FightingGame_GameData* msg) {
  return *msg->_impl_.state_data_.character_select_;
}
const ::CMsgFightingGame_GameData_Loaded&
CP2P_FightingGame_GameData::_Internal::loaded(const CP2P_FightingGame_GameData* msg) {
  return *msg->_impl_.state_data_.loaded_;
}
void CP2P_FightingGame_GameData::set_allocated_fight(::CMsgFightingGame_GameData_Fighting* fight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_state_data();
  if (fight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fight);
    if (message_arena != submessage_arena) {
      fight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fight, submessage_arena);
    }
    set_has_fight();
    _impl_.state_data_.fight_ = fight;
  }
  // @@protoc_insertion_point(field_set_allocated:CP2P_FightingGame_GameData.fight)
}
void CP2P_FightingGame_GameData::set_allocated_character_select(::CMsgFightingGame_GameData_CharacterSelect* character_select) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_state_data();
  if (character_select) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(character_select);
    if (message_arena != submessage_arena) {
      character_select = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_select, submessage_arena);
    }
    set_has_character_select();
    _impl_.state_data_.character_select_ = character_select;
  }
  // @@protoc_insertion_point(field_set_allocated:CP2P_FightingGame_GameData.character_select)
}
void CP2P_FightingGame_GameData::set_allocated_loaded(::CMsgFightingGame_GameData_Loaded* loaded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_state_data();
  if (loaded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(loaded);
    if (message_arena != submessage_arena) {
      loaded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loaded, submessage_arena);
    }
    set_has_loaded();
    _impl_.state_data_.loaded_ = loaded;
  }
  // @@protoc_insertion_point(field_set_allocated:CP2P_FightingGame_GameData.loaded)
}
CP2P_FightingGame_GameData::CP2P_FightingGame_GameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CP2P_FightingGame_GameData)
}
CP2P_FightingGame_GameData::CP2P_FightingGame_GameData(const CP2P_FightingGame_GameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CP2P_FightingGame_GameData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){}
    , decltype(_impl_.state_data_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.state_ = from._impl_.state_;
  clear_has_state_data();
  switch (from.state_data_case()) {
    case kFight: {
      _this->_internal_mutable_fight()->::CMsgFightingGame_GameData_Fighting::MergeFrom(
          from._internal_fight());
      break;
    }
    case kCharacterSelect: {
      _this->_internal_mutable_character_select()->::CMsgFightingGame_GameData_CharacterSelect::MergeFrom(
          from._internal_character_select());
      break;
    }
    case kLoaded: {
      _this->_internal_mutable_loaded()->::CMsgFightingGame_GameData_Loaded::MergeFrom(
          from._internal_loaded());
      break;
    }
    case STATE_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CP2P_FightingGame_GameData)
}

inline void CP2P_FightingGame_GameData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){1}
    , decltype(_impl_.state_data_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_state_data();
}

CP2P_FightingGame_GameData::~CP2P_FightingGame_GameData() {
  // @@protoc_insertion_point(destructor:CP2P_FightingGame_GameData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CP2P_FightingGame_GameData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_state_data()) {
    clear_state_data();
  }
}

void CP2P_FightingGame_GameData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CP2P_FightingGame_GameData::clear_state_data() {
// @@protoc_insertion_point(one_of_clear_start:CP2P_FightingGame_GameData)
  switch (state_data_case()) {
    case kFight: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.state_data_.fight_;
      }
      break;
    }
    case kCharacterSelect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.state_data_.character_select_;
      }
      break;
    }
    case kLoaded: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.state_data_.loaded_;
      }
      break;
    }
    case STATE_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STATE_DATA_NOT_SET;
}


void CP2P_FightingGame_GameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_FightingGame_GameData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_ = 1;
  clear_state_data();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_FightingGame_GameData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CP2P_FightingGame_GameData.EState state = 1 [default = k_ChoosingCharacter];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CP2P_FightingGame_GameData_EState_IsValid(val))) {
            _internal_set_state(static_cast<::CP2P_FightingGame_GameData_EState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .CMsgFightingGame_GameData_Fighting fight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fight(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgFightingGame_GameData_CharacterSelect character_select = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_select(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgFightingGame_GameData_Loaded loaded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_loaded(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CP2P_FightingGame_GameData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_FightingGame_GameData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CP2P_FightingGame_GameData.EState state = 1 [default = k_ChoosingCharacter];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  switch (state_data_case()) {
    case kFight: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::fight(this),
          _Internal::fight(this).GetCachedSize(), target, stream);
      break;
    }
    case kCharacterSelect: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::character_select(this),
          _Internal::character_select(this).GetCachedSize(), target, stream);
      break;
    }
    case kLoaded: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::loaded(this),
          _Internal::loaded(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_FightingGame_GameData)
  return target;
}

size_t CP2P_FightingGame_GameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_FightingGame_GameData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CP2P_FightingGame_GameData.EState state = 1 [default = k_ChoosingCharacter];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  switch (state_data_case()) {
    // .CMsgFightingGame_GameData_Fighting fight = 2;
    case kFight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_data_.fight_);
      break;
    }
    // .CMsgFightingGame_GameData_CharacterSelect character_select = 3;
    case kCharacterSelect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_data_.character_select_);
      break;
    }
    // .CMsgFightingGame_GameData_Loaded loaded = 4;
    case kLoaded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_data_.loaded_);
      break;
    }
    case STATE_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CP2P_FightingGame_GameData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CP2P_FightingGame_GameData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CP2P_FightingGame_GameData::GetClassData() const { return &_class_data_; }


void CP2P_FightingGame_GameData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CP2P_FightingGame_GameData*>(&to_msg);
  auto& from = static_cast<const CP2P_FightingGame_GameData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CP2P_FightingGame_GameData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _this->_internal_set_state(from._internal_state());
  }
  switch (from.state_data_case()) {
    case kFight: {
      _this->_internal_mutable_fight()->::CMsgFightingGame_GameData_Fighting::MergeFrom(
          from._internal_fight());
      break;
    }
    case kCharacterSelect: {
      _this->_internal_mutable_character_select()->::CMsgFightingGame_GameData_CharacterSelect::MergeFrom(
          from._internal_character_select());
      break;
    }
    case kLoaded: {
      _this->_internal_mutable_loaded()->::CMsgFightingGame_GameData_Loaded::MergeFrom(
          from._internal_loaded());
      break;
    }
    case STATE_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CP2P_FightingGame_GameData::CopyFrom(const CP2P_FightingGame_GameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_FightingGame_GameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_FightingGame_GameData::IsInitialized() const {
  return true;
}

void CP2P_FightingGame_GameData::InternalSwap(CP2P_FightingGame_GameData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
  swap(_impl_.state_data_, other->_impl_.state_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_FightingGame_GameData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_getter, &descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto_once,
      file_level_metadata_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgFightingGame_GameData_Fighting_InputSample*
Arena::CreateMaybeMessage< ::CMsgFightingGame_GameData_Fighting_InputSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFightingGame_GameData_Fighting_InputSample >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFightingGame_GameData_Fighting*
Arena::CreateMaybeMessage< ::CMsgFightingGame_GameData_Fighting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFightingGame_GameData_Fighting >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFightingGame_GameData_CharacterSelect_Item*
Arena::CreateMaybeMessage< ::CMsgFightingGame_GameData_CharacterSelect_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFightingGame_GameData_CharacterSelect_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFightingGame_GameData_CharacterSelect*
Arena::CreateMaybeMessage< ::CMsgFightingGame_GameData_CharacterSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFightingGame_GameData_CharacterSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFightingGame_GameData_Loaded*
Arena::CreateMaybeMessage< ::CMsgFightingGame_GameData_Loaded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFightingGame_GameData_Loaded >(arena);
}
template<> PROTOBUF_NOINLINE ::CP2P_FightingGame_GameData*
Arena::CreateMaybeMessage< ::CP2P_FightingGame_GameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_FightingGame_GameData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
