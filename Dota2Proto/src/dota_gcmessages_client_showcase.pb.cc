// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_showcase.proto

#include "dota_gcmessages_client_showcase.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgShowcaseEconItemReference::CMsgShowcaseEconItemReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.original_id_)*/uint64_t{0u}
  , /*decltype(_impl_.definition_index_)*/0u
  , /*decltype(_impl_.equipment_slot_index_)*/-1} {}
struct CMsgShowcaseEconItemReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseEconItemReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseEconItemReferenceDefaultTypeInternal() {}
  union {
    CMsgShowcaseEconItemReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseEconItemReferenceDefaultTypeInternal _CMsgShowcaseEconItemReference_default_instance_;
PROTOBUF_CONSTEXPR CMsgHeroPlusInfo::CMsgHeroPlusInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.flags_)*/0u} {}
struct CMsgHeroPlusInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgHeroPlusInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgHeroPlusInfoDefaultTypeInternal() {}
  union {
    CMsgHeroPlusInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgHeroPlusInfoDefaultTypeInternal _CMsgHeroPlusInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Trophy_Data::CMsgShowcaseItem_Trophy_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trophy_score_)*/0u} {}
struct CMsgShowcaseItem_Trophy_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_Trophy_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_Trophy_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Trophy_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_Trophy_DataDefaultTypeInternal _CMsgShowcaseItem_Trophy_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Trophy::CMsgShowcaseItem_Trophy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.trophy_id_)*/0u} {}
struct CMsgShowcaseItem_TrophyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_TrophyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_TrophyDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Trophy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_TrophyDefaultTypeInternal _CMsgShowcaseItem_Trophy_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_EconItem_Data::CMsgShowcaseItem_EconItem_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.econ_item_)*/nullptr} {}
struct CMsgShowcaseItem_EconItem_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_EconItem_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_EconItem_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_EconItem_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_EconItem_DataDefaultTypeInternal _CMsgShowcaseItem_EconItem_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_EconItem::CMsgShowcaseItem_EconItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.ref_)*/nullptr} {}
struct CMsgShowcaseItem_EconItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_EconItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_EconItemDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_EconItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_EconItemDefaultTypeInternal _CMsgShowcaseItem_EconItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Hero_Data::CMsgShowcaseItem_Hero_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.econ_items_)*/{}
  , /*decltype(_impl_.actual_hero_id_)*/0
  , /*decltype(_impl_.plus_hero_xp_)*/0u} {}
struct CMsgShowcaseItem_Hero_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_Hero_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_Hero_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Hero_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_Hero_DataDefaultTypeInternal _CMsgShowcaseItem_Hero_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Hero::CMsgShowcaseItem_Hero(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.econ_item_refs_)*/{}
  , /*decltype(_impl_.animation_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.plus_info_)*/nullptr
  , /*decltype(_impl_.hero_id_)*/0
  , /*decltype(_impl_.rotation_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.animation_offset_)*/0u
  , /*decltype(_impl_.slot_index_)*/0u
  , /*decltype(_impl_.model_index_)*/0u
  , /*decltype(_impl_.animation_playback_speed_)*/100u
  , /*decltype(_impl_.zoom_)*/100u} {}
struct CMsgShowcaseItem_HeroDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_HeroDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_HeroDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Hero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_HeroDefaultTypeInternal _CMsgShowcaseItem_Hero_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_HeroIcon_Data::CMsgShowcaseItem_HeroIcon_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.econ_item_)*/nullptr} {}
struct CMsgShowcaseItem_HeroIcon_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_HeroIcon_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_HeroIcon_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_HeroIcon_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_HeroIcon_DataDefaultTypeInternal _CMsgShowcaseItem_HeroIcon_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_HeroIcon::CMsgShowcaseItem_HeroIcon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.econ_item_ref_)*/nullptr
  , /*decltype(_impl_.hero_id_)*/0} {}
struct CMsgShowcaseItem_HeroIconDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_HeroIconDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_HeroIconDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_HeroIcon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_HeroIconDefaultTypeInternal _CMsgShowcaseItem_HeroIcon_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_PlayerMatch_Data::CMsgShowcaseItem_PlayerMatch_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.game_mode_)*/0
  , /*decltype(_impl_.outcome_)*/0
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.assists_)*/0u} {}
struct CMsgShowcaseItem_PlayerMatch_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_PlayerMatch_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_PlayerMatch_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_PlayerMatch_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_PlayerMatch_DataDefaultTypeInternal _CMsgShowcaseItem_PlayerMatch_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_PlayerMatch::CMsgShowcaseItem_PlayerMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.player_slot_)*/0u} {}
struct CMsgShowcaseItem_PlayerMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_PlayerMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_PlayerMatchDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_PlayerMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_PlayerMatchDefaultTypeInternal _CMsgShowcaseItem_PlayerMatch_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_ChatWheel_Data::CMsgShowcaseItem_ChatWheel_Data(
    ::_pbi::ConstantInitialized) {}
struct CMsgShowcaseItem_ChatWheel_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_ChatWheel_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_ChatWheel_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_ChatWheel_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_ChatWheel_DataDefaultTypeInternal _CMsgShowcaseItem_ChatWheel_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_ChatWheel::CMsgShowcaseItem_ChatWheel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.chat_wheel_message_id_)*/4294967295u} {}
struct CMsgShowcaseItem_ChatWheelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_ChatWheelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_ChatWheelDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_ChatWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_ChatWheelDefaultTypeInternal _CMsgShowcaseItem_ChatWheel_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Emoticon_Data::CMsgShowcaseItem_Emoticon_Data(
    ::_pbi::ConstantInitialized) {}
struct CMsgShowcaseItem_Emoticon_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_Emoticon_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_Emoticon_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Emoticon_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_Emoticon_DataDefaultTypeInternal _CMsgShowcaseItem_Emoticon_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Emoticon::CMsgShowcaseItem_Emoticon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.emoticon_id_)*/0u} {}
struct CMsgShowcaseItem_EmoticonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_EmoticonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_EmoticonDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Emoticon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_EmoticonDefaultTypeInternal _CMsgShowcaseItem_Emoticon_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_SpiderGraph_Data::CMsgShowcaseItem_SpiderGraph_Data(
    ::_pbi::ConstantInitialized) {}
struct CMsgShowcaseItem_SpiderGraph_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_SpiderGraph_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_SpiderGraph_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_SpiderGraph_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_SpiderGraph_DataDefaultTypeInternal _CMsgShowcaseItem_SpiderGraph_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_SpiderGraph::CMsgShowcaseItem_SpiderGraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr} {}
struct CMsgShowcaseItem_SpiderGraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_SpiderGraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_SpiderGraphDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_SpiderGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_SpiderGraphDefaultTypeInternal _CMsgShowcaseItem_SpiderGraph_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_UserFeed_Data::CMsgShowcaseItem_UserFeed_Data(
    ::_pbi::ConstantInitialized) {}
struct CMsgShowcaseItem_UserFeed_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_UserFeed_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_UserFeed_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_UserFeed_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_UserFeed_DataDefaultTypeInternal _CMsgShowcaseItem_UserFeed_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_UserFeed::CMsgShowcaseItem_UserFeed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr} {}
struct CMsgShowcaseItem_UserFeedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_UserFeedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_UserFeedDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_UserFeed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_UserFeedDefaultTypeInternal _CMsgShowcaseItem_UserFeed_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Stat_Data::CMsgShowcaseItem_Stat_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stat_score_)*/0u} {}
struct CMsgShowcaseItem_Stat_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_Stat_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_Stat_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Stat_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_Stat_DataDefaultTypeInternal _CMsgShowcaseItem_Stat_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Stat::CMsgShowcaseItem_Stat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.stat_id_)*/3} {}
struct CMsgShowcaseItem_StatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_StatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_StatDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_StatDefaultTypeInternal _CMsgShowcaseItem_Stat_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseBackground_Data::CMsgShowcaseBackground_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.loading_screen_)*/nullptr} {}
struct CMsgShowcaseBackground_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseBackground_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseBackground_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseBackground_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseBackground_DataDefaultTypeInternal _CMsgShowcaseBackground_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseBackground::CMsgShowcaseBackground(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.loading_screen_ref_)*/nullptr
  , /*decltype(_impl_.dim_)*/0u
  , /*decltype(_impl_.blur_)*/0u
  , /*decltype(_impl_.background_id_)*/0u} {}
struct CMsgShowcaseBackgroundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseBackgroundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseBackgroundDefaultTypeInternal() {}
  union {
    CMsgShowcaseBackground _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseBackgroundDefaultTypeInternal _CMsgShowcaseBackground_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItemData::CMsgShowcaseItemData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CMsgShowcaseItemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItemDataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItemDataDefaultTypeInternal _CMsgShowcaseItemData_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItemPosition::CMsgShowcaseItemPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.position_y_)*/0
  , /*decltype(_impl_.scale_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.rotation_)*/0u
  , /*decltype(_impl_.parent_id_)*/0u
  , /*decltype(_impl_.parent_attachment_point_id_)*/0u
  , /*decltype(_impl_.attachment_anchor_x_)*/0u
  , /*decltype(_impl_.attachment_anchor_y_)*/0u} {}
struct CMsgShowcaseItemPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItemPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItemPositionDefaultTypeInternal() {}
  union {
    CMsgShowcaseItemPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItemPositionDefaultTypeInternal _CMsgShowcaseItemPosition_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem::CMsgShowcaseItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_position_)*/nullptr
  , /*decltype(_impl_.item_data_)*/nullptr
  , /*decltype(_impl_.showcase_item_id_)*/0u
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.flags_)*/0u} {}
struct CMsgShowcaseItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItemDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItemDefaultTypeInternal _CMsgShowcaseItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcase::CMsgShowcase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.showcase_items_)*/{}
  , /*decltype(_impl_.background_)*/nullptr
  , /*decltype(_impl_.moderation_state_)*/0} {}
struct CMsgShowcaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseDefaultTypeInternal() {}
  union {
    CMsgShowcase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseDefaultTypeInternal _CMsgShowcase_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseGetUserData::CMsgClientToGCShowcaseGetUserData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.showcase_type_)*/0} {}
struct CMsgClientToGCShowcaseGetUserDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseGetUserDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseGetUserDataDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseGetUserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseGetUserDataDefaultTypeInternal _CMsgClientToGCShowcaseGetUserData_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseGetUserDataResponse::CMsgClientToGCShowcaseGetUserDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.showcase_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseGetUserDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseGetUserDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseGetUserDataResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseGetUserDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseGetUserDataResponseDefaultTypeInternal _CMsgClientToGCShowcaseGetUserDataResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSetUserData::CMsgClientToGCShowcaseSetUserData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.showcase_)*/nullptr
  , /*decltype(_impl_.showcase_type_)*/0
  , /*decltype(_impl_.format_version_)*/0u} {}
struct CMsgClientToGCShowcaseSetUserDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSetUserDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseSetUserDataDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseSetUserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseSetUserDataDefaultTypeInternal _CMsgClientToGCShowcaseSetUserData_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSetUserDataResponse::CMsgClientToGCShowcaseSetUserDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.validated_showcase_)*/nullptr
  , /*decltype(_impl_.response_)*/0
  , /*decltype(_impl_.locked_until_timestamp_)*/0u} {}
struct CMsgClientToGCShowcaseSetUserDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSetUserDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseSetUserDataResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseSetUserDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseSetUserDataResponseDefaultTypeInternal _CMsgClientToGCShowcaseSetUserDataResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSubmitReport::CMsgClientToGCShowcaseSubmitReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.report_comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_account_id_)*/0u
  , /*decltype(_impl_.showcase_type_)*/0} {}
struct CMsgClientToGCShowcaseSubmitReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSubmitReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseSubmitReportDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseSubmitReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseSubmitReportDefaultTypeInternal _CMsgClientToGCShowcaseSubmitReport_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSubmitReportResponse::CMsgClientToGCShowcaseSubmitReportResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseSubmitReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSubmitReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseSubmitReportResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseSubmitReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseSubmitReportResponseDefaultTypeInternal _CMsgClientToGCShowcaseSubmitReportResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseReportsRollupInfo::CMsgShowcaseReportsRollupInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rollup_id_)*/0u
  , /*decltype(_impl_.start_timestamp_)*/0u
  , /*decltype(_impl_.end_timestamp_)*/0u} {}
struct CMsgShowcaseReportsRollupInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseReportsRollupInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseReportsRollupInfoDefaultTypeInternal() {}
  union {
    CMsgShowcaseReportsRollupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseReportsRollupInfoDefaultTypeInternal _CMsgShowcaseReportsRollupInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseReportsRollupList::CMsgShowcaseReportsRollupList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rollups_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgShowcaseReportsRollupListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseReportsRollupListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseReportsRollupListDefaultTypeInternal() {}
  union {
    CMsgShowcaseReportsRollupList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseReportsRollupListDefaultTypeInternal _CMsgShowcaseReportsRollupList_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseReportsRollupEntry::CMsgShowcaseReportsRollupEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.showcase_type_)*/0
  , /*decltype(_impl_.report_count_)*/0u} {}
struct CMsgShowcaseReportsRollupEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseReportsRollupEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseReportsRollupEntryDefaultTypeInternal() {}
  union {
    CMsgShowcaseReportsRollupEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseReportsRollupEntryDefaultTypeInternal _CMsgShowcaseReportsRollupEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseReportsRollup::CMsgShowcaseReportsRollup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rollup_entries_)*/{}
  , /*decltype(_impl_.rollup_info_)*/nullptr} {}
struct CMsgShowcaseReportsRollupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseReportsRollupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseReportsRollupDefaultTypeInternal() {}
  union {
    CMsgShowcaseReportsRollup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseReportsRollupDefaultTypeInternal _CMsgShowcaseReportsRollup_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetReportsRollupList::CMsgClientToGCShowcaseAdminGetReportsRollupList(
    ::_pbi::ConstantInitialized) {}
struct CMsgClientToGCShowcaseAdminGetReportsRollupListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetReportsRollupListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminGetReportsRollupListDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminGetReportsRollupList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminGetReportsRollupListDefaultTypeInternal _CMsgClientToGCShowcaseAdminGetReportsRollupList_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rollup_list_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseAdminGetReportsRollupListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetReportsRollupListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminGetReportsRollupListResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminGetReportsRollupListResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetReportsRollup::CMsgClientToGCShowcaseAdminGetReportsRollup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rollup_id_)*/0u} {}
struct CMsgClientToGCShowcaseAdminGetReportsRollupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetReportsRollupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminGetReportsRollupDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminGetReportsRollup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminGetReportsRollupDefaultTypeInternal _CMsgClientToGCShowcaseAdminGetReportsRollup_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetReportsRollupResponse::CMsgClientToGCShowcaseAdminGetReportsRollupResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rollup_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseAdminGetReportsRollupResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetReportsRollupResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminGetReportsRollupResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminGetReportsRollupResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminGetReportsRollupResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseAuditEntry::CMsgShowcaseAuditEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.showcase_type_)*/0
  , /*decltype(_impl_.audit_action_)*/0
  , /*decltype(_impl_.audit_data_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/0u} {}
struct CMsgShowcaseAuditEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseAuditEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseAuditEntryDefaultTypeInternal() {}
  union {
    CMsgShowcaseAuditEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseAuditEntryDefaultTypeInternal _CMsgShowcaseAuditEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseReport::CMsgShowcaseReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.report_comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reporter_account_id_)*/0u
  , /*decltype(_impl_.showcase_type_)*/0
  , /*decltype(_impl_.report_timestamp_)*/0u} {}
struct CMsgShowcaseReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseReportDefaultTypeInternal() {}
  union {
    CMsgShowcaseReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseReportDefaultTypeInternal _CMsgShowcaseReport_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseAdminUserDetails::CMsgShowcaseAdminUserDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.audit_entries_)*/{}
  , /*decltype(_impl_.reports_)*/{}
  , /*decltype(_impl_.locked_until_timestamp_)*/0u} {}
struct CMsgShowcaseAdminUserDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseAdminUserDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseAdminUserDetailsDefaultTypeInternal() {}
  union {
    CMsgShowcaseAdminUserDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseAdminUserDetailsDefaultTypeInternal _CMsgShowcaseAdminUserDetails_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetUserDetails::CMsgClientToGCShowcaseAdminGetUserDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgClientToGCShowcaseAdminGetUserDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetUserDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminGetUserDetailsDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminGetUserDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminGetUserDetailsDefaultTypeInternal _CMsgClientToGCShowcaseAdminGetUserDetails_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetUserDetailsResponse::CMsgClientToGCShowcaseAdminGetUserDetailsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_details_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseAdminGetUserDetailsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminGetUserDetailsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminGetUserDetailsResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminGetUserDetailsResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminGetUserDetailsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminReset::CMsgClientToGCShowcaseAdminReset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_account_id_)*/0u
  , /*decltype(_impl_.showcase_type_)*/0} {}
struct CMsgClientToGCShowcaseAdminResetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminResetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminResetDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminReset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminResetDefaultTypeInternal _CMsgClientToGCShowcaseAdminReset_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminResetResponse::CMsgClientToGCShowcaseAdminResetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseAdminResetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminResetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminResetResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminResetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminResetResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminResetResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminLockAccount::CMsgClientToGCShowcaseAdminLockAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_account_id_)*/0u
  , /*decltype(_impl_.locked_until_timestamp_)*/0u} {}
struct CMsgClientToGCShowcaseAdminLockAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminLockAccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminLockAccountDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminLockAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminLockAccountDefaultTypeInternal _CMsgClientToGCShowcaseAdminLockAccount_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminLockAccountResponse::CMsgClientToGCShowcaseAdminLockAccountResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseAdminLockAccountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminLockAccountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminLockAccountResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminLockAccountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminLockAccountResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminLockAccountResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminConvict::CMsgClientToGCShowcaseAdminConvict(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_account_id_)*/0u
  , /*decltype(_impl_.showcase_type_)*/0} {}
struct CMsgClientToGCShowcaseAdminConvictDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminConvictDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminConvictDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminConvict _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminConvictDefaultTypeInternal _CMsgClientToGCShowcaseAdminConvict_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminConvictResponse::CMsgClientToGCShowcaseAdminConvictResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseAdminConvictResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminConvictResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminConvictResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminConvictResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminConvictResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminConvictResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminExonerate::CMsgClientToGCShowcaseAdminExonerate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_account_id_)*/0u
  , /*decltype(_impl_.showcase_type_)*/0} {}
struct CMsgClientToGCShowcaseAdminExonerateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminExonerateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminExonerateDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminExonerate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminExonerateDefaultTypeInternal _CMsgClientToGCShowcaseAdminExonerate_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminExonerateResponse::CMsgClientToGCShowcaseAdminExonerateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseAdminExonerateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseAdminExonerateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseAdminExonerateResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseAdminExonerateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseAdminExonerateResponseDefaultTypeInternal _CMsgClientToGCShowcaseAdminExonerateResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseModerationInfo::CMsgShowcaseModerationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.showcase_type_)*/0
  , /*decltype(_impl_.showcase_timestamp_)*/0u} {}
struct CMsgShowcaseModerationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseModerationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseModerationInfoDefaultTypeInternal() {}
  union {
    CMsgShowcaseModerationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseModerationInfoDefaultTypeInternal _CMsgShowcaseModerationInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseModerationGetQueue::CMsgClientToGCShowcaseModerationGetQueue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_timestamp_)*/0u
  , /*decltype(_impl_.result_count_)*/0u} {}
struct CMsgClientToGCShowcaseModerationGetQueueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseModerationGetQueueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseModerationGetQueueDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseModerationGetQueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseModerationGetQueueDefaultTypeInternal _CMsgClientToGCShowcaseModerationGetQueue_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseModerationGetQueueResponse::CMsgClientToGCShowcaseModerationGetQueueResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.showcases_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseModerationGetQueueResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseModerationGetQueueResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseModerationGetQueueResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseModerationGetQueueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseModerationGetQueueResponseDefaultTypeInternal _CMsgClientToGCShowcaseModerationGetQueueResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseModerationApplyModeration::CMsgClientToGCShowcaseModerationApplyModeration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.showcase_type_)*/0
  , /*decltype(_impl_.showcase_timestamp_)*/0u
  , /*decltype(_impl_.approve_)*/false} {}
struct CMsgClientToGCShowcaseModerationApplyModerationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseModerationApplyModerationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseModerationApplyModerationDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseModerationApplyModeration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseModerationApplyModerationDefaultTypeInternal _CMsgClientToGCShowcaseModerationApplyModeration_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseModerationApplyModerationResponse::CMsgClientToGCShowcaseModerationApplyModerationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseModerationApplyModerationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseModerationApplyModerationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseModerationApplyModerationResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseModerationApplyModerationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseModerationApplyModerationResponseDefaultTypeInternal _CMsgClientToGCShowcaseModerationApplyModerationResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[60];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[20];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseEconItemReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseEconItemReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseEconItemReference, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseEconItemReference, _impl_.original_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseEconItemReference, _impl_.definition_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseEconItemReference, _impl_.equipment_slot_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgHeroPlusInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHeroPlusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHeroPlusInfo, _impl_.flags_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy_Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy_Data, _impl_.trophy_score_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy, _impl_.trophy_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem_Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem_Data, _impl_.econ_item_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem, _impl_.ref_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero_Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero_Data, _impl_.econ_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero_Data, _impl_.actual_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero_Data, _impl_.plus_hero_xp_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.econ_item_refs_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.plus_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.animation_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.animation_playback_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.animation_offset_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.zoom_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.slot_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.model_index_),
  1,
  3,
  ~0u,
  4,
  5,
  2,
  0,
  9,
  6,
  10,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_HeroIcon_Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_HeroIcon_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_HeroIcon_Data, _impl_.econ_item_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_HeroIcon, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_HeroIcon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_HeroIcon, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_HeroIcon, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_HeroIcon, _impl_.econ_item_ref_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.outcome_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.assists_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch, _impl_.player_slot_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_ChatWheel_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_ChatWheel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_ChatWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_ChatWheel, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_ChatWheel, _impl_.chat_wheel_message_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Emoticon_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Emoticon, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Emoticon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Emoticon, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Emoticon, _impl_.emoticon_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_SpiderGraph_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_SpiderGraph, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_SpiderGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_SpiderGraph, _impl_.data_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_UserFeed_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_UserFeed, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_UserFeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_UserFeed, _impl_.data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Stat_Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Stat_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Stat_Data, _impl_.stat_score_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Stat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Stat, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Stat, _impl_.stat_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground_Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground_Data, _impl_.loading_screen_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground, _impl_.loading_screen_ref_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground, _impl_.dim_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground, _impl_.blur_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground, _impl_.background_id_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemData, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemData, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.position_y_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.parent_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.parent_attachment_point_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.attachment_anchor_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.attachment_anchor_y_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _impl_.showcase_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _impl_.item_position_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _impl_.item_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _impl_.flags_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcase, _impl_.showcase_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcase, _impl_.background_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcase, _impl_.moderation_state_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserData, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserData, _impl_.showcase_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserDataResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserDataResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserDataResponse, _impl_.showcase_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserData, _impl_.showcase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserData, _impl_.showcase_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserData, _impl_.format_version_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserDataResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserDataResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserDataResponse, _impl_.validated_showcase_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserDataResponse, _impl_.locked_until_timestamp_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSubmitReport, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSubmitReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSubmitReport, _impl_.target_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSubmitReport, _impl_.showcase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSubmitReport, _impl_.report_comment_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSubmitReportResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSubmitReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSubmitReportResponse, _impl_.response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollupInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollupInfo, _impl_.rollup_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollupInfo, _impl_.start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollupInfo, _impl_.end_timestamp_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollupList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollupList, _impl_.rollups_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollupEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollupEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollupEntry, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollupEntry, _impl_.showcase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollupEntry, _impl_.report_count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollup, _impl_.rollup_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReportsRollup, _impl_.rollup_entries_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetReportsRollupList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse, _impl_.rollup_list_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetReportsRollup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetReportsRollup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetReportsRollup, _impl_.rollup_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetReportsRollupResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetReportsRollupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetReportsRollupResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetReportsRollupResponse, _impl_.rollup_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseAuditEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseAuditEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseAuditEntry, _impl_.showcase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseAuditEntry, _impl_.audit_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseAuditEntry, _impl_.audit_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseAuditEntry, _impl_.timestamp_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReport, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReport, _impl_.reporter_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReport, _impl_.showcase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReport, _impl_.report_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseReport, _impl_.report_comment_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseAdminUserDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseAdminUserDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseAdminUserDetails, _impl_.locked_until_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseAdminUserDetails, _impl_.audit_entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseAdminUserDetails, _impl_.reports_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetUserDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetUserDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetUserDetails, _impl_.account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetUserDetailsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetUserDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetUserDetailsResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminGetUserDetailsResponse, _impl_.user_details_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminReset, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminReset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminReset, _impl_.target_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminReset, _impl_.showcase_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminResetResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminResetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminResetResponse, _impl_.response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminLockAccount, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminLockAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminLockAccount, _impl_.target_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminLockAccount, _impl_.locked_until_timestamp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminLockAccountResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminLockAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminLockAccountResponse, _impl_.response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminConvict, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminConvict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminConvict, _impl_.target_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminConvict, _impl_.showcase_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminConvictResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminConvictResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminConvictResponse, _impl_.response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminExonerate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminExonerate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminExonerate, _impl_.target_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminExonerate, _impl_.showcase_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminExonerateResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminExonerateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseAdminExonerateResponse, _impl_.response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseModerationInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseModerationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseModerationInfo, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseModerationInfo, _impl_.showcase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseModerationInfo, _impl_.showcase_timestamp_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationGetQueue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationGetQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationGetQueue, _impl_.start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationGetQueue, _impl_.result_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationGetQueueResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationGetQueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationGetQueueResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationGetQueueResponse, _impl_.showcases_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationApplyModeration, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationApplyModeration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationApplyModeration, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationApplyModeration, _impl_.showcase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationApplyModeration, _impl_.showcase_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationApplyModeration, _impl_.approve_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationApplyModerationResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationApplyModerationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseModerationApplyModerationResponse, _impl_.response_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CMsgShowcaseEconItemReference)},
  { 14, 21, -1, sizeof(::CMsgHeroPlusInfo)},
  { 22, 29, -1, sizeof(::CMsgShowcaseItem_Trophy_Data)},
  { 30, 38, -1, sizeof(::CMsgShowcaseItem_Trophy)},
  { 40, 47, -1, sizeof(::CMsgShowcaseItem_EconItem_Data)},
  { 48, 56, -1, sizeof(::CMsgShowcaseItem_EconItem)},
  { 58, 67, -1, sizeof(::CMsgShowcaseItem_Hero_Data)},
  { 70, 88, -1, sizeof(::CMsgShowcaseItem_Hero)},
  { 100, 107, -1, sizeof(::CMsgShowcaseItem_HeroIcon_Data)},
  { 108, 117, -1, sizeof(::CMsgShowcaseItem_HeroIcon)},
  { 120, 134, -1, sizeof(::CMsgShowcaseItem_PlayerMatch_Data)},
  { 142, 151, -1, sizeof(::CMsgShowcaseItem_PlayerMatch)},
  { 154, -1, -1, sizeof(::CMsgShowcaseItem_ChatWheel_Data)},
  { 160, 168, -1, sizeof(::CMsgShowcaseItem_ChatWheel)},
  { 170, -1, -1, sizeof(::CMsgShowcaseItem_Emoticon_Data)},
  { 176, 184, -1, sizeof(::CMsgShowcaseItem_Emoticon)},
  { 186, -1, -1, sizeof(::CMsgShowcaseItem_SpiderGraph_Data)},
  { 192, 199, -1, sizeof(::CMsgShowcaseItem_SpiderGraph)},
  { 200, -1, -1, sizeof(::CMsgShowcaseItem_UserFeed_Data)},
  { 206, 213, -1, sizeof(::CMsgShowcaseItem_UserFeed)},
  { 214, 221, -1, sizeof(::CMsgShowcaseItem_Stat_Data)},
  { 222, 230, -1, sizeof(::CMsgShowcaseItem_Stat)},
  { 232, 239, -1, sizeof(::CMsgShowcaseBackground_Data)},
  { 240, 251, -1, sizeof(::CMsgShowcaseBackground)},
  { 256, -1, -1, sizeof(::CMsgShowcaseItemData)},
  { 283, 299, -1, sizeof(::CMsgShowcaseItemPosition)},
  { 309, 320, -1, sizeof(::CMsgShowcaseItem)},
  { 325, 334, -1, sizeof(::CMsgShowcase)},
  { 337, 345, -1, sizeof(::CMsgClientToGCShowcaseGetUserData)},
  { 347, 355, -1, sizeof(::CMsgClientToGCShowcaseGetUserDataResponse)},
  { 357, 366, -1, sizeof(::CMsgClientToGCShowcaseSetUserData)},
  { 369, 378, -1, sizeof(::CMsgClientToGCShowcaseSetUserDataResponse)},
  { 381, 390, -1, sizeof(::CMsgClientToGCShowcaseSubmitReport)},
  { 393, 400, -1, sizeof(::CMsgClientToGCShowcaseSubmitReportResponse)},
  { 401, 410, -1, sizeof(::CMsgShowcaseReportsRollupInfo)},
  { 413, -1, -1, sizeof(::CMsgShowcaseReportsRollupList)},
  { 420, 429, -1, sizeof(::CMsgShowcaseReportsRollupEntry)},
  { 432, 440, -1, sizeof(::CMsgShowcaseReportsRollup)},
  { 442, -1, -1, sizeof(::CMsgClientToGCShowcaseAdminGetReportsRollupList)},
  { 448, 456, -1, sizeof(::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse)},
  { 458, 465, -1, sizeof(::CMsgClientToGCShowcaseAdminGetReportsRollup)},
  { 466, 474, -1, sizeof(::CMsgClientToGCShowcaseAdminGetReportsRollupResponse)},
  { 476, 486, -1, sizeof(::CMsgShowcaseAuditEntry)},
  { 490, 500, -1, sizeof(::CMsgShowcaseReport)},
  { 504, 513, -1, sizeof(::CMsgShowcaseAdminUserDetails)},
  { 516, 523, -1, sizeof(::CMsgClientToGCShowcaseAdminGetUserDetails)},
  { 524, 532, -1, sizeof(::CMsgClientToGCShowcaseAdminGetUserDetailsResponse)},
  { 534, 542, -1, sizeof(::CMsgClientToGCShowcaseAdminReset)},
  { 544, 551, -1, sizeof(::CMsgClientToGCShowcaseAdminResetResponse)},
  { 552, 560, -1, sizeof(::CMsgClientToGCShowcaseAdminLockAccount)},
  { 562, 569, -1, sizeof(::CMsgClientToGCShowcaseAdminLockAccountResponse)},
  { 570, 578, -1, sizeof(::CMsgClientToGCShowcaseAdminConvict)},
  { 580, 587, -1, sizeof(::CMsgClientToGCShowcaseAdminConvictResponse)},
  { 588, 596, -1, sizeof(::CMsgClientToGCShowcaseAdminExonerate)},
  { 598, 605, -1, sizeof(::CMsgClientToGCShowcaseAdminExonerateResponse)},
  { 606, 615, -1, sizeof(::CMsgShowcaseModerationInfo)},
  { 618, 626, -1, sizeof(::CMsgClientToGCShowcaseModerationGetQueue)},
  { 628, 636, -1, sizeof(::CMsgClientToGCShowcaseModerationGetQueueResponse)},
  { 638, 648, -1, sizeof(::CMsgClientToGCShowcaseModerationApplyModeration)},
  { 652, 659, -1, sizeof(::CMsgClientToGCShowcaseModerationApplyModerationResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgShowcaseEconItemReference_default_instance_._instance,
  &::_CMsgHeroPlusInfo_default_instance_._instance,
  &::_CMsgShowcaseItem_Trophy_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_Trophy_default_instance_._instance,
  &::_CMsgShowcaseItem_EconItem_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_EconItem_default_instance_._instance,
  &::_CMsgShowcaseItem_Hero_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_Hero_default_instance_._instance,
  &::_CMsgShowcaseItem_HeroIcon_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_HeroIcon_default_instance_._instance,
  &::_CMsgShowcaseItem_PlayerMatch_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_PlayerMatch_default_instance_._instance,
  &::_CMsgShowcaseItem_ChatWheel_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_ChatWheel_default_instance_._instance,
  &::_CMsgShowcaseItem_Emoticon_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_Emoticon_default_instance_._instance,
  &::_CMsgShowcaseItem_SpiderGraph_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_SpiderGraph_default_instance_._instance,
  &::_CMsgShowcaseItem_UserFeed_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_UserFeed_default_instance_._instance,
  &::_CMsgShowcaseItem_Stat_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_Stat_default_instance_._instance,
  &::_CMsgShowcaseBackground_Data_default_instance_._instance,
  &::_CMsgShowcaseBackground_default_instance_._instance,
  &::_CMsgShowcaseItemData_default_instance_._instance,
  &::_CMsgShowcaseItemPosition_default_instance_._instance,
  &::_CMsgShowcaseItem_default_instance_._instance,
  &::_CMsgShowcase_default_instance_._instance,
  &::_CMsgClientToGCShowcaseGetUserData_default_instance_._instance,
  &::_CMsgClientToGCShowcaseGetUserDataResponse_default_instance_._instance,
  &::_CMsgClientToGCShowcaseSetUserData_default_instance_._instance,
  &::_CMsgClientToGCShowcaseSetUserDataResponse_default_instance_._instance,
  &::_CMsgClientToGCShowcaseSubmitReport_default_instance_._instance,
  &::_CMsgClientToGCShowcaseSubmitReportResponse_default_instance_._instance,
  &::_CMsgShowcaseReportsRollupInfo_default_instance_._instance,
  &::_CMsgShowcaseReportsRollupList_default_instance_._instance,
  &::_CMsgShowcaseReportsRollupEntry_default_instance_._instance,
  &::_CMsgShowcaseReportsRollup_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminGetReportsRollupList_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminGetReportsRollup_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminGetReportsRollupResponse_default_instance_._instance,
  &::_CMsgShowcaseAuditEntry_default_instance_._instance,
  &::_CMsgShowcaseReport_default_instance_._instance,
  &::_CMsgShowcaseAdminUserDetails_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminGetUserDetails_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminGetUserDetailsResponse_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminReset_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminResetResponse_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminLockAccount_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminLockAccountResponse_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminConvict_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminConvictResponse_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminExonerate_default_instance_._instance,
  &::_CMsgClientToGCShowcaseAdminExonerateResponse_default_instance_._instance,
  &::_CMsgShowcaseModerationInfo_default_instance_._instance,
  &::_CMsgClientToGCShowcaseModerationGetQueue_default_instance_._instance,
  &::_CMsgClientToGCShowcaseModerationGetQueueResponse_default_instance_._instance,
  &::_CMsgClientToGCShowcaseModerationApplyModeration_default_instance_._instance,
  &::_CMsgClientToGCShowcaseModerationApplyModerationResponse_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fshowcase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%dota_gcmessages_client_showcase.proto\032"
  "\023steammessages.proto\032\027dota_shared_enums."
  "proto\032\034dota_gcmessages_common.proto\032\034dot"
  "a_gcmessages_webapi.proto\032\026gcsdk_gcmessa"
  "ges.proto\032\025base_gcmessages.proto\032\025econ_g"
  "cmessages.proto\032\034dota_gcmessages_client."
  "proto\032\025valveextensions.proto\"|\n\035CMsgShow"
  "caseEconItemReference\022\n\n\002id\030\001 \001(\004\022\023\n\013ori"
  "ginal_id\030\002 \001(\004\022\030\n\020definition_index\030\003 \001(\r"
  "\022 \n\024equipment_slot_index\030\004 \001(\005:\002-1\"!\n\020CM"
  "sgHeroPlusInfo\022\r\n\005flags\030\001 \001(\r\"w\n\027CMsgSho"
  "wcaseItem_Trophy\022+\n\004data\030\001 \001(\0132\035.CMsgSho"
  "wcaseItem_Trophy.Data\022\021\n\ttrophy_id\030\002 \001(\r"
  "\032\034\n\004Data\022\024\n\014trophy_score\030\001 \001(\r\"\240\001\n\031CMsgS"
  "howcaseItem_EconItem\022-\n\004data\030\001 \001(\0132\037.CMs"
  "gShowcaseItem_EconItem.Data\022+\n\003ref\030\002 \001(\013"
  "2\036.CMsgShowcaseEconItemReference\032\'\n\004Data"
  "\022\037\n\tecon_item\030\001 \001(\0132\014.CSOEconItem\"\277\003\n\025CM"
  "sgShowcaseItem_Hero\022)\n\004data\030\001 \001(\0132\033.CMsg"
  "ShowcaseItem_Hero.Data\022\017\n\007hero_id\030\002 \001(\005\022"
  "6\n\016econ_item_refs\030\003 \003(\0132\036.CMsgShowcaseEc"
  "onItemReference\022\020\n\010rotation\030\004 \001(\r\022\r\n\005fla"
  "gs\030\005 \001(\r\022$\n\tplus_info\030\006 \001(\0132\021.CMsgHeroPl"
  "usInfo\022\026\n\016animation_name\030\007 \001(\t\022%\n\030animat"
  "ion_playback_speed\030\010 \001(\r:\003100\022\030\n\020animati"
  "on_offset\030\t \001(\r\022\021\n\004zoom\030\n \001(\r:\003100\022\022\n\nsl"
  "ot_index\030\013 \001(\r\022\023\n\013model_index\030\014 \001(\r\032V\n\004D"
  "ata\022 \n\necon_items\030\001 \003(\0132\014.CSOEconItem\022\026\n"
  "\016actual_hero_id\030\002 \001(\005\022\024\n\014plus_hero_xp\030\003 "
  "\001(\r\"\273\001\n\031CMsgShowcaseItem_HeroIcon\022-\n\004dat"
  "a\030\001 \001(\0132\037.CMsgShowcaseItem_HeroIcon.Data"
  "\022\017\n\007hero_id\030\002 \001(\005\0225\n\recon_item_ref\030\003 \001(\013"
  "2\036.CMsgShowcaseEconItemReference\032\'\n\004Data"
  "\022\037\n\tecon_item\030\001 \001(\0132\014.CSOEconItem\"\265\003\n\034CM"
  "sgShowcaseItem_PlayerMatch\0220\n\004data\030\001 \001(\013"
  "2\".CMsgShowcaseItem_PlayerMatch.Data\022\020\n\010"
  "match_id\030\002 \001(\004\022\023\n\013player_slot\030\003 \001(\r\032\356\001\n\004"
  "Data\022\017\n\007hero_id\030\001 \001(\005\022\021\n\ttimestamp\030\002 \001(\r"
  "\022\020\n\010duration\030\003 \001(\r\0225\n\tgame_mode\030\004 \001(\0162\016."
  "DOTA_GameMode:\022DOTA_GAMEMODE_NONE\022I\n\007out"
  "come\030\005 \001(\0162,.CMsgShowcaseItem_PlayerMatc"
  "h.EPlayerOutcome:\nk_eInvalid\022\r\n\005kills\030\006 "
  "\001(\r\022\016\n\006deaths\030\007 \001(\r\022\017\n\007assists\030\010 \001(\r\"K\n\016"
  "EPlayerOutcome\022\016\n\nk_eInvalid\020\000\022\n\n\006k_eWin"
  "\020\001\022\013\n\007k_eLoss\020\002\022\020\n\014k_eNotScored\020\003\"\177\n\032CMs"
  "gShowcaseItem_ChatWheel\022.\n\004data\030\001 \001(\0132 ."
  "CMsgShowcaseItem_ChatWheel.Data\022)\n\025chat_"
  "wheel_message_id\030\002 \001(\r:\n4294967295\032\006\n\004Da"
  "ta\"g\n\031CMsgShowcaseItem_Emoticon\022-\n\004data\030"
  "\001 \001(\0132\037.CMsgShowcaseItem_Emoticon.Data\022\023"
  "\n\013emoticon_id\030\002 \001(\r\032\006\n\004Data\"X\n\034CMsgShowc"
  "aseItem_SpiderGraph\0220\n\004data\030\001 \001(\0132\".CMsg"
  "ShowcaseItem_SpiderGraph.Data\032\006\n\004Data\"R\n"
  "\031CMsgShowcaseItem_UserFeed\022-\n\004data\030\001 \001(\013"
  "2\037.CMsgShowcaseItem_UserFeed.Data\032\006\n\004Dat"
  "a\"\233\001\n\025CMsgShowcaseItem_Stat\022)\n\004data\030\001 \001("
  "\0132\033.CMsgShowcaseItem_Stat.Data\022;\n\007stat_i"
  "d\030\002 \001(\0162\034.CMsgDOTAProfileCard.EStatID:\014k"
  "_eStat_Wins\032\032\n\004Data\022\022\n\nstat_score\030\001 \001(\r\""
  "\340\001\n\026CMsgShowcaseBackground\022*\n\004data\030\001 \001(\013"
  "2\034.CMsgShowcaseBackground.Data\022:\n\022loadin"
  "g_screen_ref\030\002 \001(\0132\036.CMsgShowcaseEconIte"
  "mReference\022\013\n\003dim\030\003 \001(\r\022\014\n\004blur\030\004 \001(\r\022\025\n"
  "\rbackground_id\030\005 \001(\r\032,\n\004Data\022$\n\016loading_"
  "screen\030\001 \001(\0132\014.CSOEconItem\"\330\007\n\024CMsgShowc"
  "aseItemData\022*\n\006trophy\030\001 \001(\0132\030.CMsgShowca"
  "seItem_TrophyH\000\0224\n\016econ_item_icon\030\002 \001(\0132"
  "\032.CMsgShowcaseItem_EconItemH\000\022-\n\007sticker"
  "\030\003 \001(\0132\032.CMsgShowcaseItem_EconItemH\000\022,\n\n"
  "hero_model\030\004 \001(\0132\026.CMsgShowcaseItem_Hero"
  "H\000\0225\n\014player_match\030\005 \001(\0132\035.CMsgShowcaseI"
  "tem_PlayerMatchH\000\0221\n\nchat_wheel\030\006 \001(\0132\033."
  "CMsgShowcaseItem_ChatWheelH\000\022,\n\005spray\030\007 "
  "\001(\0132\033.CMsgShowcaseItem_ChatWheelH\000\022.\n\010em"
  "oticon\030\010 \001(\0132\032.CMsgShowcaseItem_Emoticon"
  "H\000\022-\n\007courier\030\n \001(\0132\032.CMsgShowcaseItem_E"
  "conItemH\000\022*\n\004ward\030\013 \001(\0132\032.CMsgShowcaseIt"
  "em_EconItemH\000\022/\n\thero_icon\030\014 \001(\0132\032.CMsgS"
  "howcaseItem_HeroIconH\000\0225\n\014spider_graph\030\r"
  " \001(\0132\035.CMsgShowcaseItem_SpiderGraphH\000\022/\n"
  "\tuser_feed\030\016 \001(\0132\032.CMsgShowcaseItem_User"
  "FeedH\000\022&\n\004stat\030\017 \001(\0132\026.CMsgShowcaseItem_"
  "StatH\000\022,\n\006roshan\030\020 \001(\0132\032.CMsgShowcaseIte"
  "m_EconItemH\000\022+\n\005creep\030\021 \001(\0132\032.CMsgShowca"
  "seItem_EconItemH\000\022+\n\005tower\030\022 \001(\0132\032.CMsgS"
  "howcaseItem_EconItemH\000\022,\n\006effigy\030\023 \001(\0132\032"
  ".CMsgShowcaseItem_EconItemH\000\0220\n\ndecorati"
  "on\030\024 \001(\0132\032.CMsgShowcaseItem_EconItemH\000\022-"
  "\n\nbackground\030d \001(\0132\027.CMsgShowcaseBackgro"
  "undH\000B\006\n\004item\"\363\001\n\030CMsgShowcaseItemPositi"
  "on\022\022\n\nposition_x\030\001 \001(\005\022\022\n\nposition_y\030\002 \001"
  "(\005\022\r\n\005scale\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\022\016\n\006heig"
  "ht\030\005 \001(\r\022\020\n\010rotation\030\006 \001(\r\022\021\n\tparent_id\030"
  "\007 \001(\r\022\"\n\032parent_attachment_point_id\030\010 \001("
  "\r\022\033\n\023attachment_anchor_x\030\t \001(\r\022\033\n\023attach"
  "ment_anchor_y\030\n \001(\r\"\324\001\n\020CMsgShowcaseItem"
  "\022\030\n\020showcase_item_id\030\001 \001(\r\0220\n\ritem_posit"
  "ion\030\002 \001(\0132\031.CMsgShowcaseItemPosition\022(\n\t"
  "item_data\030\003 \001(\0132\025.CMsgShowcaseItemData\022;"
  "\n\005state\030\004 \001(\0162\023.EShowcaseItemState:\027k_eS"
  "howcaseItemState_Ok\022\r\n\005flags\030\005 \001(\r\"\210\002\n\014C"
  "MsgShowcase\022)\n\016showcase_items\030\001 \003(\0132\021.CM"
  "sgShowcaseItem\022%\n\nbackground\030\003 \001(\0132\021.CMs"
  "gShowcaseItem\022O\n\020moderation_state\030\004 \001(\0162"
  "\036.CMsgShowcase.EModerationState:\025k_eMode"
  "rationState_Ok\"U\n\020EModerationState\022\031\n\025k_"
  "eModerationState_Ok\020\000\022&\n\"k_eModerationSt"
  "ate_PendingApproval\020\001\"w\n!CMsgClientToGCS"
  "howcaseGetUserData\022\022\n\naccount_id\030\001 \001(\r\022>"
  "\n\rshowcase_type\030\002 \001(\0162\016.EShowcaseType:\027k"
  "_eShowcaseType_Invalid\"\242\002\n)CMsgClientToG"
  "CShowcaseGetUserDataResponse\022X\n\010response"
  "\030\001 \001(\01624.CMsgClientToGCShowcaseGetUserDa"
  "taResponse.EResponse:\020k_eInternalError\022\037"
  "\n\010showcase\030\002 \001(\0132\r.CMsgShowcase\"z\n\tEResp"
  "onse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eSuccess"
  "\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk"
  "_eTimeout\020\004\022\026\n\022k_eUnknownShowcase\020\005\"\234\001\n!"
  "CMsgClientToGCShowcaseSetUserData\022>\n\rsho"
  "wcase_type\030\001 \001(\0162\016.EShowcaseType:\027k_eSho"
  "wcaseType_Invalid\022\037\n\010showcase\030\002 \001(\0132\r.CM"
  "sgShowcase\022\026\n\016format_version\030\003 \001(\r\"\227\003\n)C"
  "MsgClientToGCShowcaseSetUserDataResponse"
  "\022X\n\010response\030\001 \001(\01624.CMsgClientToGCShowc"
  "aseSetUserDataResponse.EResponse:\020k_eInt"
  "ernalError\022)\n\022validated_showcase\030\002 \001(\0132\r"
  ".CMsgShowcase\022\036\n\026locked_until_timestamp\030"
  "\003 \001(\r\"\304\001\n\tEResponse\022\024\n\020k_eInternalError\020"
  "\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_e"
  "Disabled\020\003\022\016\n\nk_eTimeout\020\004\022\016\n\nk_eInvalid"
  "\020\005\022\030\n\024k_eLockedFromEditing\020\006\022\025\n\021k_eBudge"
  "tExceeded\020\007\022\037\n\033k_eCommunicationScoreTooL"
  "ow\020\010\"\227\001\n\"CMsgClientToGCShowcaseSubmitRep"
  "ort\022\031\n\021target_account_id\030\001 \001(\r\022>\n\rshowca"
  "se_type\030\002 \001(\0162\016.EShowcaseType:\027k_eShowca"
  "seType_Invalid\022\026\n\016report_comment\030\003 \001(\t\"\203"
  "\002\n*CMsgClientToGCShowcaseSubmitReportRes"
  "ponse\022Y\n\010response\030\001 \001(\01625.CMsgClientToGC"
  "ShowcaseSubmitReportResponse.EResponse:\020"
  "k_eInternalError\"z\n\tEResponse\022\024\n\020k_eInte"
  "rnalError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBus"
  "y\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eTimeout\020\004\022\026\n\022"
  "k_eAlreadyReported\020\005\"b\n\035CMsgShowcaseRepo"
  "rtsRollupInfo\022\021\n\trollup_id\030\001 \001(\r\022\027\n\017star"
  "t_timestamp\030\002 \001(\r\022\025\n\rend_timestamp\030\003 \001(\r"
  "\"P\n\035CMsgShowcaseReportsRollupList\022/\n\007rol"
  "lups\030\001 \003(\0132\036.CMsgShowcaseReportsRollupIn"
  "fo\"\212\001\n\036CMsgShowcaseReportsRollupEntry\022\022\n"
  "\naccount_id\030\001 \001(\r\022>\n\rshowcase_type\030\002 \001(\016"
  "2\016.EShowcaseType:\027k_eShowcaseType_Invali"
  "d\022\024\n\014report_count\030\003 \001(\r\"\211\001\n\031CMsgShowcase"
  "ReportsRollup\0223\n\013rollup_info\030\001 \001(\0132\036.CMs"
  "gShowcaseReportsRollupInfo\0227\n\016rollup_ent"
  "ries\030\002 \003(\0132\037.CMsgShowcaseReportsRollupEn"
  "try\"1\n/CMsgClientToGCShowcaseAdminGetRep"
  "ortsRollupList\"\317\002\n7CMsgClientToGCShowcas"
  "eAdminGetReportsRollupListResponse\022f\n\010re"
  "sponse\030\001 \001(\0162B.CMsgClientToGCShowcaseAdm"
  "inGetReportsRollupListResponse.EResponse"
  ":\020k_eInternalError\0223\n\013rollup_list\030\002 \001(\0132"
  "\036.CMsgShowcaseReportsRollupList\"w\n\tEResp"
  "onse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eSuccess"
  "\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk"
  "_eTimeout\020\004\022\023\n\017k_eNoPermission\020\005\"@\n+CMsg"
  "ClientToGCShowcaseAdminGetReportsRollup\022"
  "\021\n\trollup_id\030\001 \001(\r\"\320\002\n3CMsgClientToGCSho"
  "wcaseAdminGetReportsRollupResponse\022b\n\010re"
  "sponse\030\001 \001(\0162>.CMsgClientToGCShowcaseAdm"
  "inGetReportsRollupResponse.EResponse:\020k_"
  "eInternalError\022*\n\006rollup\030\002 \001(\0132\032.CMsgSho"
  "wcaseReportsRollup\"\210\001\n\tEResponse\022\024\n\020k_eI"
  "nternalError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eToo"
  "Busy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eTimeout\020\004\022"
  "\023\n\017k_eNoPermission\020\005\022\017\n\013k_eNotFound\020\006\"\314\001"
  "\n\026CMsgShowcaseAuditEntry\022>\n\rshowcase_typ"
  "e\030\001 \001(\0162\016.EShowcaseType:\027k_eShowcaseType"
  "_Invalid\022K\n\014audit_action\030\002 \001(\0162\025.EShowca"
  "seAuditAction:\036k_eShowcaseAuditAction_In"
  "valid\022\022\n\naudit_data\030\003 \001(\004\022\021\n\ttimestamp\030\004"
  " \001(\r\"\243\001\n\022CMsgShowcaseReport\022\033\n\023reporter_"
  "account_id\030\001 \001(\r\022>\n\rshowcase_type\030\002 \001(\0162"
  "\016.EShowcaseType:\027k_eShowcaseType_Invalid"
  "\022\030\n\020report_timestamp\030\003 \001(\r\022\026\n\016report_com"
  "ment\030\004 \001(\t\"\224\001\n\034CMsgShowcaseAdminUserDeta"
  "ils\022\036\n\026locked_until_timestamp\030\001 \001(\r\022.\n\ra"
  "udit_entries\030\002 \003(\0132\027.CMsgShowcaseAuditEn"
  "try\022$\n\007reports\030\003 \003(\0132\023.CMsgShowcaseRepor"
  "t\"\?\n)CMsgClientToGCShowcaseAdminGetUserD"
  "etails\022\022\n\naccount_id\030\001 \001(\r\"\303\002\n1CMsgClien"
  "tToGCShowcaseAdminGetUserDetailsResponse"
  "\022`\n\010response\030\001 \001(\0162<.CMsgClientToGCShowc"
  "aseAdminGetUserDetailsResponse.EResponse"
  ":\020k_eInternalError\0223\n\014user_details\030\002 \001(\013"
  "2\035.CMsgShowcaseAdminUserDetails\"w\n\tEResp"
  "onse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eSuccess"
  "\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk"
  "_eTimeout\020\004\022\023\n\017k_eNoPermission\020\005\"}\n CMsg"
  "ClientToGCShowcaseAdminReset\022\031\n\021target_a"
  "ccount_id\030\001 \001(\r\022>\n\rshowcase_type\030\002 \001(\0162\016"
  ".EShowcaseType:\027k_eShowcaseType_Invalid\""
  "\374\001\n(CMsgClientToGCShowcaseAdminResetResp"
  "onse\022W\n\010response\030\001 \001(\01623.CMsgClientToGCS"
  "howcaseAdminResetResponse.EResponse:\020k_e"
  "InternalError\"w\n\tEResponse\022\024\n\020k_eInterna"
  "lError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002"
  "\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eTimeout\020\004\022\023\n\017k_e"
  "NoPermission\020\005\"c\n&CMsgClientToGCShowcase"
  "AdminLockAccount\022\031\n\021target_account_id\030\001 "
  "\001(\r\022\036\n\026locked_until_timestamp\030\002 \001(\r\"\210\002\n."
  "CMsgClientToGCShowcaseAdminLockAccountRe"
  "sponse\022]\n\010response\030\001 \001(\01629.CMsgClientToG"
  "CShowcaseAdminLockAccountResponse.ERespo"
  "nse:\020k_eInternalError\"w\n\tEResponse\022\024\n\020k_"
  "eInternalError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eT"
  "ooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eTimeout\020"
  "\004\022\023\n\017k_eNoPermission\020\005\"\177\n\"CMsgClientToGC"
  "ShowcaseAdminConvict\022\031\n\021target_account_i"
  "d\030\001 \001(\r\022>\n\rshowcase_type\030\002 \001(\0162\016.EShowca"
  "seType:\027k_eShowcaseType_Invalid\"\232\002\n*CMsg"
  "ClientToGCShowcaseAdminConvictResponse\022Y"
  "\n\010response\030\001 \001(\01625.CMsgClientToGCShowcas"
  "eAdminConvictResponse.EResponse:\020k_eInte"
  "rnalError\"\220\001\n\tEResponse\022\024\n\020k_eInternalEr"
  "ror\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n"
  "\013k_eDisabled\020\003\022\016\n\nk_eTimeout\020\004\022\023\n\017k_eNoP"
  "ermission\020\005\022\027\n\023k_eAlreadyConvicted\020\006\"\201\001\n"
  "$CMsgClientToGCShowcaseAdminExonerate\022\031\n"
  "\021target_account_id\030\001 \001(\r\022>\n\rshowcase_typ"
  "e\030\002 \001(\0162\016.EShowcaseType:\027k_eShowcaseType"
  "_Invalid\"\237\002\n,CMsgClientToGCShowcaseAdmin"
  "ExonerateResponse\022[\n\010response\030\001 \001(\01627.CM"
  "sgClientToGCShowcaseAdminExonerateRespon"
  "se.EResponse:\020k_eInternalError\"\221\001\n\tEResp"
  "onse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eSuccess"
  "\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk"
  "_eTimeout\020\004\022\023\n\017k_eNoPermission\020\005\022\030\n\024k_eA"
  "lreadyExonerated\020\006\"\214\001\n\032CMsgShowcaseModer"
  "ationInfo\022\022\n\naccount_id\030\001 \001(\r\022>\n\rshowcas"
  "e_type\030\002 \001(\0162\016.EShowcaseType:\027k_eShowcas"
  "eType_Invalid\022\032\n\022showcase_timestamp\030\003 \001("
  "\r\"Y\n(CMsgClientToGCShowcaseModerationGet"
  "Queue\022\027\n\017start_timestamp\030\001 \001(\r\022\024\n\014result"
  "_count\030\002 \001(\r\"\274\002\n0CMsgClientToGCShowcaseM"
  "oderationGetQueueResponse\022_\n\010response\030\001 "
  "\001(\0162;.CMsgClientToGCShowcaseModerationGe"
  "tQueueResponse.EResponse:\020k_eInternalErr"
  "or\022.\n\tshowcases\030\002 \003(\0132\033.CMsgShowcaseMode"
  "rationInfo\"w\n\tEResponse\022\024\n\020k_eInternalEr"
  "ror\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n"
  "\013k_eDisabled\020\003\022\016\n\nk_eTimeout\020\004\022\023\n\017k_eNoP"
  "ermission\020\005\"\262\001\n/CMsgClientToGCShowcaseMo"
  "derationApplyModeration\022\022\n\naccount_id\030\001 "
  "\001(\r\022>\n\rshowcase_type\030\002 \001(\0162\016.EShowcaseTy"
  "pe:\027k_eShowcaseType_Invalid\022\032\n\022showcase_"
  "timestamp\030\003 \001(\r\022\017\n\007approve\030\004 \001(\010\"\250\002\n7CMs"
  "gClientToGCShowcaseModerationApplyModera"
  "tionResponse\022f\n\010response\030\001 \001(\0162B.CMsgCli"
  "entToGCShowcaseModerationApplyModeration"
  "Response.EResponse:\020k_eInternalError\"\204\001\n"
  "\tEResponse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eS"
  "uccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020"
  "\003\022\016\n\nk_eTimeout\020\004\022\023\n\017k_eNoPermission\020\005\022\013"
  "\n\007k_eGone\020\006*\213\002\n\025EShowcaseHeroPlusFlag\022 \n"
  "\034k_eShowcaseHeroPlusFlag_None\020\000\022\'\n#k_eSh"
  "owcaseHeroPlusFlag_BadgePosTop\020\001\022*\n&k_eS"
  "howcaseHeroPlusFlag_BadgePosBottom\020\002\022(\n$"
  "k_eShowcaseHeroPlusFlag_BadgePosLeft\020\004\022)"
  "\n%k_eShowcaseHeroPlusFlag_BadgePosRight\020"
  "\010\022&\n\"k_eShowcaseHeroPlusFlag_ShowRelics\020"
  "\020*\266\001\n\rEShowcaseType\022\033\n\027k_eShowcaseType_I"
  "nvalid\020\000\022\033\n\027k_eShowcaseType_Profile\020\001\022\037\n"
  "\033k_eShowcaseType_MiniProfile\020\002\022\"\n\036k_eSho"
  "wcaseType_DefaultProfile\020\003\022&\n\"k_eShowcas"
  "eType_DefaultMiniProfile\020\004*\367\001\n\022EShowcase"
  "ItemState\022\033\n\027k_eShowcaseItemState_Ok\020\000\022+"
  "\n\'k_eShowcaseItemState_MinorModification"
  "s\020\001\022(\n$k_eShowcaseItemState_ValidityUnkn"
  "own\020\002\022)\n%k_eShowcaseItemState_PartiallyI"
  "nvalid\020\003\022 \n\034k_eShowcaseItemState_Invalid"
  "\020\004\022 \n\034k_eShowcaseItemState_Failure\020\005*\233\003\n"
  "\024EShowcaseAuditAction\022\"\n\036k_eShowcaseAudi"
  "tAction_Invalid\020\000\022*\n&k_eShowcaseAuditAct"
  "ion_ShowcaseChanged\020\001\022-\n)k_eShowcaseAudi"
  "tAction_AdminShowcaseReset\020\002\0225\n1k_eShowc"
  "aseAuditAction_AdminShowcaseAccountLocke"
  "d\020\003\0222\n.k_eShowcaseAuditAction_AdminShowc"
  "aseExonerated\020\004\0221\n-k_eShowcaseAuditActio"
  "n_AdminShowcaseConvicted\020\005\0222\n.k_eShowcas"
  "eAuditAction_AdminModerationApproved\020\006\0222"
  "\n.k_eShowcaseAuditAction_AdminModeration"
  "Rejected\020\007*[\n\021EShowcaseItemFlag\022\034\n\030k_eSh"
  "owcaseItemFlag_None\020\000\022(\n$k_eShowcaseItem"
  "Flag_FlipHorizontally\020\001*\237\002\n\026EShowcaseIte"
  "mFlag_Hero\022!\n\035k_eShowcaseItemFlag_Hero_N"
  "one\020\000\022)\n%k_eShowcaseItemFlag_Hero_ShowPe"
  "destal\020\001\022.\n*k_eShowcaseItemFlag_Hero_Use"
  "CurrentLoadout\020\002\022)\n%k_eShowcaseItemFlag_"
  "Hero_ShowHeroCard\020\004\022-\n)k_eShowcaseItemFl"
  "ag_Hero_HeroCardHideName\020\010\022-\n)k_eShowcas"
  "eItemFlag_Hero_HeroCardUseMovie\020\020"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_deps[9] = {
  &::descriptor_table_base_5fgcmessages_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fclient_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fwebapi_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_econ_5fgcmessages_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
  &::descriptor_table_valveextensions_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto = {
    false, false, 11993, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fshowcase_2eproto,
    "dota_gcmessages_client_showcase.proto",
    &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_deps, 9, 60,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fshowcase_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[0];
}
bool CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch::k_eInvalid;
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch::k_eWin;
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch::k_eLoss;
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch::k_eNotScored;
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch::EPlayerOutcome_MIN;
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch::EPlayerOutcome_MAX;
constexpr int CMsgShowcaseItem_PlayerMatch::EPlayerOutcome_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgShowcase_EModerationState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[1];
}
bool CMsgShowcase_EModerationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgShowcase_EModerationState CMsgShowcase::k_eModerationState_Ok;
constexpr CMsgShowcase_EModerationState CMsgShowcase::k_eModerationState_PendingApproval;
constexpr CMsgShowcase_EModerationState CMsgShowcase::EModerationState_MIN;
constexpr CMsgShowcase_EModerationState CMsgShowcase::EModerationState_MAX;
constexpr int CMsgShowcase::EModerationState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseGetUserDataResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[2];
}
bool CMsgClientToGCShowcaseGetUserDataResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::k_eUnknownShowcase;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseGetUserDataResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseSetUserDataResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[3];
}
bool CMsgClientToGCShowcaseSetUserDataResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eInvalid;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eLockedFromEditing;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eBudgetExceeded;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eCommunicationScoreTooLow;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseSetUserDataResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseSubmitReportResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[4];
}
bool CMsgClientToGCShowcaseSubmitReportResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseSubmitReportResponse_EResponse CMsgClientToGCShowcaseSubmitReportResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseSubmitReportResponse_EResponse CMsgClientToGCShowcaseSubmitReportResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseSubmitReportResponse_EResponse CMsgClientToGCShowcaseSubmitReportResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseSubmitReportResponse_EResponse CMsgClientToGCShowcaseSubmitReportResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseSubmitReportResponse_EResponse CMsgClientToGCShowcaseSubmitReportResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseSubmitReportResponse_EResponse CMsgClientToGCShowcaseSubmitReportResponse::k_eAlreadyReported;
constexpr CMsgClientToGCShowcaseSubmitReportResponse_EResponse CMsgClientToGCShowcaseSubmitReportResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseSubmitReportResponse_EResponse CMsgClientToGCShowcaseSubmitReportResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseSubmitReportResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[5];
}
bool CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::k_eNoPermission;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[6];
}
bool CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse::k_eNoPermission;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse::k_eNotFound;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse CMsgClientToGCShowcaseAdminGetReportsRollupResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseAdminGetReportsRollupResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[7];
}
bool CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse CMsgClientToGCShowcaseAdminGetUserDetailsResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse CMsgClientToGCShowcaseAdminGetUserDetailsResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse CMsgClientToGCShowcaseAdminGetUserDetailsResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse CMsgClientToGCShowcaseAdminGetUserDetailsResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse CMsgClientToGCShowcaseAdminGetUserDetailsResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse CMsgClientToGCShowcaseAdminGetUserDetailsResponse::k_eNoPermission;
constexpr CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse CMsgClientToGCShowcaseAdminGetUserDetailsResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse CMsgClientToGCShowcaseAdminGetUserDetailsResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseAdminGetUserDetailsResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminResetResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[8];
}
bool CMsgClientToGCShowcaseAdminResetResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseAdminResetResponse_EResponse CMsgClientToGCShowcaseAdminResetResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminResetResponse_EResponse CMsgClientToGCShowcaseAdminResetResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseAdminResetResponse_EResponse CMsgClientToGCShowcaseAdminResetResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseAdminResetResponse_EResponse CMsgClientToGCShowcaseAdminResetResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseAdminResetResponse_EResponse CMsgClientToGCShowcaseAdminResetResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseAdminResetResponse_EResponse CMsgClientToGCShowcaseAdminResetResponse::k_eNoPermission;
constexpr CMsgClientToGCShowcaseAdminResetResponse_EResponse CMsgClientToGCShowcaseAdminResetResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseAdminResetResponse_EResponse CMsgClientToGCShowcaseAdminResetResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseAdminResetResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[9];
}
bool CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse CMsgClientToGCShowcaseAdminLockAccountResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse CMsgClientToGCShowcaseAdminLockAccountResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse CMsgClientToGCShowcaseAdminLockAccountResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse CMsgClientToGCShowcaseAdminLockAccountResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse CMsgClientToGCShowcaseAdminLockAccountResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse CMsgClientToGCShowcaseAdminLockAccountResponse::k_eNoPermission;
constexpr CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse CMsgClientToGCShowcaseAdminLockAccountResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse CMsgClientToGCShowcaseAdminLockAccountResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseAdminLockAccountResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminConvictResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[10];
}
bool CMsgClientToGCShowcaseAdminConvictResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse::k_eNoPermission;
constexpr CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse::k_eAlreadyConvicted;
constexpr CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseAdminConvictResponse_EResponse CMsgClientToGCShowcaseAdminConvictResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseAdminConvictResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[11];
}
bool CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse::k_eNoPermission;
constexpr CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse::k_eAlreadyExonerated;
constexpr CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseAdminExonerateResponse_EResponse CMsgClientToGCShowcaseAdminExonerateResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseAdminExonerateResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[12];
}
bool CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse CMsgClientToGCShowcaseModerationGetQueueResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse CMsgClientToGCShowcaseModerationGetQueueResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse CMsgClientToGCShowcaseModerationGetQueueResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse CMsgClientToGCShowcaseModerationGetQueueResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse CMsgClientToGCShowcaseModerationGetQueueResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse CMsgClientToGCShowcaseModerationGetQueueResponse::k_eNoPermission;
constexpr CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse CMsgClientToGCShowcaseModerationGetQueueResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse CMsgClientToGCShowcaseModerationGetQueueResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseModerationGetQueueResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[13];
}
bool CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse::k_eNoPermission;
constexpr CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse::k_eGone;
constexpr CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse CMsgClientToGCShowcaseModerationApplyModerationResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseModerationApplyModerationResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseHeroPlusFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[14];
}
bool EShowcaseHeroPlusFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[15];
}
bool EShowcaseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseItemState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[16];
}
bool EShowcaseItemState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseAuditAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[17];
}
bool EShowcaseAuditAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseItemFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[18];
}
bool EShowcaseItemFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseItemFlag_Hero_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[19];
}
bool EShowcaseItemFlag_Hero_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgShowcaseEconItemReference::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseEconItemReference>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_original_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_definition_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_equipment_slot_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgShowcaseEconItemReference::CMsgShowcaseEconItemReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseEconItemReference)
}
CMsgShowcaseEconItemReference::CMsgShowcaseEconItemReference(const CMsgShowcaseEconItemReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseEconItemReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.original_id_){}
    , decltype(_impl_.definition_index_){}
    , decltype(_impl_.equipment_slot_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.equipment_slot_index_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.equipment_slot_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseEconItemReference)
}

inline void CMsgShowcaseEconItemReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.original_id_){uint64_t{0u}}
    , decltype(_impl_.definition_index_){0u}
    , decltype(_impl_.equipment_slot_index_){-1}
  };
}

CMsgShowcaseEconItemReference::~CMsgShowcaseEconItemReference() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseEconItemReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseEconItemReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseEconItemReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseEconItemReference::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseEconItemReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.definition_index_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.definition_index_));
    _impl_.equipment_slot_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseEconItemReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 original_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_original_id(&has_bits);
          _impl_.original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 definition_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_definition_index(&has_bits);
          _impl_.definition_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 equipment_slot_index = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_equipment_slot_index(&has_bits);
          _impl_.equipment_slot_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseEconItemReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseEconItemReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 original_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_original_id(), target);
  }

  // optional uint32 definition_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_definition_index(), target);
  }

  // optional int32 equipment_slot_index = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_equipment_slot_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseEconItemReference)
  return target;
}

size_t CMsgShowcaseEconItemReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseEconItemReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint64 original_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_original_id());
    }

    // optional uint32 definition_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_definition_index());
    }

    // optional int32 equipment_slot_index = 4 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipment_slot_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseEconItemReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseEconItemReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseEconItemReference::GetClassData() const { return &_class_data_; }


void CMsgShowcaseEconItemReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseEconItemReference*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseEconItemReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseEconItemReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.original_id_ = from._impl_.original_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.definition_index_ = from._impl_.definition_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.equipment_slot_index_ = from._impl_.equipment_slot_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseEconItemReference::CopyFrom(const CMsgShowcaseEconItemReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseEconItemReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseEconItemReference::IsInitialized() const {
  return true;
}

void CMsgShowcaseEconItemReference::InternalSwap(CMsgShowcaseEconItemReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseEconItemReference, _impl_.definition_index_)
      + sizeof(CMsgShowcaseEconItemReference::_impl_.definition_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseEconItemReference, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
  swap(_impl_.equipment_slot_index_, other->_impl_.equipment_slot_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseEconItemReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[0]);
}

// ===================================================================

class CMsgHeroPlusInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHeroPlusInfo>()._impl_._has_bits_);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgHeroPlusInfo::CMsgHeroPlusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgHeroPlusInfo)
}
CMsgHeroPlusInfo::CMsgHeroPlusInfo(const CMsgHeroPlusInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgHeroPlusInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.flags_ = from._impl_.flags_;
  // @@protoc_insertion_point(copy_constructor:CMsgHeroPlusInfo)
}

inline void CMsgHeroPlusInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flags_){0u}
  };
}

CMsgHeroPlusInfo::~CMsgHeroPlusInfo() {
  // @@protoc_insertion_point(destructor:CMsgHeroPlusInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgHeroPlusInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgHeroPlusInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgHeroPlusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHeroPlusInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flags_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHeroPlusInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHeroPlusInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHeroPlusInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 flags = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHeroPlusInfo)
  return target;
}

size_t CMsgHeroPlusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHeroPlusInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 flags = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHeroPlusInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgHeroPlusInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHeroPlusInfo::GetClassData() const { return &_class_data_; }


void CMsgHeroPlusInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgHeroPlusInfo*>(&to_msg);
  auto& from = static_cast<const CMsgHeroPlusInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgHeroPlusInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flags()) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHeroPlusInfo::CopyFrom(const CMsgHeroPlusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHeroPlusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHeroPlusInfo::IsInitialized() const {
  return true;
}

void CMsgHeroPlusInfo::InternalSwap(CMsgHeroPlusInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.flags_, other->_impl_.flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHeroPlusInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[1]);
}

// ===================================================================

class CMsgShowcaseItem_Trophy_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_Trophy_Data>()._impl_._has_bits_);
  static void set_has_trophy_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgShowcaseItem_Trophy_Data::CMsgShowcaseItem_Trophy_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Trophy.Data)
}
CMsgShowcaseItem_Trophy_Data::CMsgShowcaseItem_Trophy_Data(const CMsgShowcaseItem_Trophy_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Trophy_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trophy_score_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.trophy_score_ = from._impl_.trophy_score_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Trophy.Data)
}

inline void CMsgShowcaseItem_Trophy_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trophy_score_){0u}
  };
}

CMsgShowcaseItem_Trophy_Data::~CMsgShowcaseItem_Trophy_Data() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Trophy.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Trophy_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseItem_Trophy_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Trophy_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Trophy.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trophy_score_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Trophy_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 trophy_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_trophy_score(&has_bits);
          _impl_.trophy_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Trophy_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Trophy.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 trophy_score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_trophy_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Trophy.Data)
  return target;
}

size_t CMsgShowcaseItem_Trophy_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Trophy.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 trophy_score = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trophy_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Trophy_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Trophy_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Trophy_Data::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Trophy_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Trophy_Data*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Trophy_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Trophy.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trophy_score()) {
    _this->_internal_set_trophy_score(from._internal_trophy_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Trophy_Data::CopyFrom(const CMsgShowcaseItem_Trophy_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Trophy.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Trophy_Data::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Trophy_Data::InternalSwap(CMsgShowcaseItem_Trophy_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.trophy_score_, other->_impl_.trophy_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Trophy_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[2]);
}

// ===================================================================

class CMsgShowcaseItem_Trophy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_Trophy>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_Trophy_Data& data(const CMsgShowcaseItem_Trophy* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem_Trophy_Data&
CMsgShowcaseItem_Trophy::_Internal::data(const CMsgShowcaseItem_Trophy* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_Trophy::CMsgShowcaseItem_Trophy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Trophy)
}
CMsgShowcaseItem_Trophy::CMsgShowcaseItem_Trophy(const CMsgShowcaseItem_Trophy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Trophy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.trophy_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_Trophy_Data(*from._impl_.data_);
  }
  _this->_impl_.trophy_id_ = from._impl_.trophy_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Trophy)
}

inline void CMsgShowcaseItem_Trophy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.trophy_id_){0u}
  };
}

CMsgShowcaseItem_Trophy::~CMsgShowcaseItem_Trophy() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Trophy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Trophy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_Trophy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Trophy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Trophy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_.trophy_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Trophy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_Trophy.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trophy_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_trophy_id(&has_bits);
          _impl_.trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Trophy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Trophy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_Trophy.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trophy_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Trophy)
  return target;
}

size_t CMsgShowcaseItem_Trophy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Trophy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseItem_Trophy.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional uint32 trophy_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trophy_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Trophy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Trophy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Trophy::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Trophy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Trophy*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Trophy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Trophy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_Trophy_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.trophy_id_ = from._impl_.trophy_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Trophy::CopyFrom(const CMsgShowcaseItem_Trophy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Trophy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Trophy::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Trophy::InternalSwap(CMsgShowcaseItem_Trophy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Trophy, _impl_.trophy_id_)
      + sizeof(CMsgShowcaseItem_Trophy::_impl_.trophy_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Trophy, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Trophy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[3]);
}

// ===================================================================

class CMsgShowcaseItem_EconItem_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_EconItem_Data>()._impl_._has_bits_);
  static const ::CSOEconItem& econ_item(const CMsgShowcaseItem_EconItem_Data* msg);
  static void set_has_econ_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSOEconItem&
CMsgShowcaseItem_EconItem_Data::_Internal::econ_item(const CMsgShowcaseItem_EconItem_Data* msg) {
  return *msg->_impl_.econ_item_;
}
void CMsgShowcaseItem_EconItem_Data::clear_econ_item() {
  if (_impl_.econ_item_ != nullptr) _impl_.econ_item_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgShowcaseItem_EconItem_Data::CMsgShowcaseItem_EconItem_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_EconItem.Data)
}
CMsgShowcaseItem_EconItem_Data::CMsgShowcaseItem_EconItem_Data(const CMsgShowcaseItem_EconItem_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_EconItem_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_item_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_econ_item()) {
    _this->_impl_.econ_item_ = new ::CSOEconItem(*from._impl_.econ_item_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_EconItem.Data)
}

inline void CMsgShowcaseItem_EconItem_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_item_){nullptr}
  };
}

CMsgShowcaseItem_EconItem_Data::~CMsgShowcaseItem_EconItem_Data() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_EconItem.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_EconItem_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.econ_item_;
}

void CMsgShowcaseItem_EconItem_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_EconItem_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_EconItem.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.econ_item_ != nullptr);
    _impl_.econ_item_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_EconItem_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CSOEconItem econ_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_econ_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_EconItem_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_EconItem.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSOEconItem econ_item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::econ_item(this),
        _Internal::econ_item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_EconItem.Data)
  return target;
}

size_t CMsgShowcaseItem_EconItem_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_EconItem.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CSOEconItem econ_item = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.econ_item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_EconItem_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_EconItem_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_EconItem_Data::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_EconItem_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_EconItem_Data*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_EconItem_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_EconItem.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_econ_item()) {
    _this->_internal_mutable_econ_item()->::CSOEconItem::MergeFrom(
        from._internal_econ_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_EconItem_Data::CopyFrom(const CMsgShowcaseItem_EconItem_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_EconItem.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_EconItem_Data::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_EconItem_Data::InternalSwap(CMsgShowcaseItem_EconItem_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.econ_item_, other->_impl_.econ_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_EconItem_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[4]);
}

// ===================================================================

class CMsgShowcaseItem_EconItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_EconItem>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_EconItem_Data& data(const CMsgShowcaseItem_EconItem* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgShowcaseEconItemReference& ref(const CMsgShowcaseItem_EconItem* msg);
  static void set_has_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem_EconItem_Data&
CMsgShowcaseItem_EconItem::_Internal::data(const CMsgShowcaseItem_EconItem* msg) {
  return *msg->_impl_.data_;
}
const ::CMsgShowcaseEconItemReference&
CMsgShowcaseItem_EconItem::_Internal::ref(const CMsgShowcaseItem_EconItem* msg) {
  return *msg->_impl_.ref_;
}
CMsgShowcaseItem_EconItem::CMsgShowcaseItem_EconItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_EconItem)
}
CMsgShowcaseItem_EconItem::CMsgShowcaseItem_EconItem(const CMsgShowcaseItem_EconItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_EconItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.ref_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_EconItem_Data(*from._impl_.data_);
  }
  if (from._internal_has_ref()) {
    _this->_impl_.ref_ = new ::CMsgShowcaseEconItemReference(*from._impl_.ref_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_EconItem)
}

inline void CMsgShowcaseItem_EconItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.ref_){nullptr}
  };
}

CMsgShowcaseItem_EconItem::~CMsgShowcaseItem_EconItem() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_EconItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_EconItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.ref_;
}

void CMsgShowcaseItem_EconItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_EconItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_EconItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ref_ != nullptr);
      _impl_.ref_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_EconItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_EconItem.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseEconItemReference ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_EconItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_EconItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_EconItem.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgShowcaseEconItemReference ref = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ref(this),
        _Internal::ref(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_EconItem)
  return target;
}

size_t CMsgShowcaseItem_EconItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_EconItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseItem_EconItem.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional .CMsgShowcaseEconItemReference ref = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ref_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_EconItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_EconItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_EconItem::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_EconItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_EconItem*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_EconItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_EconItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_EconItem_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ref()->::CMsgShowcaseEconItemReference::MergeFrom(
          from._internal_ref());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_EconItem::CopyFrom(const CMsgShowcaseItem_EconItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_EconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_EconItem::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_EconItem::InternalSwap(CMsgShowcaseItem_EconItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_EconItem, _impl_.ref_)
      + sizeof(CMsgShowcaseItem_EconItem::_impl_.ref_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_EconItem, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_EconItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[5]);
}

// ===================================================================

class CMsgShowcaseItem_Hero_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_Hero_Data>()._impl_._has_bits_);
  static void set_has_actual_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_plus_hero_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CMsgShowcaseItem_Hero_Data::clear_econ_items() {
  _impl_.econ_items_.Clear();
}
CMsgShowcaseItem_Hero_Data::CMsgShowcaseItem_Hero_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Hero.Data)
}
CMsgShowcaseItem_Hero_Data::CMsgShowcaseItem_Hero_Data(const CMsgShowcaseItem_Hero_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Hero_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_items_){from._impl_.econ_items_}
    , decltype(_impl_.actual_hero_id_){}
    , decltype(_impl_.plus_hero_xp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.actual_hero_id_, &from._impl_.actual_hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.plus_hero_xp_) -
    reinterpret_cast<char*>(&_impl_.actual_hero_id_)) + sizeof(_impl_.plus_hero_xp_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Hero.Data)
}

inline void CMsgShowcaseItem_Hero_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_items_){arena}
    , decltype(_impl_.actual_hero_id_){0}
    , decltype(_impl_.plus_hero_xp_){0u}
  };
}

CMsgShowcaseItem_Hero_Data::~CMsgShowcaseItem_Hero_Data() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Hero.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Hero_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.econ_items_.~RepeatedPtrField();
}

void CMsgShowcaseItem_Hero_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Hero_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Hero.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.econ_items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.actual_hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.plus_hero_xp_) -
        reinterpret_cast<char*>(&_impl_.actual_hero_id_)) + sizeof(_impl_.plus_hero_xp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Hero_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CSOEconItem econ_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_econ_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 actual_hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_actual_hero_id(&has_bits);
          _impl_.actual_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 plus_hero_xp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_plus_hero_xp(&has_bits);
          _impl_.plus_hero_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Hero_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Hero.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSOEconItem econ_items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_econ_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_econ_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 actual_hero_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_actual_hero_id(), target);
  }

  // optional uint32 plus_hero_xp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_plus_hero_xp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Hero.Data)
  return target;
}

size_t CMsgShowcaseItem_Hero_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Hero.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOEconItem econ_items = 1;
  total_size += 1UL * this->_internal_econ_items_size();
  for (const auto& msg : this->_impl_.econ_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 actual_hero_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actual_hero_id());
    }

    // optional uint32 plus_hero_xp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_plus_hero_xp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Hero_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Hero_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Hero_Data::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Hero_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Hero_Data*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Hero_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Hero.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.econ_items_.MergeFrom(from._impl_.econ_items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.actual_hero_id_ = from._impl_.actual_hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.plus_hero_xp_ = from._impl_.plus_hero_xp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Hero_Data::CopyFrom(const CMsgShowcaseItem_Hero_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Hero.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Hero_Data::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Hero_Data::InternalSwap(CMsgShowcaseItem_Hero_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.econ_items_.InternalSwap(&other->_impl_.econ_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Hero_Data, _impl_.plus_hero_xp_)
      + sizeof(CMsgShowcaseItem_Hero_Data::_impl_.plus_hero_xp_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Hero_Data, _impl_.actual_hero_id_)>(
          reinterpret_cast<char*>(&_impl_.actual_hero_id_),
          reinterpret_cast<char*>(&other->_impl_.actual_hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Hero_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[6]);
}

// ===================================================================

class CMsgShowcaseItem_Hero::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_Hero>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_Hero_Data& data(const CMsgShowcaseItem_Hero* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgHeroPlusInfo& plus_info(const CMsgShowcaseItem_Hero* msg);
  static void set_has_plus_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_animation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_animation_playback_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_animation_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_zoom(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_slot_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_model_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CMsgShowcaseItem_Hero_Data&
CMsgShowcaseItem_Hero::_Internal::data(const CMsgShowcaseItem_Hero* msg) {
  return *msg->_impl_.data_;
}
const ::CMsgHeroPlusInfo&
CMsgShowcaseItem_Hero::_Internal::plus_info(const CMsgShowcaseItem_Hero* msg) {
  return *msg->_impl_.plus_info_;
}
CMsgShowcaseItem_Hero::CMsgShowcaseItem_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Hero)
}
CMsgShowcaseItem_Hero::CMsgShowcaseItem_Hero(const CMsgShowcaseItem_Hero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Hero* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_item_refs_){from._impl_.econ_item_refs_}
    , decltype(_impl_.animation_name_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.plus_info_){nullptr}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.rotation_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.animation_offset_){}
    , decltype(_impl_.slot_index_){}
    , decltype(_impl_.model_index_){}
    , decltype(_impl_.animation_playback_speed_){}
    , decltype(_impl_.zoom_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.animation_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animation_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_animation_name()) {
    _this->_impl_.animation_name_.Set(from._internal_animation_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_Hero_Data(*from._impl_.data_);
  }
  if (from._internal_has_plus_info()) {
    _this->_impl_.plus_info_ = new ::CMsgHeroPlusInfo(*from._impl_.plus_info_);
  }
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.zoom_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.zoom_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Hero)
}

inline void CMsgShowcaseItem_Hero::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_item_refs_){arena}
    , decltype(_impl_.animation_name_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.plus_info_){nullptr}
    , decltype(_impl_.hero_id_){0}
    , decltype(_impl_.rotation_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.animation_offset_){0u}
    , decltype(_impl_.slot_index_){0u}
    , decltype(_impl_.model_index_){0u}
    , decltype(_impl_.animation_playback_speed_){100u}
    , decltype(_impl_.zoom_){100u}
  };
  _impl_.animation_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animation_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgShowcaseItem_Hero::~CMsgShowcaseItem_Hero() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Hero)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Hero::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.econ_item_refs_.~RepeatedPtrField();
  _impl_.animation_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.plus_info_;
}

void CMsgShowcaseItem_Hero::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Hero::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Hero)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.econ_item_refs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.animation_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.plus_info_ != nullptr);
      _impl_.plus_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.slot_index_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.slot_index_));
  }
  if (cached_has_bits & 0x00000700u) {
    _impl_.model_index_ = 0u;
    _impl_.animation_playback_speed_ = 100u;
    _impl_.zoom_ = 100u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Hero::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_Hero.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgShowcaseEconItemReference econ_item_refs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_econ_item_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rotation(&has_bits);
          _impl_.rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgHeroPlusInfo plus_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_plus_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string animation_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_animation_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgShowcaseItem_Hero.animation_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 animation_playback_speed = 8 [default = 100];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_animation_playback_speed(&has_bits);
          _impl_.animation_playback_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 animation_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_animation_offset(&has_bits);
          _impl_.animation_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 zoom = 10 [default = 100];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_zoom(&has_bits);
          _impl_.zoom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slot_index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_slot_index(&has_bits);
          _impl_.slot_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 model_index = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_model_index(&has_bits);
          _impl_.model_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Hero::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Hero)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_Hero.Data data = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional int32 hero_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // repeated .CMsgShowcaseEconItemReference econ_item_refs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_econ_item_refs_size()); i < n; i++) {
    const auto& repfield = this->_internal_econ_item_refs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 rotation = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rotation(), target);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  // optional .CMsgHeroPlusInfo plus_info = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::plus_info(this),
        _Internal::plus_info(this).GetCachedSize(), target, stream);
  }

  // optional string animation_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_animation_name().data(), static_cast<int>(this->_internal_animation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgShowcaseItem_Hero.animation_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_animation_name(), target);
  }

  // optional uint32 animation_playback_speed = 8 [default = 100];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_animation_playback_speed(), target);
  }

  // optional uint32 animation_offset = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_animation_offset(), target);
  }

  // optional uint32 zoom = 10 [default = 100];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_zoom(), target);
  }

  // optional uint32 slot_index = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_slot_index(), target);
  }

  // optional uint32 model_index = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_model_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Hero)
  return target;
}

size_t CMsgShowcaseItem_Hero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Hero)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgShowcaseEconItemReference econ_item_refs = 3;
  total_size += 1UL * this->_internal_econ_item_refs_size();
  for (const auto& msg : this->_impl_.econ_item_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string animation_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_animation_name());
    }

    // optional .CMsgShowcaseItem_Hero.Data data = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional .CMsgHeroPlusInfo plus_info = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.plus_info_);
    }

    // optional int32 hero_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 rotation = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotation());
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional uint32 animation_offset = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_animation_offset());
    }

    // optional uint32 slot_index = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot_index());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 model_index = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_model_index());
    }

    // optional uint32 animation_playback_speed = 8 [default = 100];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_animation_playback_speed());
    }

    // optional uint32 zoom = 10 [default = 100];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zoom());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Hero::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Hero::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Hero::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Hero::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Hero*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Hero&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Hero)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.econ_item_refs_.MergeFrom(from._impl_.econ_item_refs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_animation_name(from._internal_animation_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_Hero_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_plus_info()->::CMsgHeroPlusInfo::MergeFrom(
          from._internal_plus_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rotation_ = from._impl_.rotation_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.animation_offset_ = from._impl_.animation_offset_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.slot_index_ = from._impl_.slot_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.model_index_ = from._impl_.model_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.animation_playback_speed_ = from._impl_.animation_playback_speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.zoom_ = from._impl_.zoom_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Hero::CopyFrom(const CMsgShowcaseItem_Hero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Hero::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Hero::InternalSwap(CMsgShowcaseItem_Hero* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.econ_item_refs_.InternalSwap(&other->_impl_.econ_item_refs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.animation_name_, lhs_arena,
      &other->_impl_.animation_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Hero, _impl_.model_index_)
      + sizeof(CMsgShowcaseItem_Hero::_impl_.model_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Hero, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
  swap(_impl_.animation_playback_speed_, other->_impl_.animation_playback_speed_);
  swap(_impl_.zoom_, other->_impl_.zoom_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Hero::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[7]);
}

// ===================================================================

class CMsgShowcaseItem_HeroIcon_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_HeroIcon_Data>()._impl_._has_bits_);
  static const ::CSOEconItem& econ_item(const CMsgShowcaseItem_HeroIcon_Data* msg);
  static void set_has_econ_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSOEconItem&
CMsgShowcaseItem_HeroIcon_Data::_Internal::econ_item(const CMsgShowcaseItem_HeroIcon_Data* msg) {
  return *msg->_impl_.econ_item_;
}
void CMsgShowcaseItem_HeroIcon_Data::clear_econ_item() {
  if (_impl_.econ_item_ != nullptr) _impl_.econ_item_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgShowcaseItem_HeroIcon_Data::CMsgShowcaseItem_HeroIcon_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_HeroIcon.Data)
}
CMsgShowcaseItem_HeroIcon_Data::CMsgShowcaseItem_HeroIcon_Data(const CMsgShowcaseItem_HeroIcon_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_HeroIcon_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_item_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_econ_item()) {
    _this->_impl_.econ_item_ = new ::CSOEconItem(*from._impl_.econ_item_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_HeroIcon.Data)
}

inline void CMsgShowcaseItem_HeroIcon_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_item_){nullptr}
  };
}

CMsgShowcaseItem_HeroIcon_Data::~CMsgShowcaseItem_HeroIcon_Data() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_HeroIcon.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_HeroIcon_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.econ_item_;
}

void CMsgShowcaseItem_HeroIcon_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_HeroIcon_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_HeroIcon.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.econ_item_ != nullptr);
    _impl_.econ_item_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_HeroIcon_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CSOEconItem econ_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_econ_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_HeroIcon_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_HeroIcon.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSOEconItem econ_item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::econ_item(this),
        _Internal::econ_item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_HeroIcon.Data)
  return target;
}

size_t CMsgShowcaseItem_HeroIcon_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_HeroIcon.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CSOEconItem econ_item = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.econ_item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_HeroIcon_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_HeroIcon_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_HeroIcon_Data::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_HeroIcon_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_HeroIcon_Data*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_HeroIcon_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_HeroIcon.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_econ_item()) {
    _this->_internal_mutable_econ_item()->::CSOEconItem::MergeFrom(
        from._internal_econ_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_HeroIcon_Data::CopyFrom(const CMsgShowcaseItem_HeroIcon_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_HeroIcon.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_HeroIcon_Data::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_HeroIcon_Data::InternalSwap(CMsgShowcaseItem_HeroIcon_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.econ_item_, other->_impl_.econ_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_HeroIcon_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[8]);
}

// ===================================================================

class CMsgShowcaseItem_HeroIcon::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_HeroIcon>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_HeroIcon_Data& data(const CMsgShowcaseItem_HeroIcon* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgShowcaseEconItemReference& econ_item_ref(const CMsgShowcaseItem_HeroIcon* msg);
  static void set_has_econ_item_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem_HeroIcon_Data&
CMsgShowcaseItem_HeroIcon::_Internal::data(const CMsgShowcaseItem_HeroIcon* msg) {
  return *msg->_impl_.data_;
}
const ::CMsgShowcaseEconItemReference&
CMsgShowcaseItem_HeroIcon::_Internal::econ_item_ref(const CMsgShowcaseItem_HeroIcon* msg) {
  return *msg->_impl_.econ_item_ref_;
}
CMsgShowcaseItem_HeroIcon::CMsgShowcaseItem_HeroIcon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_HeroIcon)
}
CMsgShowcaseItem_HeroIcon::CMsgShowcaseItem_HeroIcon(const CMsgShowcaseItem_HeroIcon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_HeroIcon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.econ_item_ref_){nullptr}
    , decltype(_impl_.hero_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_HeroIcon_Data(*from._impl_.data_);
  }
  if (from._internal_has_econ_item_ref()) {
    _this->_impl_.econ_item_ref_ = new ::CMsgShowcaseEconItemReference(*from._impl_.econ_item_ref_);
  }
  _this->_impl_.hero_id_ = from._impl_.hero_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_HeroIcon)
}

inline void CMsgShowcaseItem_HeroIcon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.econ_item_ref_){nullptr}
    , decltype(_impl_.hero_id_){0}
  };
}

CMsgShowcaseItem_HeroIcon::~CMsgShowcaseItem_HeroIcon() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_HeroIcon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_HeroIcon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.econ_item_ref_;
}

void CMsgShowcaseItem_HeroIcon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_HeroIcon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_HeroIcon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.econ_item_ref_ != nullptr);
      _impl_.econ_item_ref_->Clear();
    }
  }
  _impl_.hero_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_HeroIcon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_HeroIcon.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseEconItemReference econ_item_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_econ_item_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_HeroIcon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_HeroIcon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_HeroIcon.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional int32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional .CMsgShowcaseEconItemReference econ_item_ref = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::econ_item_ref(this),
        _Internal::econ_item_ref(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_HeroIcon)
  return target;
}

size_t CMsgShowcaseItem_HeroIcon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_HeroIcon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgShowcaseItem_HeroIcon.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional .CMsgShowcaseEconItemReference econ_item_ref = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.econ_item_ref_);
    }

    // optional int32 hero_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hero_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_HeroIcon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_HeroIcon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_HeroIcon::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_HeroIcon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_HeroIcon*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_HeroIcon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_HeroIcon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_HeroIcon_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_econ_item_ref()->::CMsgShowcaseEconItemReference::MergeFrom(
          from._internal_econ_item_ref());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_HeroIcon::CopyFrom(const CMsgShowcaseItem_HeroIcon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_HeroIcon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_HeroIcon::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_HeroIcon::InternalSwap(CMsgShowcaseItem_HeroIcon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_HeroIcon, _impl_.hero_id_)
      + sizeof(CMsgShowcaseItem_HeroIcon::_impl_.hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_HeroIcon, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_HeroIcon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[9]);
}

// ===================================================================

class CMsgShowcaseItem_PlayerMatch_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_PlayerMatch_Data>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_outcome(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgShowcaseItem_PlayerMatch_Data::CMsgShowcaseItem_PlayerMatch_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_PlayerMatch.Data)
}
CMsgShowcaseItem_PlayerMatch_Data::CMsgShowcaseItem_PlayerMatch_Data(const CMsgShowcaseItem_PlayerMatch_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_PlayerMatch_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.outcome_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.assists_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.assists_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_PlayerMatch.Data)
}

inline void CMsgShowcaseItem_PlayerMatch_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.game_mode_){0}
    , decltype(_impl_.outcome_){0}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.assists_){0u}
  };
}

CMsgShowcaseItem_PlayerMatch_Data::~CMsgShowcaseItem_PlayerMatch_Data() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_PlayerMatch.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_PlayerMatch_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseItem_PlayerMatch_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_PlayerMatch_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_PlayerMatch.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.assists_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.assists_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_PlayerMatch_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::DOTA_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseItem_PlayerMatch.EPlayerOutcome outcome = 5 [default = k_eInvalid];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_IsValid(val))) {
            _internal_set_outcome(static_cast<::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_deaths(&has_bits);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_assists(&has_bits);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_PlayerMatch_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_PlayerMatch.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_game_mode(), target);
  }

  // optional .CMsgShowcaseItem_PlayerMatch.EPlayerOutcome outcome = 5 [default = k_eInvalid];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_outcome(), target);
  }

  // optional uint32 kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_assists(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_PlayerMatch.Data)
  return target;
}

size_t CMsgShowcaseItem_PlayerMatch_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_PlayerMatch.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

    // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional .CMsgShowcaseItem_PlayerMatch.EPlayerOutcome outcome = 5 [default = k_eInvalid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_outcome());
    }

    // optional uint32 kills = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 deaths = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 assists = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assists());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_PlayerMatch_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_PlayerMatch_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_PlayerMatch_Data::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_PlayerMatch_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_PlayerMatch_Data*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_PlayerMatch_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_PlayerMatch.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.outcome_ = from._impl_.outcome_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_PlayerMatch_Data::CopyFrom(const CMsgShowcaseItem_PlayerMatch_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_PlayerMatch.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_PlayerMatch_Data::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_PlayerMatch_Data::InternalSwap(CMsgShowcaseItem_PlayerMatch_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_PlayerMatch_Data, _impl_.assists_)
      + sizeof(CMsgShowcaseItem_PlayerMatch_Data::_impl_.assists_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_PlayerMatch_Data, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_PlayerMatch_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[10]);
}

// ===================================================================

class CMsgShowcaseItem_PlayerMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_PlayerMatch>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_PlayerMatch_Data& data(const CMsgShowcaseItem_PlayerMatch* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgShowcaseItem_PlayerMatch_Data&
CMsgShowcaseItem_PlayerMatch::_Internal::data(const CMsgShowcaseItem_PlayerMatch* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_PlayerMatch::CMsgShowcaseItem_PlayerMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_PlayerMatch)
}
CMsgShowcaseItem_PlayerMatch::CMsgShowcaseItem_PlayerMatch(const CMsgShowcaseItem_PlayerMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_PlayerMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_PlayerMatch_Data(*from._impl_.data_);
  }
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_slot_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.player_slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_PlayerMatch)
}

inline void CMsgShowcaseItem_PlayerMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.player_slot_){0u}
  };
}

CMsgShowcaseItem_PlayerMatch::~CMsgShowcaseItem_PlayerMatch() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_PlayerMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_PlayerMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_PlayerMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_PlayerMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_PlayerMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_slot_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.player_slot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_PlayerMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_PlayerMatch.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_PlayerMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_PlayerMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_PlayerMatch.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_PlayerMatch)
  return target;
}

size_t CMsgShowcaseItem_PlayerMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_PlayerMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgShowcaseItem_PlayerMatch.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 player_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_PlayerMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_PlayerMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_PlayerMatch::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_PlayerMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_PlayerMatch*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_PlayerMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_PlayerMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_PlayerMatch_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_PlayerMatch::CopyFrom(const CMsgShowcaseItem_PlayerMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_PlayerMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_PlayerMatch::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_PlayerMatch::InternalSwap(CMsgShowcaseItem_PlayerMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_PlayerMatch, _impl_.player_slot_)
      + sizeof(CMsgShowcaseItem_PlayerMatch::_impl_.player_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_PlayerMatch, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_PlayerMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[11]);
}

// ===================================================================

class CMsgShowcaseItem_ChatWheel_Data::_Internal {
 public:
};

CMsgShowcaseItem_ChatWheel_Data::CMsgShowcaseItem_ChatWheel_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_ChatWheel.Data)
}
CMsgShowcaseItem_ChatWheel_Data::CMsgShowcaseItem_ChatWheel_Data(const CMsgShowcaseItem_ChatWheel_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgShowcaseItem_ChatWheel_Data* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_ChatWheel.Data)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_ChatWheel_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_ChatWheel_Data::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_ChatWheel_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[12]);
}

// ===================================================================

class CMsgShowcaseItem_ChatWheel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_ChatWheel>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_ChatWheel_Data& data(const CMsgShowcaseItem_ChatWheel* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_wheel_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem_ChatWheel_Data&
CMsgShowcaseItem_ChatWheel::_Internal::data(const CMsgShowcaseItem_ChatWheel* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_ChatWheel::CMsgShowcaseItem_ChatWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_ChatWheel)
}
CMsgShowcaseItem_ChatWheel::CMsgShowcaseItem_ChatWheel(const CMsgShowcaseItem_ChatWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_ChatWheel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.chat_wheel_message_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_ChatWheel_Data(*from._impl_.data_);
  }
  _this->_impl_.chat_wheel_message_id_ = from._impl_.chat_wheel_message_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_ChatWheel)
}

inline void CMsgShowcaseItem_ChatWheel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.chat_wheel_message_id_){4294967295u}
  };
}

CMsgShowcaseItem_ChatWheel::~CMsgShowcaseItem_ChatWheel() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_ChatWheel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_ChatWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_ChatWheel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_ChatWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_ChatWheel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    _impl_.chat_wheel_message_id_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_ChatWheel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_ChatWheel.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chat_wheel_message_id = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_wheel_message_id(&has_bits);
          _impl_.chat_wheel_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_ChatWheel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_ChatWheel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_ChatWheel.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 chat_wheel_message_id = 2 [default = 4294967295];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chat_wheel_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_ChatWheel)
  return target;
}

size_t CMsgShowcaseItem_ChatWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_ChatWheel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseItem_ChatWheel.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional uint32 chat_wheel_message_id = 2 [default = 4294967295];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chat_wheel_message_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_ChatWheel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_ChatWheel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_ChatWheel::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_ChatWheel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_ChatWheel*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_ChatWheel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_ChatWheel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_ChatWheel_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.chat_wheel_message_id_ = from._impl_.chat_wheel_message_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_ChatWheel::CopyFrom(const CMsgShowcaseItem_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_ChatWheel::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_ChatWheel::InternalSwap(CMsgShowcaseItem_ChatWheel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_.chat_wheel_message_id_, other->_impl_.chat_wheel_message_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_ChatWheel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[13]);
}

// ===================================================================

class CMsgShowcaseItem_Emoticon_Data::_Internal {
 public:
};

CMsgShowcaseItem_Emoticon_Data::CMsgShowcaseItem_Emoticon_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Emoticon.Data)
}
CMsgShowcaseItem_Emoticon_Data::CMsgShowcaseItem_Emoticon_Data(const CMsgShowcaseItem_Emoticon_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgShowcaseItem_Emoticon_Data* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Emoticon.Data)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Emoticon_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Emoticon_Data::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Emoticon_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[14]);
}

// ===================================================================

class CMsgShowcaseItem_Emoticon::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_Emoticon>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_Emoticon_Data& data(const CMsgShowcaseItem_Emoticon* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_emoticon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem_Emoticon_Data&
CMsgShowcaseItem_Emoticon::_Internal::data(const CMsgShowcaseItem_Emoticon* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_Emoticon::CMsgShowcaseItem_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Emoticon)
}
CMsgShowcaseItem_Emoticon::CMsgShowcaseItem_Emoticon(const CMsgShowcaseItem_Emoticon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Emoticon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.emoticon_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_Emoticon_Data(*from._impl_.data_);
  }
  _this->_impl_.emoticon_id_ = from._impl_.emoticon_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Emoticon)
}

inline void CMsgShowcaseItem_Emoticon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.emoticon_id_){0u}
  };
}

CMsgShowcaseItem_Emoticon::~CMsgShowcaseItem_Emoticon() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Emoticon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Emoticon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_Emoticon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Emoticon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Emoticon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_.emoticon_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Emoticon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_Emoticon.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 emoticon_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_emoticon_id(&has_bits);
          _impl_.emoticon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Emoticon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Emoticon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_Emoticon.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 emoticon_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_emoticon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Emoticon)
  return target;
}

size_t CMsgShowcaseItem_Emoticon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Emoticon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseItem_Emoticon.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional uint32 emoticon_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_emoticon_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Emoticon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Emoticon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Emoticon::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Emoticon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Emoticon*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Emoticon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Emoticon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_Emoticon_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.emoticon_id_ = from._impl_.emoticon_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Emoticon::CopyFrom(const CMsgShowcaseItem_Emoticon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Emoticon::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Emoticon::InternalSwap(CMsgShowcaseItem_Emoticon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Emoticon, _impl_.emoticon_id_)
      + sizeof(CMsgShowcaseItem_Emoticon::_impl_.emoticon_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Emoticon, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Emoticon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[15]);
}

// ===================================================================

class CMsgShowcaseItem_SpiderGraph_Data::_Internal {
 public:
};

CMsgShowcaseItem_SpiderGraph_Data::CMsgShowcaseItem_SpiderGraph_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_SpiderGraph.Data)
}
CMsgShowcaseItem_SpiderGraph_Data::CMsgShowcaseItem_SpiderGraph_Data(const CMsgShowcaseItem_SpiderGraph_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgShowcaseItem_SpiderGraph_Data* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_SpiderGraph.Data)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_SpiderGraph_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_SpiderGraph_Data::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_SpiderGraph_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[16]);
}

// ===================================================================

class CMsgShowcaseItem_SpiderGraph::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_SpiderGraph>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_SpiderGraph_Data& data(const CMsgShowcaseItem_SpiderGraph* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgShowcaseItem_SpiderGraph_Data&
CMsgShowcaseItem_SpiderGraph::_Internal::data(const CMsgShowcaseItem_SpiderGraph* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_SpiderGraph::CMsgShowcaseItem_SpiderGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_SpiderGraph)
}
CMsgShowcaseItem_SpiderGraph::CMsgShowcaseItem_SpiderGraph(const CMsgShowcaseItem_SpiderGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_SpiderGraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_SpiderGraph_Data(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_SpiderGraph)
}

inline void CMsgShowcaseItem_SpiderGraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
  };
}

CMsgShowcaseItem_SpiderGraph::~CMsgShowcaseItem_SpiderGraph() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_SpiderGraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_SpiderGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_SpiderGraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_SpiderGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_SpiderGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_SpiderGraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_SpiderGraph.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_SpiderGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_SpiderGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_SpiderGraph.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_SpiderGraph)
  return target;
}

size_t CMsgShowcaseItem_SpiderGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_SpiderGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgShowcaseItem_SpiderGraph.Data data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_SpiderGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_SpiderGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_SpiderGraph::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_SpiderGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_SpiderGraph*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_SpiderGraph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_SpiderGraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::CMsgShowcaseItem_SpiderGraph_Data::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_SpiderGraph::CopyFrom(const CMsgShowcaseItem_SpiderGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_SpiderGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_SpiderGraph::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_SpiderGraph::InternalSwap(CMsgShowcaseItem_SpiderGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_SpiderGraph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[17]);
}

// ===================================================================

class CMsgShowcaseItem_UserFeed_Data::_Internal {
 public:
};

CMsgShowcaseItem_UserFeed_Data::CMsgShowcaseItem_UserFeed_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_UserFeed.Data)
}
CMsgShowcaseItem_UserFeed_Data::CMsgShowcaseItem_UserFeed_Data(const CMsgShowcaseItem_UserFeed_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgShowcaseItem_UserFeed_Data* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_UserFeed.Data)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_UserFeed_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_UserFeed_Data::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_UserFeed_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[18]);
}

// ===================================================================

class CMsgShowcaseItem_UserFeed::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_UserFeed>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_UserFeed_Data& data(const CMsgShowcaseItem_UserFeed* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgShowcaseItem_UserFeed_Data&
CMsgShowcaseItem_UserFeed::_Internal::data(const CMsgShowcaseItem_UserFeed* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_UserFeed::CMsgShowcaseItem_UserFeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_UserFeed)
}
CMsgShowcaseItem_UserFeed::CMsgShowcaseItem_UserFeed(const CMsgShowcaseItem_UserFeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_UserFeed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_UserFeed_Data(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_UserFeed)
}

inline void CMsgShowcaseItem_UserFeed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
  };
}

CMsgShowcaseItem_UserFeed::~CMsgShowcaseItem_UserFeed() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_UserFeed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_UserFeed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_UserFeed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_UserFeed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_UserFeed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_UserFeed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_UserFeed.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_UserFeed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_UserFeed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_UserFeed.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_UserFeed)
  return target;
}

size_t CMsgShowcaseItem_UserFeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_UserFeed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgShowcaseItem_UserFeed.Data data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_UserFeed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_UserFeed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_UserFeed::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_UserFeed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_UserFeed*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_UserFeed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_UserFeed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::CMsgShowcaseItem_UserFeed_Data::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_UserFeed::CopyFrom(const CMsgShowcaseItem_UserFeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_UserFeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_UserFeed::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_UserFeed::InternalSwap(CMsgShowcaseItem_UserFeed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_UserFeed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[19]);
}

// ===================================================================

class CMsgShowcaseItem_Stat_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_Stat_Data>()._impl_._has_bits_);
  static void set_has_stat_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgShowcaseItem_Stat_Data::CMsgShowcaseItem_Stat_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Stat.Data)
}
CMsgShowcaseItem_Stat_Data::CMsgShowcaseItem_Stat_Data(const CMsgShowcaseItem_Stat_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Stat_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_score_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.stat_score_ = from._impl_.stat_score_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Stat.Data)
}

inline void CMsgShowcaseItem_Stat_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_score_){0u}
  };
}

CMsgShowcaseItem_Stat_Data::~CMsgShowcaseItem_Stat_Data() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Stat.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Stat_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseItem_Stat_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Stat_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Stat.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stat_score_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Stat_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 stat_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stat_score(&has_bits);
          _impl_.stat_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Stat_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Stat.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 stat_score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stat_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Stat.Data)
  return target;
}

size_t CMsgShowcaseItem_Stat_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Stat.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 stat_score = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Stat_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Stat_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Stat_Data::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Stat_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Stat_Data*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Stat_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Stat.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stat_score()) {
    _this->_internal_set_stat_score(from._internal_stat_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Stat_Data::CopyFrom(const CMsgShowcaseItem_Stat_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Stat.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Stat_Data::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Stat_Data::InternalSwap(CMsgShowcaseItem_Stat_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.stat_score_, other->_impl_.stat_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Stat_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[20]);
}

// ===================================================================

class CMsgShowcaseItem_Stat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_Stat>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_Stat_Data& data(const CMsgShowcaseItem_Stat* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem_Stat_Data&
CMsgShowcaseItem_Stat::_Internal::data(const CMsgShowcaseItem_Stat* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_Stat::CMsgShowcaseItem_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Stat)
}
CMsgShowcaseItem_Stat::CMsgShowcaseItem_Stat(const CMsgShowcaseItem_Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Stat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.stat_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_Stat_Data(*from._impl_.data_);
  }
  _this->_impl_.stat_id_ = from._impl_.stat_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Stat)
}

inline void CMsgShowcaseItem_Stat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.stat_id_){3}
  };
}

CMsgShowcaseItem_Stat::~CMsgShowcaseItem_Stat() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Stat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_Stat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Stat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    _impl_.stat_id_ = 3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Stat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_Stat.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.EStatID stat_id = 2 [default = k_eStat_Wins];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAProfileCard_EStatID_IsValid(val))) {
            _internal_set_stat_id(static_cast<::CMsgDOTAProfileCard_EStatID>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Stat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Stat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_Stat.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgDOTAProfileCard.EStatID stat_id = 2 [default = k_eStat_Wins];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stat_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Stat)
  return target;
}

size_t CMsgShowcaseItem_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Stat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseItem_Stat.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional .CMsgDOTAProfileCard.EStatID stat_id = 2 [default = k_eStat_Wins];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_stat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Stat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Stat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Stat::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Stat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Stat*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Stat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Stat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_Stat_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stat_id_ = from._impl_.stat_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Stat::CopyFrom(const CMsgShowcaseItem_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Stat::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Stat::InternalSwap(CMsgShowcaseItem_Stat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_.stat_id_, other->_impl_.stat_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Stat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[21]);
}

// ===================================================================

class CMsgShowcaseBackground_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseBackground_Data>()._impl_._has_bits_);
  static const ::CSOEconItem& loading_screen(const CMsgShowcaseBackground_Data* msg);
  static void set_has_loading_screen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSOEconItem&
CMsgShowcaseBackground_Data::_Internal::loading_screen(const CMsgShowcaseBackground_Data* msg) {
  return *msg->_impl_.loading_screen_;
}
void CMsgShowcaseBackground_Data::clear_loading_screen() {
  if (_impl_.loading_screen_ != nullptr) _impl_.loading_screen_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgShowcaseBackground_Data::CMsgShowcaseBackground_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseBackground.Data)
}
CMsgShowcaseBackground_Data::CMsgShowcaseBackground_Data(const CMsgShowcaseBackground_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseBackground_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.loading_screen_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_loading_screen()) {
    _this->_impl_.loading_screen_ = new ::CSOEconItem(*from._impl_.loading_screen_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseBackground.Data)
}

inline void CMsgShowcaseBackground_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.loading_screen_){nullptr}
  };
}

CMsgShowcaseBackground_Data::~CMsgShowcaseBackground_Data() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseBackground.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseBackground_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.loading_screen_;
}

void CMsgShowcaseBackground_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseBackground_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseBackground.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.loading_screen_ != nullptr);
    _impl_.loading_screen_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseBackground_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CSOEconItem loading_screen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_loading_screen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseBackground_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseBackground.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSOEconItem loading_screen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::loading_screen(this),
        _Internal::loading_screen(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseBackground.Data)
  return target;
}

size_t CMsgShowcaseBackground_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseBackground.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CSOEconItem loading_screen = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.loading_screen_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseBackground_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseBackground_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseBackground_Data::GetClassData() const { return &_class_data_; }


void CMsgShowcaseBackground_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseBackground_Data*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseBackground_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseBackground.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_loading_screen()) {
    _this->_internal_mutable_loading_screen()->::CSOEconItem::MergeFrom(
        from._internal_loading_screen());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseBackground_Data::CopyFrom(const CMsgShowcaseBackground_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseBackground.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseBackground_Data::IsInitialized() const {
  return true;
}

void CMsgShowcaseBackground_Data::InternalSwap(CMsgShowcaseBackground_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.loading_screen_, other->_impl_.loading_screen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseBackground_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[22]);
}

// ===================================================================

class CMsgShowcaseBackground::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseBackground>()._impl_._has_bits_);
  static const ::CMsgShowcaseBackground_Data& data(const CMsgShowcaseBackground* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgShowcaseEconItemReference& loading_screen_ref(const CMsgShowcaseBackground* msg);
  static void set_has_loading_screen_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blur(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_background_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgShowcaseBackground_Data&
CMsgShowcaseBackground::_Internal::data(const CMsgShowcaseBackground* msg) {
  return *msg->_impl_.data_;
}
const ::CMsgShowcaseEconItemReference&
CMsgShowcaseBackground::_Internal::loading_screen_ref(const CMsgShowcaseBackground* msg) {
  return *msg->_impl_.loading_screen_ref_;
}
CMsgShowcaseBackground::CMsgShowcaseBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseBackground)
}
CMsgShowcaseBackground::CMsgShowcaseBackground(const CMsgShowcaseBackground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseBackground* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.loading_screen_ref_){nullptr}
    , decltype(_impl_.dim_){}
    , decltype(_impl_.blur_){}
    , decltype(_impl_.background_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseBackground_Data(*from._impl_.data_);
  }
  if (from._internal_has_loading_screen_ref()) {
    _this->_impl_.loading_screen_ref_ = new ::CMsgShowcaseEconItemReference(*from._impl_.loading_screen_ref_);
  }
  ::memcpy(&_impl_.dim_, &from._impl_.dim_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.background_id_) -
    reinterpret_cast<char*>(&_impl_.dim_)) + sizeof(_impl_.background_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseBackground)
}

inline void CMsgShowcaseBackground::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.loading_screen_ref_){nullptr}
    , decltype(_impl_.dim_){0u}
    , decltype(_impl_.blur_){0u}
    , decltype(_impl_.background_id_){0u}
  };
}

CMsgShowcaseBackground::~CMsgShowcaseBackground() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseBackground)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseBackground::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.loading_screen_ref_;
}

void CMsgShowcaseBackground::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseBackground::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseBackground)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.loading_screen_ref_ != nullptr);
      _impl_.loading_screen_ref_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dim_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.background_id_) -
        reinterpret_cast<char*>(&_impl_.dim_)) + sizeof(_impl_.background_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseBackground::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseBackground.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseEconItemReference loading_screen_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_loading_screen_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_dim(&has_bits);
          _impl_.dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 blur = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_blur(&has_bits);
          _impl_.blur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 background_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_background_id(&has_bits);
          _impl_.background_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseBackground::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseBackground)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseBackground.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgShowcaseEconItemReference loading_screen_ref = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::loading_screen_ref(this),
        _Internal::loading_screen_ref(this).GetCachedSize(), target, stream);
  }

  // optional uint32 dim = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dim(), target);
  }

  // optional uint32 blur = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_blur(), target);
  }

  // optional uint32 background_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_background_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseBackground)
  return target;
}

size_t CMsgShowcaseBackground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseBackground)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgShowcaseBackground.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional .CMsgShowcaseEconItemReference loading_screen_ref = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.loading_screen_ref_);
    }

    // optional uint32 dim = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dim());
    }

    // optional uint32 blur = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_blur());
    }

    // optional uint32 background_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_background_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseBackground::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseBackground::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseBackground::GetClassData() const { return &_class_data_; }


void CMsgShowcaseBackground::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseBackground*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseBackground&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseBackground)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseBackground_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_loading_screen_ref()->::CMsgShowcaseEconItemReference::MergeFrom(
          from._internal_loading_screen_ref());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dim_ = from._impl_.dim_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.blur_ = from._impl_.blur_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.background_id_ = from._impl_.background_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseBackground::CopyFrom(const CMsgShowcaseBackground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseBackground::IsInitialized() const {
  return true;
}

void CMsgShowcaseBackground::InternalSwap(CMsgShowcaseBackground* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseBackground, _impl_.background_id_)
      + sizeof(CMsgShowcaseBackground::_impl_.background_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseBackground, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseBackground::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[23]);
}

// ===================================================================

class CMsgShowcaseItemData::_Internal {
 public:
  static const ::CMsgShowcaseItem_Trophy& trophy(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_EconItem& econ_item_icon(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_EconItem& sticker(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_Hero& hero_model(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_PlayerMatch& player_match(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_ChatWheel& chat_wheel(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_ChatWheel& spray(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_Emoticon& emoticon(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_EconItem& courier(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_EconItem& ward(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_HeroIcon& hero_icon(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_SpiderGraph& spider_graph(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_UserFeed& user_feed(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_Stat& stat(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_EconItem& roshan(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_EconItem& creep(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_EconItem& tower(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_EconItem& effigy(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_EconItem& decoration(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseBackground& background(const CMsgShowcaseItemData* msg);
};

const ::CMsgShowcaseItem_Trophy&
CMsgShowcaseItemData::_Internal::trophy(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.trophy_;
}
const ::CMsgShowcaseItem_EconItem&
CMsgShowcaseItemData::_Internal::econ_item_icon(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.econ_item_icon_;
}
const ::CMsgShowcaseItem_EconItem&
CMsgShowcaseItemData::_Internal::sticker(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.sticker_;
}
const ::CMsgShowcaseItem_Hero&
CMsgShowcaseItemData::_Internal::hero_model(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.hero_model_;
}
const ::CMsgShowcaseItem_PlayerMatch&
CMsgShowcaseItemData::_Internal::player_match(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.player_match_;
}
const ::CMsgShowcaseItem_ChatWheel&
CMsgShowcaseItemData::_Internal::chat_wheel(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.chat_wheel_;
}
const ::CMsgShowcaseItem_ChatWheel&
CMsgShowcaseItemData::_Internal::spray(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.spray_;
}
const ::CMsgShowcaseItem_Emoticon&
CMsgShowcaseItemData::_Internal::emoticon(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.emoticon_;
}
const ::CMsgShowcaseItem_EconItem&
CMsgShowcaseItemData::_Internal::courier(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.courier_;
}
const ::CMsgShowcaseItem_EconItem&
CMsgShowcaseItemData::_Internal::ward(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.ward_;
}
const ::CMsgShowcaseItem_HeroIcon&
CMsgShowcaseItemData::_Internal::hero_icon(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.hero_icon_;
}
const ::CMsgShowcaseItem_SpiderGraph&
CMsgShowcaseItemData::_Internal::spider_graph(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.spider_graph_;
}
const ::CMsgShowcaseItem_UserFeed&
CMsgShowcaseItemData::_Internal::user_feed(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.user_feed_;
}
const ::CMsgShowcaseItem_Stat&
CMsgShowcaseItemData::_Internal::stat(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.stat_;
}
const ::CMsgShowcaseItem_EconItem&
CMsgShowcaseItemData::_Internal::roshan(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.roshan_;
}
const ::CMsgShowcaseItem_EconItem&
CMsgShowcaseItemData::_Internal::creep(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.creep_;
}
const ::CMsgShowcaseItem_EconItem&
CMsgShowcaseItemData::_Internal::tower(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.tower_;
}
const ::CMsgShowcaseItem_EconItem&
CMsgShowcaseItemData::_Internal::effigy(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.effigy_;
}
const ::CMsgShowcaseItem_EconItem&
CMsgShowcaseItemData::_Internal::decoration(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.decoration_;
}
const ::CMsgShowcaseBackground&
CMsgShowcaseItemData::_Internal::background(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.background_;
}
void CMsgShowcaseItemData::set_allocated_trophy(::CMsgShowcaseItem_Trophy* trophy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (trophy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trophy);
    if (message_arena != submessage_arena) {
      trophy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trophy, submessage_arena);
    }
    set_has_trophy();
    _impl_.item_.trophy_ = trophy;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.trophy)
}
void CMsgShowcaseItemData::set_allocated_econ_item_icon(::CMsgShowcaseItem_EconItem* econ_item_icon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (econ_item_icon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(econ_item_icon);
    if (message_arena != submessage_arena) {
      econ_item_icon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, econ_item_icon, submessage_arena);
    }
    set_has_econ_item_icon();
    _impl_.item_.econ_item_icon_ = econ_item_icon;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.econ_item_icon)
}
void CMsgShowcaseItemData::set_allocated_sticker(::CMsgShowcaseItem_EconItem* sticker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (sticker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sticker);
    if (message_arena != submessage_arena) {
      sticker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sticker, submessage_arena);
    }
    set_has_sticker();
    _impl_.item_.sticker_ = sticker;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.sticker)
}
void CMsgShowcaseItemData::set_allocated_hero_model(::CMsgShowcaseItem_Hero* hero_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (hero_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hero_model);
    if (message_arena != submessage_arena) {
      hero_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hero_model, submessage_arena);
    }
    set_has_hero_model();
    _impl_.item_.hero_model_ = hero_model;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.hero_model)
}
void CMsgShowcaseItemData::set_allocated_player_match(::CMsgShowcaseItem_PlayerMatch* player_match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (player_match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_match);
    if (message_arena != submessage_arena) {
      player_match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_match, submessage_arena);
    }
    set_has_player_match();
    _impl_.item_.player_match_ = player_match;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.player_match)
}
void CMsgShowcaseItemData::set_allocated_chat_wheel(::CMsgShowcaseItem_ChatWheel* chat_wheel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (chat_wheel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chat_wheel);
    if (message_arena != submessage_arena) {
      chat_wheel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_wheel, submessage_arena);
    }
    set_has_chat_wheel();
    _impl_.item_.chat_wheel_ = chat_wheel;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.chat_wheel)
}
void CMsgShowcaseItemData::set_allocated_spray(::CMsgShowcaseItem_ChatWheel* spray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (spray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spray);
    if (message_arena != submessage_arena) {
      spray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spray, submessage_arena);
    }
    set_has_spray();
    _impl_.item_.spray_ = spray;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.spray)
}
void CMsgShowcaseItemData::set_allocated_emoticon(::CMsgShowcaseItem_Emoticon* emoticon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (emoticon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emoticon);
    if (message_arena != submessage_arena) {
      emoticon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emoticon, submessage_arena);
    }
    set_has_emoticon();
    _impl_.item_.emoticon_ = emoticon;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.emoticon)
}
void CMsgShowcaseItemData::set_allocated_courier(::CMsgShowcaseItem_EconItem* courier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (courier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(courier);
    if (message_arena != submessage_arena) {
      courier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, courier, submessage_arena);
    }
    set_has_courier();
    _impl_.item_.courier_ = courier;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.courier)
}
void CMsgShowcaseItemData::set_allocated_ward(::CMsgShowcaseItem_EconItem* ward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (ward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ward);
    if (message_arena != submessage_arena) {
      ward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ward, submessage_arena);
    }
    set_has_ward();
    _impl_.item_.ward_ = ward;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.ward)
}
void CMsgShowcaseItemData::set_allocated_hero_icon(::CMsgShowcaseItem_HeroIcon* hero_icon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (hero_icon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hero_icon);
    if (message_arena != submessage_arena) {
      hero_icon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hero_icon, submessage_arena);
    }
    set_has_hero_icon();
    _impl_.item_.hero_icon_ = hero_icon;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.hero_icon)
}
void CMsgShowcaseItemData::set_allocated_spider_graph(::CMsgShowcaseItem_SpiderGraph* spider_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (spider_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spider_graph);
    if (message_arena != submessage_arena) {
      spider_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spider_graph, submessage_arena);
    }
    set_has_spider_graph();
    _impl_.item_.spider_graph_ = spider_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.spider_graph)
}
void CMsgShowcaseItemData::set_allocated_user_feed(::CMsgShowcaseItem_UserFeed* user_feed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (user_feed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_feed);
    if (message_arena != submessage_arena) {
      user_feed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_feed, submessage_arena);
    }
    set_has_user_feed();
    _impl_.item_.user_feed_ = user_feed;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.user_feed)
}
void CMsgShowcaseItemData::set_allocated_stat(::CMsgShowcaseItem_Stat* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    set_has_stat();
    _impl_.item_.stat_ = stat;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.stat)
}
void CMsgShowcaseItemData::set_allocated_roshan(::CMsgShowcaseItem_EconItem* roshan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (roshan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(roshan);
    if (message_arena != submessage_arena) {
      roshan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roshan, submessage_arena);
    }
    set_has_roshan();
    _impl_.item_.roshan_ = roshan;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.roshan)
}
void CMsgShowcaseItemData::set_allocated_creep(::CMsgShowcaseItem_EconItem* creep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (creep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(creep);
    if (message_arena != submessage_arena) {
      creep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creep, submessage_arena);
    }
    set_has_creep();
    _impl_.item_.creep_ = creep;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.creep)
}
void CMsgShowcaseItemData::set_allocated_tower(::CMsgShowcaseItem_EconItem* tower) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (tower) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tower);
    if (message_arena != submessage_arena) {
      tower = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tower, submessage_arena);
    }
    set_has_tower();
    _impl_.item_.tower_ = tower;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.tower)
}
void CMsgShowcaseItemData::set_allocated_effigy(::CMsgShowcaseItem_EconItem* effigy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (effigy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(effigy);
    if (message_arena != submessage_arena) {
      effigy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effigy, submessage_arena);
    }
    set_has_effigy();
    _impl_.item_.effigy_ = effigy;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.effigy)
}
void CMsgShowcaseItemData::set_allocated_decoration(::CMsgShowcaseItem_EconItem* decoration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (decoration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(decoration);
    if (message_arena != submessage_arena) {
      decoration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decoration, submessage_arena);
    }
    set_has_decoration();
    _impl_.item_.decoration_ = decoration;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.decoration)
}
void CMsgShowcaseItemData::set_allocated_background(::CMsgShowcaseBackground* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(background);
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    set_has_background();
    _impl_.item_.background_ = background;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.background)
}
CMsgShowcaseItemData::CMsgShowcaseItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItemData)
}
CMsgShowcaseItemData::CMsgShowcaseItemData(const CMsgShowcaseItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItemData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_item();
  switch (from.item_case()) {
    case kTrophy: {
      _this->_internal_mutable_trophy()->::CMsgShowcaseItem_Trophy::MergeFrom(
          from._internal_trophy());
      break;
    }
    case kEconItemIcon: {
      _this->_internal_mutable_econ_item_icon()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_econ_item_icon());
      break;
    }
    case kSticker: {
      _this->_internal_mutable_sticker()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_sticker());
      break;
    }
    case kHeroModel: {
      _this->_internal_mutable_hero_model()->::CMsgShowcaseItem_Hero::MergeFrom(
          from._internal_hero_model());
      break;
    }
    case kPlayerMatch: {
      _this->_internal_mutable_player_match()->::CMsgShowcaseItem_PlayerMatch::MergeFrom(
          from._internal_player_match());
      break;
    }
    case kChatWheel: {
      _this->_internal_mutable_chat_wheel()->::CMsgShowcaseItem_ChatWheel::MergeFrom(
          from._internal_chat_wheel());
      break;
    }
    case kSpray: {
      _this->_internal_mutable_spray()->::CMsgShowcaseItem_ChatWheel::MergeFrom(
          from._internal_spray());
      break;
    }
    case kEmoticon: {
      _this->_internal_mutable_emoticon()->::CMsgShowcaseItem_Emoticon::MergeFrom(
          from._internal_emoticon());
      break;
    }
    case kCourier: {
      _this->_internal_mutable_courier()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_courier());
      break;
    }
    case kWard: {
      _this->_internal_mutable_ward()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_ward());
      break;
    }
    case kHeroIcon: {
      _this->_internal_mutable_hero_icon()->::CMsgShowcaseItem_HeroIcon::MergeFrom(
          from._internal_hero_icon());
      break;
    }
    case kSpiderGraph: {
      _this->_internal_mutable_spider_graph()->::CMsgShowcaseItem_SpiderGraph::MergeFrom(
          from._internal_spider_graph());
      break;
    }
    case kUserFeed: {
      _this->_internal_mutable_user_feed()->::CMsgShowcaseItem_UserFeed::MergeFrom(
          from._internal_user_feed());
      break;
    }
    case kStat: {
      _this->_internal_mutable_stat()->::CMsgShowcaseItem_Stat::MergeFrom(
          from._internal_stat());
      break;
    }
    case kRoshan: {
      _this->_internal_mutable_roshan()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_roshan());
      break;
    }
    case kCreep: {
      _this->_internal_mutable_creep()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_creep());
      break;
    }
    case kTower: {
      _this->_internal_mutable_tower()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_tower());
      break;
    }
    case kEffigy: {
      _this->_internal_mutable_effigy()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_effigy());
      break;
    }
    case kDecoration: {
      _this->_internal_mutable_decoration()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_decoration());
      break;
    }
    case kBackground: {
      _this->_internal_mutable_background()->::CMsgShowcaseBackground::MergeFrom(
          from._internal_background());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItemData)
}

inline void CMsgShowcaseItemData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_item();
}

CMsgShowcaseItemData::~CMsgShowcaseItemData() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_item()) {
    clear_item();
  }
}

void CMsgShowcaseItemData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItemData::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:CMsgShowcaseItemData)
  switch (item_case()) {
    case kTrophy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.trophy_;
      }
      break;
    }
    case kEconItemIcon: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.econ_item_icon_;
      }
      break;
    }
    case kSticker: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.sticker_;
      }
      break;
    }
    case kHeroModel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.hero_model_;
      }
      break;
    }
    case kPlayerMatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.player_match_;
      }
      break;
    }
    case kChatWheel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.chat_wheel_;
      }
      break;
    }
    case kSpray: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.spray_;
      }
      break;
    }
    case kEmoticon: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.emoticon_;
      }
      break;
    }
    case kCourier: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.courier_;
      }
      break;
    }
    case kWard: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.ward_;
      }
      break;
    }
    case kHeroIcon: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.hero_icon_;
      }
      break;
    }
    case kSpiderGraph: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.spider_graph_;
      }
      break;
    }
    case kUserFeed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.user_feed_;
      }
      break;
    }
    case kStat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.stat_;
      }
      break;
    }
    case kRoshan: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.roshan_;
      }
      break;
    }
    case kCreep: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.creep_;
      }
      break;
    }
    case kTower: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.tower_;
      }
      break;
    }
    case kEffigy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.effigy_;
      }
      break;
    }
    case kDecoration: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.decoration_;
      }
      break;
    }
    case kBackground: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.background_;
      }
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}


void CMsgShowcaseItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_item();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CMsgShowcaseItem_Trophy trophy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trophy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_EconItem econ_item_icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_econ_item_icon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_EconItem sticker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sticker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_Hero hero_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_PlayerMatch player_match = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_ChatWheel chat_wheel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_wheel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_ChatWheel spray = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_spray(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_Emoticon emoticon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_emoticon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_EconItem courier = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_courier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_EconItem ward = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_HeroIcon hero_icon = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero_icon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_SpiderGraph spider_graph = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_spider_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_UserFeed user_feed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_feed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_Stat stat = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_EconItem roshan = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_roshan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_EconItem creep = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_creep(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_EconItem tower = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tower(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_EconItem effigy = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_effigy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_EconItem decoration = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_decoration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseBackground background = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (item_case()) {
    case kTrophy: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::trophy(this),
          _Internal::trophy(this).GetCachedSize(), target, stream);
      break;
    }
    case kEconItemIcon: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::econ_item_icon(this),
          _Internal::econ_item_icon(this).GetCachedSize(), target, stream);
      break;
    }
    case kSticker: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::sticker(this),
          _Internal::sticker(this).GetCachedSize(), target, stream);
      break;
    }
    case kHeroModel: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::hero_model(this),
          _Internal::hero_model(this).GetCachedSize(), target, stream);
      break;
    }
    case kPlayerMatch: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::player_match(this),
          _Internal::player_match(this).GetCachedSize(), target, stream);
      break;
    }
    case kChatWheel: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::chat_wheel(this),
          _Internal::chat_wheel(this).GetCachedSize(), target, stream);
      break;
    }
    case kSpray: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::spray(this),
          _Internal::spray(this).GetCachedSize(), target, stream);
      break;
    }
    case kEmoticon: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::emoticon(this),
          _Internal::emoticon(this).GetCachedSize(), target, stream);
      break;
    }
    case kCourier: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::courier(this),
          _Internal::courier(this).GetCachedSize(), target, stream);
      break;
    }
    case kWard: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::ward(this),
          _Internal::ward(this).GetCachedSize(), target, stream);
      break;
    }
    case kHeroIcon: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::hero_icon(this),
          _Internal::hero_icon(this).GetCachedSize(), target, stream);
      break;
    }
    case kSpiderGraph: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::spider_graph(this),
          _Internal::spider_graph(this).GetCachedSize(), target, stream);
      break;
    }
    case kUserFeed: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::user_feed(this),
          _Internal::user_feed(this).GetCachedSize(), target, stream);
      break;
    }
    case kStat: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::stat(this),
          _Internal::stat(this).GetCachedSize(), target, stream);
      break;
    }
    case kRoshan: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::roshan(this),
          _Internal::roshan(this).GetCachedSize(), target, stream);
      break;
    }
    case kCreep: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::creep(this),
          _Internal::creep(this).GetCachedSize(), target, stream);
      break;
    }
    case kTower: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::tower(this),
          _Internal::tower(this).GetCachedSize(), target, stream);
      break;
    }
    case kEffigy: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::effigy(this),
          _Internal::effigy(this).GetCachedSize(), target, stream);
      break;
    }
    case kDecoration: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::decoration(this),
          _Internal::decoration(this).GetCachedSize(), target, stream);
      break;
    }
    case kBackground: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(100, _Internal::background(this),
          _Internal::background(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItemData)
  return target;
}

size_t CMsgShowcaseItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (item_case()) {
    // .CMsgShowcaseItem_Trophy trophy = 1;
    case kTrophy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.trophy_);
      break;
    }
    // .CMsgShowcaseItem_EconItem econ_item_icon = 2;
    case kEconItemIcon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.econ_item_icon_);
      break;
    }
    // .CMsgShowcaseItem_EconItem sticker = 3;
    case kSticker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.sticker_);
      break;
    }
    // .CMsgShowcaseItem_Hero hero_model = 4;
    case kHeroModel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.hero_model_);
      break;
    }
    // .CMsgShowcaseItem_PlayerMatch player_match = 5;
    case kPlayerMatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.player_match_);
      break;
    }
    // .CMsgShowcaseItem_ChatWheel chat_wheel = 6;
    case kChatWheel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.chat_wheel_);
      break;
    }
    // .CMsgShowcaseItem_ChatWheel spray = 7;
    case kSpray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.spray_);
      break;
    }
    // .CMsgShowcaseItem_Emoticon emoticon = 8;
    case kEmoticon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.emoticon_);
      break;
    }
    // .CMsgShowcaseItem_EconItem courier = 10;
    case kCourier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.courier_);
      break;
    }
    // .CMsgShowcaseItem_EconItem ward = 11;
    case kWard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.ward_);
      break;
    }
    // .CMsgShowcaseItem_HeroIcon hero_icon = 12;
    case kHeroIcon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.hero_icon_);
      break;
    }
    // .CMsgShowcaseItem_SpiderGraph spider_graph = 13;
    case kSpiderGraph: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.spider_graph_);
      break;
    }
    // .CMsgShowcaseItem_UserFeed user_feed = 14;
    case kUserFeed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.user_feed_);
      break;
    }
    // .CMsgShowcaseItem_Stat stat = 15;
    case kStat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.stat_);
      break;
    }
    // .CMsgShowcaseItem_EconItem roshan = 16;
    case kRoshan: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.roshan_);
      break;
    }
    // .CMsgShowcaseItem_EconItem creep = 17;
    case kCreep: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.creep_);
      break;
    }
    // .CMsgShowcaseItem_EconItem tower = 18;
    case kTower: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.tower_);
      break;
    }
    // .CMsgShowcaseItem_EconItem effigy = 19;
    case kEffigy: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.effigy_);
      break;
    }
    // .CMsgShowcaseItem_EconItem decoration = 20;
    case kDecoration: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.decoration_);
      break;
    }
    // .CMsgShowcaseBackground background = 100;
    case kBackground: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.background_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItemData::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItemData*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItemData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItemData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.item_case()) {
    case kTrophy: {
      _this->_internal_mutable_trophy()->::CMsgShowcaseItem_Trophy::MergeFrom(
          from._internal_trophy());
      break;
    }
    case kEconItemIcon: {
      _this->_internal_mutable_econ_item_icon()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_econ_item_icon());
      break;
    }
    case kSticker: {
      _this->_internal_mutable_sticker()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_sticker());
      break;
    }
    case kHeroModel: {
      _this->_internal_mutable_hero_model()->::CMsgShowcaseItem_Hero::MergeFrom(
          from._internal_hero_model());
      break;
    }
    case kPlayerMatch: {
      _this->_internal_mutable_player_match()->::CMsgShowcaseItem_PlayerMatch::MergeFrom(
          from._internal_player_match());
      break;
    }
    case kChatWheel: {
      _this->_internal_mutable_chat_wheel()->::CMsgShowcaseItem_ChatWheel::MergeFrom(
          from._internal_chat_wheel());
      break;
    }
    case kSpray: {
      _this->_internal_mutable_spray()->::CMsgShowcaseItem_ChatWheel::MergeFrom(
          from._internal_spray());
      break;
    }
    case kEmoticon: {
      _this->_internal_mutable_emoticon()->::CMsgShowcaseItem_Emoticon::MergeFrom(
          from._internal_emoticon());
      break;
    }
    case kCourier: {
      _this->_internal_mutable_courier()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_courier());
      break;
    }
    case kWard: {
      _this->_internal_mutable_ward()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_ward());
      break;
    }
    case kHeroIcon: {
      _this->_internal_mutable_hero_icon()->::CMsgShowcaseItem_HeroIcon::MergeFrom(
          from._internal_hero_icon());
      break;
    }
    case kSpiderGraph: {
      _this->_internal_mutable_spider_graph()->::CMsgShowcaseItem_SpiderGraph::MergeFrom(
          from._internal_spider_graph());
      break;
    }
    case kUserFeed: {
      _this->_internal_mutable_user_feed()->::CMsgShowcaseItem_UserFeed::MergeFrom(
          from._internal_user_feed());
      break;
    }
    case kStat: {
      _this->_internal_mutable_stat()->::CMsgShowcaseItem_Stat::MergeFrom(
          from._internal_stat());
      break;
    }
    case kRoshan: {
      _this->_internal_mutable_roshan()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_roshan());
      break;
    }
    case kCreep: {
      _this->_internal_mutable_creep()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_creep());
      break;
    }
    case kTower: {
      _this->_internal_mutable_tower()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_tower());
      break;
    }
    case kEffigy: {
      _this->_internal_mutable_effigy()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_effigy());
      break;
    }
    case kDecoration: {
      _this->_internal_mutable_decoration()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_decoration());
      break;
    }
    case kBackground: {
      _this->_internal_mutable_background()->::CMsgShowcaseBackground::MergeFrom(
          from._internal_background());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItemData::CopyFrom(const CMsgShowcaseItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItemData::IsInitialized() const {
  return true;
}

void CMsgShowcaseItemData::InternalSwap(CMsgShowcaseItemData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItemData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[24]);
}

// ===================================================================

class CMsgShowcaseItemPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItemPosition>()._impl_._has_bits_);
  static void set_has_position_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_parent_attachment_point_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_attachment_anchor_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_attachment_anchor_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgShowcaseItemPosition::CMsgShowcaseItemPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItemPosition)
}
CMsgShowcaseItemPosition::CMsgShowcaseItemPosition(const CMsgShowcaseItemPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItemPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_y_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.rotation_){}
    , decltype(_impl_.parent_id_){}
    , decltype(_impl_.parent_attachment_point_id_){}
    , decltype(_impl_.attachment_anchor_x_){}
    , decltype(_impl_.attachment_anchor_y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.position_x_, &from._impl_.position_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attachment_anchor_y_) -
    reinterpret_cast<char*>(&_impl_.position_x_)) + sizeof(_impl_.attachment_anchor_y_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItemPosition)
}

inline void CMsgShowcaseItemPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.position_y_){0}
    , decltype(_impl_.scale_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.rotation_){0u}
    , decltype(_impl_.parent_id_){0u}
    , decltype(_impl_.parent_attachment_point_id_){0u}
    , decltype(_impl_.attachment_anchor_x_){0u}
    , decltype(_impl_.attachment_anchor_y_){0u}
  };
}

CMsgShowcaseItemPosition::~CMsgShowcaseItemPosition() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItemPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItemPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseItemPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItemPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItemPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.position_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.parent_attachment_point_id_) -
        reinterpret_cast<char*>(&_impl_.position_x_)) + sizeof(_impl_.parent_attachment_point_id_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.attachment_anchor_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.attachment_anchor_y_) -
        reinterpret_cast<char*>(&_impl_.attachment_anchor_x_)) + sizeof(_impl_.attachment_anchor_y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItemPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 position_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_position_x(&has_bits);
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 position_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_position_y(&has_bits);
          _impl_.position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rotation(&has_bits);
          _impl_.rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 parent_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_parent_id(&has_bits);
          _impl_.parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 parent_attachment_point_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_parent_attachment_point_id(&has_bits);
          _impl_.parent_attachment_point_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 attachment_anchor_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_attachment_anchor_x(&has_bits);
          _impl_.attachment_anchor_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 attachment_anchor_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_attachment_anchor_y(&has_bits);
          _impl_.attachment_anchor_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItemPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItemPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 position_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_position_x(), target);
  }

  // optional int32 position_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_position_y(), target);
  }

  // optional uint32 scale = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_scale(), target);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width(), target);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_height(), target);
  }

  // optional uint32 rotation = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rotation(), target);
  }

  // optional uint32 parent_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_parent_id(), target);
  }

  // optional uint32 parent_attachment_point_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_parent_attachment_point_id(), target);
  }

  // optional uint32 attachment_anchor_x = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_attachment_anchor_x(), target);
  }

  // optional uint32 attachment_anchor_y = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_attachment_anchor_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItemPosition)
  return target;
}

size_t CMsgShowcaseItemPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItemPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 position_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_position_x());
    }

    // optional int32 position_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_position_y());
    }

    // optional uint32 scale = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scale());
    }

    // optional uint32 width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint32 height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 rotation = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotation());
    }

    // optional uint32 parent_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parent_id());
    }

    // optional uint32 parent_attachment_point_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parent_attachment_point_id());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 attachment_anchor_x = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attachment_anchor_x());
    }

    // optional uint32 attachment_anchor_y = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attachment_anchor_y());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItemPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItemPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItemPosition::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItemPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItemPosition*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItemPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItemPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.position_x_ = from._impl_.position_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.position_y_ = from._impl_.position_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.rotation_ = from._impl_.rotation_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.parent_id_ = from._impl_.parent_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.parent_attachment_point_id_ = from._impl_.parent_attachment_point_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.attachment_anchor_x_ = from._impl_.attachment_anchor_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.attachment_anchor_y_ = from._impl_.attachment_anchor_y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItemPosition::CopyFrom(const CMsgShowcaseItemPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItemPosition::IsInitialized() const {
  return true;
}

void CMsgShowcaseItemPosition::InternalSwap(CMsgShowcaseItemPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItemPosition, _impl_.attachment_anchor_y_)
      + sizeof(CMsgShowcaseItemPosition::_impl_.attachment_anchor_y_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItemPosition, _impl_.position_x_)>(
          reinterpret_cast<char*>(&_impl_.position_x_),
          reinterpret_cast<char*>(&other->_impl_.position_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItemPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[25]);
}

// ===================================================================

class CMsgShowcaseItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem>()._impl_._has_bits_);
  static void set_has_showcase_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgShowcaseItemPosition& item_position(const CMsgShowcaseItem* msg);
  static void set_has_item_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgShowcaseItemData& item_data(const CMsgShowcaseItem* msg);
  static void set_has_item_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgShowcaseItemPosition&
CMsgShowcaseItem::_Internal::item_position(const CMsgShowcaseItem* msg) {
  return *msg->_impl_.item_position_;
}
const ::CMsgShowcaseItemData&
CMsgShowcaseItem::_Internal::item_data(const CMsgShowcaseItem* msg) {
  return *msg->_impl_.item_data_;
}
CMsgShowcaseItem::CMsgShowcaseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem)
}
CMsgShowcaseItem::CMsgShowcaseItem(const CMsgShowcaseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_position_){nullptr}
    , decltype(_impl_.item_data_){nullptr}
    , decltype(_impl_.showcase_item_id_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_position()) {
    _this->_impl_.item_position_ = new ::CMsgShowcaseItemPosition(*from._impl_.item_position_);
  }
  if (from._internal_has_item_data()) {
    _this->_impl_.item_data_ = new ::CMsgShowcaseItemData(*from._impl_.item_data_);
  }
  ::memcpy(&_impl_.showcase_item_id_, &from._impl_.showcase_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.showcase_item_id_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem)
}

inline void CMsgShowcaseItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_position_){nullptr}
    , decltype(_impl_.item_data_){nullptr}
    , decltype(_impl_.showcase_item_id_){0u}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.flags_){0u}
  };
}

CMsgShowcaseItem::~CMsgShowcaseItem() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_position_;
  if (this != internal_default_instance()) delete _impl_.item_data_;
}

void CMsgShowcaseItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.item_position_ != nullptr);
      _impl_.item_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.item_data_ != nullptr);
      _impl_.item_data_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.showcase_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.showcase_item_id_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 showcase_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_showcase_item_id(&has_bits);
          _impl_.showcase_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseItemPosition item_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseItemData item_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseItemState state = 4 [default = k_eShowcaseItemState_Ok];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseItemState_IsValid(val))) {
            _internal_set_state(static_cast<::EShowcaseItemState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 showcase_item_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_showcase_item_id(), target);
  }

  // optional .CMsgShowcaseItemPosition item_position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item_position(this),
        _Internal::item_position(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgShowcaseItemData item_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::item_data(this),
        _Internal::item_data(this).GetCachedSize(), target, stream);
  }

  // optional .EShowcaseItemState state = 4 [default = k_eShowcaseItemState_Ok];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem)
  return target;
}

size_t CMsgShowcaseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgShowcaseItemPosition item_position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_position_);
    }

    // optional .CMsgShowcaseItemData item_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_data_);
    }

    // optional uint32 showcase_item_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_showcase_item_id());
    }

    // optional .EShowcaseItemState state = 4 [default = k_eShowcaseItemState_Ok];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_item_position()->::CMsgShowcaseItemPosition::MergeFrom(
          from._internal_item_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_item_data()->::CMsgShowcaseItemData::MergeFrom(
          from._internal_item_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.showcase_item_id_ = from._impl_.showcase_item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem::CopyFrom(const CMsgShowcaseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem::InternalSwap(CMsgShowcaseItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem, _impl_.flags_)
      + sizeof(CMsgShowcaseItem::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem, _impl_.item_position_)>(
          reinterpret_cast<char*>(&_impl_.item_position_),
          reinterpret_cast<char*>(&other->_impl_.item_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[26]);
}

// ===================================================================

class CMsgShowcase::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcase>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem& background(const CMsgShowcase* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_moderation_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem&
CMsgShowcase::_Internal::background(const CMsgShowcase* msg) {
  return *msg->_impl_.background_;
}
CMsgShowcase::CMsgShowcase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcase)
}
CMsgShowcase::CMsgShowcase(const CMsgShowcase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_items_){from._impl_.showcase_items_}
    , decltype(_impl_.background_){nullptr}
    , decltype(_impl_.moderation_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_background()) {
    _this->_impl_.background_ = new ::CMsgShowcaseItem(*from._impl_.background_);
  }
  _this->_impl_.moderation_state_ = from._impl_.moderation_state_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcase)
}

inline void CMsgShowcase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_items_){arena}
    , decltype(_impl_.background_){nullptr}
    , decltype(_impl_.moderation_state_){0}
  };
}

CMsgShowcase::~CMsgShowcase() {
  // @@protoc_insertion_point(destructor:CMsgShowcase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.showcase_items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.background_;
}

void CMsgShowcase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcase::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.showcase_items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.background_ != nullptr);
    _impl_.background_->Clear();
  }
  _impl_.moderation_state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgShowcaseItem showcase_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_showcase_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseItem background = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcase.EModerationState moderation_state = 4 [default = k_eModerationState_Ok];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgShowcase_EModerationState_IsValid(val))) {
            _internal_set_moderation_state(static_cast<::CMsgShowcase_EModerationState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgShowcaseItem showcase_items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_showcase_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_showcase_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem background = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::background(this),
        _Internal::background(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgShowcase.EModerationState moderation_state = 4 [default = k_eModerationState_Ok];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_moderation_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcase)
  return target;
}

size_t CMsgShowcase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgShowcaseItem showcase_items = 1;
  total_size += 1UL * this->_internal_showcase_items_size();
  for (const auto& msg : this->_impl_.showcase_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseItem background = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.background_);
    }

    // optional .CMsgShowcase.EModerationState moderation_state = 4 [default = k_eModerationState_Ok];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_moderation_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcase::GetClassData() const { return &_class_data_; }


void CMsgShowcase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcase*>(&to_msg);
  auto& from = static_cast<const CMsgShowcase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.showcase_items_.MergeFrom(from._impl_.showcase_items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_background()->::CMsgShowcaseItem::MergeFrom(
          from._internal_background());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.moderation_state_ = from._impl_.moderation_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcase::CopyFrom(const CMsgShowcase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcase::IsInitialized() const {
  return true;
}

void CMsgShowcase::InternalSwap(CMsgShowcase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.showcase_items_.InternalSwap(&other->_impl_.showcase_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcase, _impl_.moderation_state_)
      + sizeof(CMsgShowcase::_impl_.moderation_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcase, _impl_.background_)>(
          reinterpret_cast<char*>(&_impl_.background_),
          reinterpret_cast<char*>(&other->_impl_.background_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[27]);
}

// ===================================================================

class CMsgClientToGCShowcaseGetUserData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseGetUserData>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCShowcaseGetUserData::CMsgClientToGCShowcaseGetUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseGetUserData)
}
CMsgClientToGCShowcaseGetUserData::CMsgClientToGCShowcaseGetUserData(const CMsgClientToGCShowcaseGetUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseGetUserData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.showcase_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.showcase_type_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.showcase_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseGetUserData)
}

inline void CMsgClientToGCShowcaseGetUserData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.showcase_type_){0}
  };
}

CMsgClientToGCShowcaseGetUserData::~CMsgClientToGCShowcaseGetUserData() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseGetUserData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseGetUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseGetUserData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseGetUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseGetUserData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.showcase_type_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.showcase_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseGetUserData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseGetUserData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseGetUserData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_showcase_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseGetUserData)
  return target;
}

size_t CMsgClientToGCShowcaseGetUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseGetUserData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseGetUserData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseGetUserData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseGetUserData::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseGetUserData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseGetUserData*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseGetUserData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseGetUserData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseGetUserData::CopyFrom(const CMsgClientToGCShowcaseGetUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseGetUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseGetUserData::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseGetUserData::InternalSwap(CMsgClientToGCShowcaseGetUserData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseGetUserData, _impl_.showcase_type_)
      + sizeof(CMsgClientToGCShowcaseGetUserData::_impl_.showcase_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseGetUserData, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseGetUserData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[28]);
}

// ===================================================================

class CMsgClientToGCShowcaseGetUserDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseGetUserDataResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgShowcase& showcase(const CMsgClientToGCShowcaseGetUserDataResponse* msg);
  static void set_has_showcase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgShowcase&
CMsgClientToGCShowcaseGetUserDataResponse::_Internal::showcase(const CMsgClientToGCShowcaseGetUserDataResponse* msg) {
  return *msg->_impl_.showcase_;
}
CMsgClientToGCShowcaseGetUserDataResponse::CMsgClientToGCShowcaseGetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseGetUserDataResponse)
}
CMsgClientToGCShowcaseGetUserDataResponse::CMsgClientToGCShowcaseGetUserDataResponse(const CMsgClientToGCShowcaseGetUserDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseGetUserDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_showcase()) {
    _this->_impl_.showcase_ = new ::CMsgShowcase(*from._impl_.showcase_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseGetUserDataResponse)
}

inline void CMsgClientToGCShowcaseGetUserDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseGetUserDataResponse::~CMsgClientToGCShowcaseGetUserDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseGetUserDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseGetUserDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.showcase_;
}

void CMsgClientToGCShowcaseGetUserDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseGetUserDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseGetUserDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.showcase_ != nullptr);
    _impl_.showcase_->Clear();
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseGetUserDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseGetUserDataResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseGetUserDataResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcase showcase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_showcase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseGetUserDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseGetUserDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional .CMsgShowcase showcase = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::showcase(this),
        _Internal::showcase(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseGetUserDataResponse)
  return target;
}

size_t CMsgClientToGCShowcaseGetUserDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseGetUserDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcase showcase = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.showcase_);
    }

    // optional .CMsgClientToGCShowcaseGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseGetUserDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseGetUserDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseGetUserDataResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseGetUserDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseGetUserDataResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseGetUserDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseGetUserDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_showcase()->::CMsgShowcase::MergeFrom(
          from._internal_showcase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseGetUserDataResponse::CopyFrom(const CMsgClientToGCShowcaseGetUserDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseGetUserDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseGetUserDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseGetUserDataResponse::InternalSwap(CMsgClientToGCShowcaseGetUserDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseGetUserDataResponse, _impl_.response_)
      + sizeof(CMsgClientToGCShowcaseGetUserDataResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseGetUserDataResponse, _impl_.showcase_)>(
          reinterpret_cast<char*>(&_impl_.showcase_),
          reinterpret_cast<char*>(&other->_impl_.showcase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseGetUserDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[29]);
}

// ===================================================================

class CMsgClientToGCShowcaseSetUserData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseSetUserData>()._impl_._has_bits_);
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgShowcase& showcase(const CMsgClientToGCShowcaseSetUserData* msg);
  static void set_has_showcase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgShowcase&
CMsgClientToGCShowcaseSetUserData::_Internal::showcase(const CMsgClientToGCShowcaseSetUserData* msg) {
  return *msg->_impl_.showcase_;
}
CMsgClientToGCShowcaseSetUserData::CMsgClientToGCShowcaseSetUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseSetUserData)
}
CMsgClientToGCShowcaseSetUserData::CMsgClientToGCShowcaseSetUserData(const CMsgClientToGCShowcaseSetUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseSetUserData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_){nullptr}
    , decltype(_impl_.showcase_type_){}
    , decltype(_impl_.format_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_showcase()) {
    _this->_impl_.showcase_ = new ::CMsgShowcase(*from._impl_.showcase_);
  }
  ::memcpy(&_impl_.showcase_type_, &from._impl_.showcase_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.format_version_) -
    reinterpret_cast<char*>(&_impl_.showcase_type_)) + sizeof(_impl_.format_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseSetUserData)
}

inline void CMsgClientToGCShowcaseSetUserData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_){nullptr}
    , decltype(_impl_.showcase_type_){0}
    , decltype(_impl_.format_version_){0u}
  };
}

CMsgClientToGCShowcaseSetUserData::~CMsgClientToGCShowcaseSetUserData() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseSetUserData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseSetUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.showcase_;
}

void CMsgClientToGCShowcaseSetUserData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseSetUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseSetUserData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.showcase_ != nullptr);
    _impl_.showcase_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.showcase_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.format_version_) -
        reinterpret_cast<char*>(&_impl_.showcase_type_)) + sizeof(_impl_.format_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseSetUserData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcase showcase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_showcase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 format_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_format_version(&has_bits);
          _impl_.format_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseSetUserData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseSetUserData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_showcase_type(), target);
  }

  // optional .CMsgShowcase showcase = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::showcase(this),
        _Internal::showcase(this).GetCachedSize(), target, stream);
  }

  // optional uint32 format_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_format_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseSetUserData)
  return target;
}

size_t CMsgClientToGCShowcaseSetUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseSetUserData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgShowcase showcase = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.showcase_);
    }

    // optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

    // optional uint32 format_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_format_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseSetUserData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseSetUserData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseSetUserData::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseSetUserData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseSetUserData*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseSetUserData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseSetUserData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_showcase()->::CMsgShowcase::MergeFrom(
          from._internal_showcase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.format_version_ = from._impl_.format_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseSetUserData::CopyFrom(const CMsgClientToGCShowcaseSetUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseSetUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseSetUserData::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseSetUserData::InternalSwap(CMsgClientToGCShowcaseSetUserData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseSetUserData, _impl_.format_version_)
      + sizeof(CMsgClientToGCShowcaseSetUserData::_impl_.format_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseSetUserData, _impl_.showcase_)>(
          reinterpret_cast<char*>(&_impl_.showcase_),
          reinterpret_cast<char*>(&other->_impl_.showcase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseSetUserData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[30]);
}

// ===================================================================

class CMsgClientToGCShowcaseSetUserDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseSetUserDataResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgShowcase& validated_showcase(const CMsgClientToGCShowcaseSetUserDataResponse* msg);
  static void set_has_validated_showcase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locked_until_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgShowcase&
CMsgClientToGCShowcaseSetUserDataResponse::_Internal::validated_showcase(const CMsgClientToGCShowcaseSetUserDataResponse* msg) {
  return *msg->_impl_.validated_showcase_;
}
CMsgClientToGCShowcaseSetUserDataResponse::CMsgClientToGCShowcaseSetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseSetUserDataResponse)
}
CMsgClientToGCShowcaseSetUserDataResponse::CMsgClientToGCShowcaseSetUserDataResponse(const CMsgClientToGCShowcaseSetUserDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseSetUserDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validated_showcase_){nullptr}
    , decltype(_impl_.response_){}
    , decltype(_impl_.locked_until_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_validated_showcase()) {
    _this->_impl_.validated_showcase_ = new ::CMsgShowcase(*from._impl_.validated_showcase_);
  }
  ::memcpy(&_impl_.response_, &from._impl_.response_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.locked_until_timestamp_) -
    reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.locked_until_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseSetUserDataResponse)
}

inline void CMsgClientToGCShowcaseSetUserDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validated_showcase_){nullptr}
    , decltype(_impl_.response_){0}
    , decltype(_impl_.locked_until_timestamp_){0u}
  };
}

CMsgClientToGCShowcaseSetUserDataResponse::~CMsgClientToGCShowcaseSetUserDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseSetUserDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseSetUserDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.validated_showcase_;
}

void CMsgClientToGCShowcaseSetUserDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseSetUserDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseSetUserDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.validated_showcase_ != nullptr);
    _impl_.validated_showcase_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.locked_until_timestamp_) -
        reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.locked_until_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseSetUserDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseSetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseSetUserDataResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseSetUserDataResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcase validated_showcase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validated_showcase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 locked_until_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_locked_until_timestamp(&has_bits);
          _impl_.locked_until_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseSetUserDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseSetUserDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseSetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional .CMsgShowcase validated_showcase = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::validated_showcase(this),
        _Internal::validated_showcase(this).GetCachedSize(), target, stream);
  }

  // optional uint32 locked_until_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_locked_until_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseSetUserDataResponse)
  return target;
}

size_t CMsgClientToGCShowcaseSetUserDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseSetUserDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgShowcase validated_showcase = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.validated_showcase_);
    }

    // optional .CMsgClientToGCShowcaseSetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

    // optional uint32 locked_until_timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_locked_until_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseSetUserDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseSetUserDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseSetUserDataResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseSetUserDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseSetUserDataResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseSetUserDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseSetUserDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_validated_showcase()->::CMsgShowcase::MergeFrom(
          from._internal_validated_showcase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.locked_until_timestamp_ = from._impl_.locked_until_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseSetUserDataResponse::CopyFrom(const CMsgClientToGCShowcaseSetUserDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseSetUserDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseSetUserDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseSetUserDataResponse::InternalSwap(CMsgClientToGCShowcaseSetUserDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseSetUserDataResponse, _impl_.locked_until_timestamp_)
      + sizeof(CMsgClientToGCShowcaseSetUserDataResponse::_impl_.locked_until_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseSetUserDataResponse, _impl_.validated_showcase_)>(
          reinterpret_cast<char*>(&_impl_.validated_showcase_),
          reinterpret_cast<char*>(&other->_impl_.validated_showcase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseSetUserDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[31]);
}

// ===================================================================

class CMsgClientToGCShowcaseSubmitReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseSubmitReport>()._impl_._has_bits_);
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_report_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCShowcaseSubmitReport::CMsgClientToGCShowcaseSubmitReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseSubmitReport)
}
CMsgClientToGCShowcaseSubmitReport::CMsgClientToGCShowcaseSubmitReport(const CMsgClientToGCShowcaseSubmitReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseSubmitReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.report_comment_){}
    , decltype(_impl_.target_account_id_){}
    , decltype(_impl_.showcase_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.report_comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.report_comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_report_comment()) {
    _this->_impl_.report_comment_.Set(from._internal_report_comment(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.target_account_id_, &from._impl_.target_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.showcase_type_) -
    reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.showcase_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseSubmitReport)
}

inline void CMsgClientToGCShowcaseSubmitReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.report_comment_){}
    , decltype(_impl_.target_account_id_){0u}
    , decltype(_impl_.showcase_type_){0}
  };
  _impl_.report_comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.report_comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCShowcaseSubmitReport::~CMsgClientToGCShowcaseSubmitReport() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseSubmitReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseSubmitReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.report_comment_.Destroy();
}

void CMsgClientToGCShowcaseSubmitReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseSubmitReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseSubmitReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.report_comment_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.target_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.showcase_type_) -
        reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.showcase_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseSubmitReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 target_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_target_account_id(&has_bits);
          _impl_.target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string report_comment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_report_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCShowcaseSubmitReport.report_comment");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseSubmitReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseSubmitReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 target_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_account_id(), target);
  }

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_showcase_type(), target);
  }

  // optional string report_comment = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_report_comment().data(), static_cast<int>(this->_internal_report_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCShowcaseSubmitReport.report_comment");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_report_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseSubmitReport)
  return target;
}

size_t CMsgClientToGCShowcaseSubmitReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseSubmitReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string report_comment = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_report_comment());
    }

    // optional uint32 target_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_account_id());
    }

    // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseSubmitReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseSubmitReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseSubmitReport::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseSubmitReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseSubmitReport*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseSubmitReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseSubmitReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_report_comment(from._internal_report_comment());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_account_id_ = from._impl_.target_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseSubmitReport::CopyFrom(const CMsgClientToGCShowcaseSubmitReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseSubmitReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseSubmitReport::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseSubmitReport::InternalSwap(CMsgClientToGCShowcaseSubmitReport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.report_comment_, lhs_arena,
      &other->_impl_.report_comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseSubmitReport, _impl_.showcase_type_)
      + sizeof(CMsgClientToGCShowcaseSubmitReport::_impl_.showcase_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseSubmitReport, _impl_.target_account_id_)>(
          reinterpret_cast<char*>(&_impl_.target_account_id_),
          reinterpret_cast<char*>(&other->_impl_.target_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseSubmitReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[32]);
}

// ===================================================================

class CMsgClientToGCShowcaseSubmitReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseSubmitReportResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCShowcaseSubmitReportResponse::CMsgClientToGCShowcaseSubmitReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseSubmitReportResponse)
}
CMsgClientToGCShowcaseSubmitReportResponse::CMsgClientToGCShowcaseSubmitReportResponse(const CMsgClientToGCShowcaseSubmitReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseSubmitReportResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseSubmitReportResponse)
}

inline void CMsgClientToGCShowcaseSubmitReportResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseSubmitReportResponse::~CMsgClientToGCShowcaseSubmitReportResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseSubmitReportResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseSubmitReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseSubmitReportResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseSubmitReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseSubmitReportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseSubmitReportResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseSubmitReportResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseSubmitReportResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseSubmitReportResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseSubmitReportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseSubmitReportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseSubmitReportResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseSubmitReportResponse)
  return target;
}

size_t CMsgClientToGCShowcaseSubmitReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseSubmitReportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCShowcaseSubmitReportResponse.EResponse response = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseSubmitReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseSubmitReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseSubmitReportResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseSubmitReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseSubmitReportResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseSubmitReportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseSubmitReportResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseSubmitReportResponse::CopyFrom(const CMsgClientToGCShowcaseSubmitReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseSubmitReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseSubmitReportResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseSubmitReportResponse::InternalSwap(CMsgClientToGCShowcaseSubmitReportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseSubmitReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[33]);
}

// ===================================================================

class CMsgShowcaseReportsRollupInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseReportsRollupInfo>()._impl_._has_bits_);
  static void set_has_rollup_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgShowcaseReportsRollupInfo::CMsgShowcaseReportsRollupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseReportsRollupInfo)
}
CMsgShowcaseReportsRollupInfo::CMsgShowcaseReportsRollupInfo(const CMsgShowcaseReportsRollupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseReportsRollupInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollup_id_){}
    , decltype(_impl_.start_timestamp_){}
    , decltype(_impl_.end_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rollup_id_, &from._impl_.rollup_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_timestamp_) -
    reinterpret_cast<char*>(&_impl_.rollup_id_)) + sizeof(_impl_.end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseReportsRollupInfo)
}

inline void CMsgShowcaseReportsRollupInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollup_id_){0u}
    , decltype(_impl_.start_timestamp_){0u}
    , decltype(_impl_.end_timestamp_){0u}
  };
}

CMsgShowcaseReportsRollupInfo::~CMsgShowcaseReportsRollupInfo() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseReportsRollupInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseReportsRollupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseReportsRollupInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseReportsRollupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseReportsRollupInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.rollup_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_timestamp_) -
        reinterpret_cast<char*>(&_impl_.rollup_id_)) + sizeof(_impl_.end_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseReportsRollupInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 rollup_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rollup_id(&has_bits);
          _impl_.rollup_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_start_timestamp(&has_bits);
          _impl_.start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 end_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_end_timestamp(&has_bits);
          _impl_.end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseReportsRollupInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseReportsRollupInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 rollup_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rollup_id(), target);
  }

  // optional uint32 start_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_timestamp(), target);
  }

  // optional uint32 end_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseReportsRollupInfo)
  return target;
}

size_t CMsgShowcaseReportsRollupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseReportsRollupInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 rollup_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rollup_id());
    }

    // optional uint32 start_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_timestamp());
    }

    // optional uint32 end_timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_end_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseReportsRollupInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseReportsRollupInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseReportsRollupInfo::GetClassData() const { return &_class_data_; }


void CMsgShowcaseReportsRollupInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseReportsRollupInfo*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseReportsRollupInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseReportsRollupInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rollup_id_ = from._impl_.rollup_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.start_timestamp_ = from._impl_.start_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_timestamp_ = from._impl_.end_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseReportsRollupInfo::CopyFrom(const CMsgShowcaseReportsRollupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseReportsRollupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseReportsRollupInfo::IsInitialized() const {
  return true;
}

void CMsgShowcaseReportsRollupInfo::InternalSwap(CMsgShowcaseReportsRollupInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseReportsRollupInfo, _impl_.end_timestamp_)
      + sizeof(CMsgShowcaseReportsRollupInfo::_impl_.end_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseReportsRollupInfo, _impl_.rollup_id_)>(
          reinterpret_cast<char*>(&_impl_.rollup_id_),
          reinterpret_cast<char*>(&other->_impl_.rollup_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseReportsRollupInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[34]);
}

// ===================================================================

class CMsgShowcaseReportsRollupList::_Internal {
 public:
};

CMsgShowcaseReportsRollupList::CMsgShowcaseReportsRollupList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseReportsRollupList)
}
CMsgShowcaseReportsRollupList::CMsgShowcaseReportsRollupList(const CMsgShowcaseReportsRollupList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseReportsRollupList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rollups_){from._impl_.rollups_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseReportsRollupList)
}

inline void CMsgShowcaseReportsRollupList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rollups_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgShowcaseReportsRollupList::~CMsgShowcaseReportsRollupList() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseReportsRollupList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseReportsRollupList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rollups_.~RepeatedPtrField();
}

void CMsgShowcaseReportsRollupList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseReportsRollupList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseReportsRollupList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rollups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseReportsRollupList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgShowcaseReportsRollupInfo rollups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rollups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseReportsRollupList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseReportsRollupList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgShowcaseReportsRollupInfo rollups = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rollups_size()); i < n; i++) {
    const auto& repfield = this->_internal_rollups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseReportsRollupList)
  return target;
}

size_t CMsgShowcaseReportsRollupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseReportsRollupList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgShowcaseReportsRollupInfo rollups = 1;
  total_size += 1UL * this->_internal_rollups_size();
  for (const auto& msg : this->_impl_.rollups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseReportsRollupList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseReportsRollupList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseReportsRollupList::GetClassData() const { return &_class_data_; }


void CMsgShowcaseReportsRollupList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseReportsRollupList*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseReportsRollupList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseReportsRollupList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rollups_.MergeFrom(from._impl_.rollups_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseReportsRollupList::CopyFrom(const CMsgShowcaseReportsRollupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseReportsRollupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseReportsRollupList::IsInitialized() const {
  return true;
}

void CMsgShowcaseReportsRollupList::InternalSwap(CMsgShowcaseReportsRollupList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rollups_.InternalSwap(&other->_impl_.rollups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseReportsRollupList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[35]);
}

// ===================================================================

class CMsgShowcaseReportsRollupEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseReportsRollupEntry>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_report_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgShowcaseReportsRollupEntry::CMsgShowcaseReportsRollupEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseReportsRollupEntry)
}
CMsgShowcaseReportsRollupEntry::CMsgShowcaseReportsRollupEntry(const CMsgShowcaseReportsRollupEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseReportsRollupEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.showcase_type_){}
    , decltype(_impl_.report_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.report_count_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.report_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseReportsRollupEntry)
}

inline void CMsgShowcaseReportsRollupEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.showcase_type_){0}
    , decltype(_impl_.report_count_){0u}
  };
}

CMsgShowcaseReportsRollupEntry::~CMsgShowcaseReportsRollupEntry() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseReportsRollupEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseReportsRollupEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseReportsRollupEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseReportsRollupEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseReportsRollupEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.report_count_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.report_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseReportsRollupEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 report_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_report_count(&has_bits);
          _impl_.report_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseReportsRollupEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseReportsRollupEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_showcase_type(), target);
  }

  // optional uint32 report_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_report_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseReportsRollupEntry)
  return target;
}

size_t CMsgShowcaseReportsRollupEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseReportsRollupEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

    // optional uint32 report_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_report_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseReportsRollupEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseReportsRollupEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseReportsRollupEntry::GetClassData() const { return &_class_data_; }


void CMsgShowcaseReportsRollupEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseReportsRollupEntry*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseReportsRollupEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseReportsRollupEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.report_count_ = from._impl_.report_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseReportsRollupEntry::CopyFrom(const CMsgShowcaseReportsRollupEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseReportsRollupEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseReportsRollupEntry::IsInitialized() const {
  return true;
}

void CMsgShowcaseReportsRollupEntry::InternalSwap(CMsgShowcaseReportsRollupEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseReportsRollupEntry, _impl_.report_count_)
      + sizeof(CMsgShowcaseReportsRollupEntry::_impl_.report_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseReportsRollupEntry, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseReportsRollupEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[36]);
}

// ===================================================================

class CMsgShowcaseReportsRollup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseReportsRollup>()._impl_._has_bits_);
  static const ::CMsgShowcaseReportsRollupInfo& rollup_info(const CMsgShowcaseReportsRollup* msg);
  static void set_has_rollup_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgShowcaseReportsRollupInfo&
CMsgShowcaseReportsRollup::_Internal::rollup_info(const CMsgShowcaseReportsRollup* msg) {
  return *msg->_impl_.rollup_info_;
}
CMsgShowcaseReportsRollup::CMsgShowcaseReportsRollup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseReportsRollup)
}
CMsgShowcaseReportsRollup::CMsgShowcaseReportsRollup(const CMsgShowcaseReportsRollup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseReportsRollup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollup_entries_){from._impl_.rollup_entries_}
    , decltype(_impl_.rollup_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rollup_info()) {
    _this->_impl_.rollup_info_ = new ::CMsgShowcaseReportsRollupInfo(*from._impl_.rollup_info_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseReportsRollup)
}

inline void CMsgShowcaseReportsRollup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollup_entries_){arena}
    , decltype(_impl_.rollup_info_){nullptr}
  };
}

CMsgShowcaseReportsRollup::~CMsgShowcaseReportsRollup() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseReportsRollup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseReportsRollup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rollup_entries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.rollup_info_;
}

void CMsgShowcaseReportsRollup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseReportsRollup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseReportsRollup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rollup_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.rollup_info_ != nullptr);
    _impl_.rollup_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseReportsRollup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseReportsRollupInfo rollup_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollup_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgShowcaseReportsRollupEntry rollup_entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rollup_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseReportsRollup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseReportsRollup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseReportsRollupInfo rollup_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rollup_info(this),
        _Internal::rollup_info(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgShowcaseReportsRollupEntry rollup_entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rollup_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_rollup_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseReportsRollup)
  return target;
}

size_t CMsgShowcaseReportsRollup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseReportsRollup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgShowcaseReportsRollupEntry rollup_entries = 2;
  total_size += 1UL * this->_internal_rollup_entries_size();
  for (const auto& msg : this->_impl_.rollup_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgShowcaseReportsRollupInfo rollup_info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rollup_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseReportsRollup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseReportsRollup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseReportsRollup::GetClassData() const { return &_class_data_; }


void CMsgShowcaseReportsRollup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseReportsRollup*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseReportsRollup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseReportsRollup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rollup_entries_.MergeFrom(from._impl_.rollup_entries_);
  if (from._internal_has_rollup_info()) {
    _this->_internal_mutable_rollup_info()->::CMsgShowcaseReportsRollupInfo::MergeFrom(
        from._internal_rollup_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseReportsRollup::CopyFrom(const CMsgShowcaseReportsRollup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseReportsRollup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseReportsRollup::IsInitialized() const {
  return true;
}

void CMsgShowcaseReportsRollup::InternalSwap(CMsgShowcaseReportsRollup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rollup_entries_.InternalSwap(&other->_impl_.rollup_entries_);
  swap(_impl_.rollup_info_, other->_impl_.rollup_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseReportsRollup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[37]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminGetReportsRollupList::_Internal {
 public:
};

CMsgClientToGCShowcaseAdminGetReportsRollupList::CMsgClientToGCShowcaseAdminGetReportsRollupList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminGetReportsRollupList)
}
CMsgClientToGCShowcaseAdminGetReportsRollupList::CMsgClientToGCShowcaseAdminGetReportsRollupList(const CMsgClientToGCShowcaseAdminGetReportsRollupList& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgClientToGCShowcaseAdminGetReportsRollupList* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminGetReportsRollupList)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminGetReportsRollupList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminGetReportsRollupList::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminGetReportsRollupList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[38]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminGetReportsRollupListResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgShowcaseReportsRollupList& rollup_list(const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse* msg);
  static void set_has_rollup_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgShowcaseReportsRollupList&
CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::_Internal::rollup_list(const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse* msg) {
  return *msg->_impl_.rollup_list_;
}
CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse)
}
CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse(const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminGetReportsRollupListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollup_list_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rollup_list()) {
    _this->_impl_.rollup_list_ = new ::CMsgShowcaseReportsRollupList(*from._impl_.rollup_list_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse)
}

inline void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollup_list_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::~CMsgClientToGCShowcaseAdminGetReportsRollupListResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rollup_list_;
}

void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.rollup_list_ != nullptr);
    _impl_.rollup_list_->Clear();
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseReportsRollupList rollup_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollup_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional .CMsgShowcaseReportsRollupList rollup_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rollup_list(this),
        _Internal::rollup_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse)
  return target;
}

size_t CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseReportsRollupList rollup_list = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rollup_list_);
    }

    // optional .CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminGetReportsRollupListResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rollup_list()->::CMsgShowcaseReportsRollupList::MergeFrom(
          from._internal_rollup_list());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::CopyFrom(const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminGetReportsRollupListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::InternalSwap(CMsgClientToGCShowcaseAdminGetReportsRollupListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminGetReportsRollupListResponse, _impl_.response_)
      + sizeof(CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminGetReportsRollupListResponse, _impl_.rollup_list_)>(
          reinterpret_cast<char*>(&_impl_.rollup_list_),
          reinterpret_cast<char*>(&other->_impl_.rollup_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminGetReportsRollupListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[39]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminGetReportsRollup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminGetReportsRollup>()._impl_._has_bits_);
  static void set_has_rollup_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCShowcaseAdminGetReportsRollup::CMsgClientToGCShowcaseAdminGetReportsRollup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminGetReportsRollup)
}
CMsgClientToGCShowcaseAdminGetReportsRollup::CMsgClientToGCShowcaseAdminGetReportsRollup(const CMsgClientToGCShowcaseAdminGetReportsRollup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminGetReportsRollup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollup_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rollup_id_ = from._impl_.rollup_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminGetReportsRollup)
}

inline void CMsgClientToGCShowcaseAdminGetReportsRollup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollup_id_){0u}
  };
}

CMsgClientToGCShowcaseAdminGetReportsRollup::~CMsgClientToGCShowcaseAdminGetReportsRollup() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminGetReportsRollup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminGetReportsRollup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseAdminGetReportsRollup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminGetReportsRollup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminGetReportsRollup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rollup_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminGetReportsRollup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 rollup_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rollup_id(&has_bits);
          _impl_.rollup_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminGetReportsRollup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminGetReportsRollup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 rollup_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rollup_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminGetReportsRollup)
  return target;
}

size_t CMsgClientToGCShowcaseAdminGetReportsRollup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminGetReportsRollup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 rollup_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rollup_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminGetReportsRollup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminGetReportsRollup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminGetReportsRollup::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminGetReportsRollup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminGetReportsRollup*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminGetReportsRollup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminGetReportsRollup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rollup_id()) {
    _this->_internal_set_rollup_id(from._internal_rollup_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminGetReportsRollup::CopyFrom(const CMsgClientToGCShowcaseAdminGetReportsRollup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminGetReportsRollup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminGetReportsRollup::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminGetReportsRollup::InternalSwap(CMsgClientToGCShowcaseAdminGetReportsRollup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.rollup_id_, other->_impl_.rollup_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminGetReportsRollup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[40]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminGetReportsRollupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminGetReportsRollupResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgShowcaseReportsRollup& rollup(const CMsgClientToGCShowcaseAdminGetReportsRollupResponse* msg);
  static void set_has_rollup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgShowcaseReportsRollup&
CMsgClientToGCShowcaseAdminGetReportsRollupResponse::_Internal::rollup(const CMsgClientToGCShowcaseAdminGetReportsRollupResponse* msg) {
  return *msg->_impl_.rollup_;
}
CMsgClientToGCShowcaseAdminGetReportsRollupResponse::CMsgClientToGCShowcaseAdminGetReportsRollupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminGetReportsRollupResponse)
}
CMsgClientToGCShowcaseAdminGetReportsRollupResponse::CMsgClientToGCShowcaseAdminGetReportsRollupResponse(const CMsgClientToGCShowcaseAdminGetReportsRollupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminGetReportsRollupResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollup_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rollup()) {
    _this->_impl_.rollup_ = new ::CMsgShowcaseReportsRollup(*from._impl_.rollup_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminGetReportsRollupResponse)
}

inline void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollup_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseAdminGetReportsRollupResponse::~CMsgClientToGCShowcaseAdminGetReportsRollupResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminGetReportsRollupResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rollup_;
}

void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminGetReportsRollupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.rollup_ != nullptr);
    _impl_.rollup_->Clear();
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminGetReportsRollupResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseAdminGetReportsRollupResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseReportsRollup rollup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminGetReportsRollupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminGetReportsRollupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseAdminGetReportsRollupResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional .CMsgShowcaseReportsRollup rollup = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rollup(this),
        _Internal::rollup(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminGetReportsRollupResponse)
  return target;
}

size_t CMsgClientToGCShowcaseAdminGetReportsRollupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminGetReportsRollupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseReportsRollup rollup = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rollup_);
    }

    // optional .CMsgClientToGCShowcaseAdminGetReportsRollupResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminGetReportsRollupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminGetReportsRollupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminGetReportsRollupResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminGetReportsRollupResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminGetReportsRollupResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminGetReportsRollupResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rollup()->::CMsgShowcaseReportsRollup::MergeFrom(
          from._internal_rollup());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::CopyFrom(const CMsgClientToGCShowcaseAdminGetReportsRollupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminGetReportsRollupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminGetReportsRollupResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminGetReportsRollupResponse::InternalSwap(CMsgClientToGCShowcaseAdminGetReportsRollupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminGetReportsRollupResponse, _impl_.response_)
      + sizeof(CMsgClientToGCShowcaseAdminGetReportsRollupResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminGetReportsRollupResponse, _impl_.rollup_)>(
          reinterpret_cast<char*>(&_impl_.rollup_),
          reinterpret_cast<char*>(&other->_impl_.rollup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminGetReportsRollupResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[41]);
}

// ===================================================================

class CMsgShowcaseAuditEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseAuditEntry>()._impl_._has_bits_);
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_audit_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgShowcaseAuditEntry::CMsgShowcaseAuditEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseAuditEntry)
}
CMsgShowcaseAuditEntry::CMsgShowcaseAuditEntry(const CMsgShowcaseAuditEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseAuditEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_type_){}
    , decltype(_impl_.audit_action_){}
    , decltype(_impl_.audit_data_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.showcase_type_, &from._impl_.showcase_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.showcase_type_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseAuditEntry)
}

inline void CMsgShowcaseAuditEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_type_){0}
    , decltype(_impl_.audit_action_){0}
    , decltype(_impl_.audit_data_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){0u}
  };
}

CMsgShowcaseAuditEntry::~CMsgShowcaseAuditEntry() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseAuditEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseAuditEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseAuditEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseAuditEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseAuditEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.showcase_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.showcase_type_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseAuditEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseAuditAction audit_action = 2 [default = k_eShowcaseAuditAction_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseAuditAction_IsValid(val))) {
            _internal_set_audit_action(static_cast<::EShowcaseAuditAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 audit_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_audit_data(&has_bits);
          _impl_.audit_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseAuditEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseAuditEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_showcase_type(), target);
  }

  // optional .EShowcaseAuditAction audit_action = 2 [default = k_eShowcaseAuditAction_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_audit_action(), target);
  }

  // optional uint64 audit_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_audit_data(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseAuditEntry)
  return target;
}

size_t CMsgShowcaseAuditEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseAuditEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

    // optional .EShowcaseAuditAction audit_action = 2 [default = k_eShowcaseAuditAction_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_audit_action());
    }

    // optional uint64 audit_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_audit_data());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseAuditEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseAuditEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseAuditEntry::GetClassData() const { return &_class_data_; }


void CMsgShowcaseAuditEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseAuditEntry*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseAuditEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseAuditEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.audit_action_ = from._impl_.audit_action_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.audit_data_ = from._impl_.audit_data_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseAuditEntry::CopyFrom(const CMsgShowcaseAuditEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseAuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseAuditEntry::IsInitialized() const {
  return true;
}

void CMsgShowcaseAuditEntry::InternalSwap(CMsgShowcaseAuditEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseAuditEntry, _impl_.timestamp_)
      + sizeof(CMsgShowcaseAuditEntry::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseAuditEntry, _impl_.showcase_type_)>(
          reinterpret_cast<char*>(&_impl_.showcase_type_),
          reinterpret_cast<char*>(&other->_impl_.showcase_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseAuditEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[42]);
}

// ===================================================================

class CMsgShowcaseReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseReport>()._impl_._has_bits_);
  static void set_has_reporter_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_report_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_report_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgShowcaseReport::CMsgShowcaseReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseReport)
}
CMsgShowcaseReport::CMsgShowcaseReport(const CMsgShowcaseReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.report_comment_){}
    , decltype(_impl_.reporter_account_id_){}
    , decltype(_impl_.showcase_type_){}
    , decltype(_impl_.report_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.report_comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.report_comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_report_comment()) {
    _this->_impl_.report_comment_.Set(from._internal_report_comment(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.reporter_account_id_, &from._impl_.reporter_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.report_timestamp_) -
    reinterpret_cast<char*>(&_impl_.reporter_account_id_)) + sizeof(_impl_.report_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseReport)
}

inline void CMsgShowcaseReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.report_comment_){}
    , decltype(_impl_.reporter_account_id_){0u}
    , decltype(_impl_.showcase_type_){0}
    , decltype(_impl_.report_timestamp_){0u}
  };
  _impl_.report_comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.report_comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgShowcaseReport::~CMsgShowcaseReport() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.report_comment_.Destroy();
}

void CMsgShowcaseReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.report_comment_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.reporter_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.report_timestamp_) -
        reinterpret_cast<char*>(&_impl_.reporter_account_id_)) + sizeof(_impl_.report_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 reporter_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reporter_account_id(&has_bits);
          _impl_.reporter_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 report_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_report_timestamp(&has_bits);
          _impl_.report_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string report_comment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_report_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgShowcaseReport.report_comment");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 reporter_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reporter_account_id(), target);
  }

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_showcase_type(), target);
  }

  // optional uint32 report_timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_report_timestamp(), target);
  }

  // optional string report_comment = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_report_comment().data(), static_cast<int>(this->_internal_report_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgShowcaseReport.report_comment");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_report_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseReport)
  return target;
}

size_t CMsgShowcaseReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string report_comment = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_report_comment());
    }

    // optional uint32 reporter_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reporter_account_id());
    }

    // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

    // optional uint32 report_timestamp = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_report_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseReport::GetClassData() const { return &_class_data_; }


void CMsgShowcaseReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseReport*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_report_comment(from._internal_report_comment());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reporter_account_id_ = from._impl_.reporter_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.report_timestamp_ = from._impl_.report_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseReport::CopyFrom(const CMsgShowcaseReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseReport::IsInitialized() const {
  return true;
}

void CMsgShowcaseReport::InternalSwap(CMsgShowcaseReport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.report_comment_, lhs_arena,
      &other->_impl_.report_comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseReport, _impl_.report_timestamp_)
      + sizeof(CMsgShowcaseReport::_impl_.report_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseReport, _impl_.reporter_account_id_)>(
          reinterpret_cast<char*>(&_impl_.reporter_account_id_),
          reinterpret_cast<char*>(&other->_impl_.reporter_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[43]);
}

// ===================================================================

class CMsgShowcaseAdminUserDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseAdminUserDetails>()._impl_._has_bits_);
  static void set_has_locked_until_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgShowcaseAdminUserDetails::CMsgShowcaseAdminUserDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseAdminUserDetails)
}
CMsgShowcaseAdminUserDetails::CMsgShowcaseAdminUserDetails(const CMsgShowcaseAdminUserDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseAdminUserDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audit_entries_){from._impl_.audit_entries_}
    , decltype(_impl_.reports_){from._impl_.reports_}
    , decltype(_impl_.locked_until_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.locked_until_timestamp_ = from._impl_.locked_until_timestamp_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseAdminUserDetails)
}

inline void CMsgShowcaseAdminUserDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audit_entries_){arena}
    , decltype(_impl_.reports_){arena}
    , decltype(_impl_.locked_until_timestamp_){0u}
  };
}

CMsgShowcaseAdminUserDetails::~CMsgShowcaseAdminUserDetails() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseAdminUserDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseAdminUserDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audit_entries_.~RepeatedPtrField();
  _impl_.reports_.~RepeatedPtrField();
}

void CMsgShowcaseAdminUserDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseAdminUserDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseAdminUserDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audit_entries_.Clear();
  _impl_.reports_.Clear();
  _impl_.locked_until_timestamp_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseAdminUserDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 locked_until_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_locked_until_timestamp(&has_bits);
          _impl_.locked_until_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgShowcaseAuditEntry audit_entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_audit_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgShowcaseReport reports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseAdminUserDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseAdminUserDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 locked_until_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_locked_until_timestamp(), target);
  }

  // repeated .CMsgShowcaseAuditEntry audit_entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_audit_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_audit_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgShowcaseReport reports = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reports_size()); i < n; i++) {
    const auto& repfield = this->_internal_reports(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseAdminUserDetails)
  return target;
}

size_t CMsgShowcaseAdminUserDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseAdminUserDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgShowcaseAuditEntry audit_entries = 2;
  total_size += 1UL * this->_internal_audit_entries_size();
  for (const auto& msg : this->_impl_.audit_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgShowcaseReport reports = 3;
  total_size += 1UL * this->_internal_reports_size();
  for (const auto& msg : this->_impl_.reports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 locked_until_timestamp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_locked_until_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseAdminUserDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseAdminUserDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseAdminUserDetails::GetClassData() const { return &_class_data_; }


void CMsgShowcaseAdminUserDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseAdminUserDetails*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseAdminUserDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseAdminUserDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.audit_entries_.MergeFrom(from._impl_.audit_entries_);
  _this->_impl_.reports_.MergeFrom(from._impl_.reports_);
  if (from._internal_has_locked_until_timestamp()) {
    _this->_internal_set_locked_until_timestamp(from._internal_locked_until_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseAdminUserDetails::CopyFrom(const CMsgShowcaseAdminUserDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseAdminUserDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseAdminUserDetails::IsInitialized() const {
  return true;
}

void CMsgShowcaseAdminUserDetails::InternalSwap(CMsgShowcaseAdminUserDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.audit_entries_.InternalSwap(&other->_impl_.audit_entries_);
  _impl_.reports_.InternalSwap(&other->_impl_.reports_);
  swap(_impl_.locked_until_timestamp_, other->_impl_.locked_until_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseAdminUserDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[44]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminGetUserDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminGetUserDetails>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCShowcaseAdminGetUserDetails::CMsgClientToGCShowcaseAdminGetUserDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminGetUserDetails)
}
CMsgClientToGCShowcaseAdminGetUserDetails::CMsgClientToGCShowcaseAdminGetUserDetails(const CMsgClientToGCShowcaseAdminGetUserDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminGetUserDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminGetUserDetails)
}

inline void CMsgClientToGCShowcaseAdminGetUserDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgClientToGCShowcaseAdminGetUserDetails::~CMsgClientToGCShowcaseAdminGetUserDetails() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminGetUserDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminGetUserDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseAdminGetUserDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminGetUserDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminGetUserDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminGetUserDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminGetUserDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminGetUserDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminGetUserDetails)
  return target;
}

size_t CMsgClientToGCShowcaseAdminGetUserDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminGetUserDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminGetUserDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminGetUserDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminGetUserDetails::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminGetUserDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminGetUserDetails*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminGetUserDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminGetUserDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminGetUserDetails::CopyFrom(const CMsgClientToGCShowcaseAdminGetUserDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminGetUserDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminGetUserDetails::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminGetUserDetails::InternalSwap(CMsgClientToGCShowcaseAdminGetUserDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminGetUserDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[45]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminGetUserDetailsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminGetUserDetailsResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgShowcaseAdminUserDetails& user_details(const CMsgClientToGCShowcaseAdminGetUserDetailsResponse* msg);
  static void set_has_user_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgShowcaseAdminUserDetails&
CMsgClientToGCShowcaseAdminGetUserDetailsResponse::_Internal::user_details(const CMsgClientToGCShowcaseAdminGetUserDetailsResponse* msg) {
  return *msg->_impl_.user_details_;
}
CMsgClientToGCShowcaseAdminGetUserDetailsResponse::CMsgClientToGCShowcaseAdminGetUserDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminGetUserDetailsResponse)
}
CMsgClientToGCShowcaseAdminGetUserDetailsResponse::CMsgClientToGCShowcaseAdminGetUserDetailsResponse(const CMsgClientToGCShowcaseAdminGetUserDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminGetUserDetailsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_details_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_details()) {
    _this->_impl_.user_details_ = new ::CMsgShowcaseAdminUserDetails(*from._impl_.user_details_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminGetUserDetailsResponse)
}

inline void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_details_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseAdminGetUserDetailsResponse::~CMsgClientToGCShowcaseAdminGetUserDetailsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminGetUserDetailsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_details_;
}

void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminGetUserDetailsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.user_details_ != nullptr);
    _impl_.user_details_->Clear();
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminGetUserDetailsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseAdminGetUserDetailsResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseAdminUserDetails user_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminGetUserDetailsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminGetUserDetailsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseAdminGetUserDetailsResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional .CMsgShowcaseAdminUserDetails user_details = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_details(this),
        _Internal::user_details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminGetUserDetailsResponse)
  return target;
}

size_t CMsgClientToGCShowcaseAdminGetUserDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminGetUserDetailsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseAdminUserDetails user_details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_details_);
    }

    // optional .CMsgClientToGCShowcaseAdminGetUserDetailsResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminGetUserDetailsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminGetUserDetailsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminGetUserDetailsResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminGetUserDetailsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminGetUserDetailsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminGetUserDetailsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user_details()->::CMsgShowcaseAdminUserDetails::MergeFrom(
          from._internal_user_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::CopyFrom(const CMsgClientToGCShowcaseAdminGetUserDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminGetUserDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminGetUserDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminGetUserDetailsResponse::InternalSwap(CMsgClientToGCShowcaseAdminGetUserDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminGetUserDetailsResponse, _impl_.response_)
      + sizeof(CMsgClientToGCShowcaseAdminGetUserDetailsResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminGetUserDetailsResponse, _impl_.user_details_)>(
          reinterpret_cast<char*>(&_impl_.user_details_),
          reinterpret_cast<char*>(&other->_impl_.user_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminGetUserDetailsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[46]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminReset::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminReset>()._impl_._has_bits_);
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCShowcaseAdminReset::CMsgClientToGCShowcaseAdminReset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminReset)
}
CMsgClientToGCShowcaseAdminReset::CMsgClientToGCShowcaseAdminReset(const CMsgClientToGCShowcaseAdminReset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminReset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_account_id_){}
    , decltype(_impl_.showcase_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_account_id_, &from._impl_.target_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.showcase_type_) -
    reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.showcase_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminReset)
}

inline void CMsgClientToGCShowcaseAdminReset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_account_id_){0u}
    , decltype(_impl_.showcase_type_){0}
  };
}

CMsgClientToGCShowcaseAdminReset::~CMsgClientToGCShowcaseAdminReset() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminReset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminReset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseAdminReset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminReset::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminReset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.target_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.showcase_type_) -
        reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.showcase_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminReset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 target_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_target_account_id(&has_bits);
          _impl_.target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminReset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminReset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 target_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_account_id(), target);
  }

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_showcase_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminReset)
  return target;
}

size_t CMsgClientToGCShowcaseAdminReset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminReset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 target_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_account_id());
    }

    // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminReset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminReset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminReset::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminReset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminReset*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminReset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminReset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.target_account_id_ = from._impl_.target_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminReset::CopyFrom(const CMsgClientToGCShowcaseAdminReset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminReset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminReset::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminReset::InternalSwap(CMsgClientToGCShowcaseAdminReset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminReset, _impl_.showcase_type_)
      + sizeof(CMsgClientToGCShowcaseAdminReset::_impl_.showcase_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminReset, _impl_.target_account_id_)>(
          reinterpret_cast<char*>(&_impl_.target_account_id_),
          reinterpret_cast<char*>(&other->_impl_.target_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminReset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[47]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminResetResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminResetResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCShowcaseAdminResetResponse::CMsgClientToGCShowcaseAdminResetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminResetResponse)
}
CMsgClientToGCShowcaseAdminResetResponse::CMsgClientToGCShowcaseAdminResetResponse(const CMsgClientToGCShowcaseAdminResetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminResetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminResetResponse)
}

inline void CMsgClientToGCShowcaseAdminResetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseAdminResetResponse::~CMsgClientToGCShowcaseAdminResetResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminResetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminResetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseAdminResetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminResetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminResetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminResetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseAdminResetResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseAdminResetResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseAdminResetResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminResetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminResetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseAdminResetResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminResetResponse)
  return target;
}

size_t CMsgClientToGCShowcaseAdminResetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminResetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCShowcaseAdminResetResponse.EResponse response = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminResetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminResetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminResetResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminResetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminResetResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminResetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminResetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminResetResponse::CopyFrom(const CMsgClientToGCShowcaseAdminResetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminResetResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminResetResponse::InternalSwap(CMsgClientToGCShowcaseAdminResetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminResetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[48]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminLockAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminLockAccount>()._impl_._has_bits_);
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locked_until_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCShowcaseAdminLockAccount::CMsgClientToGCShowcaseAdminLockAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminLockAccount)
}
CMsgClientToGCShowcaseAdminLockAccount::CMsgClientToGCShowcaseAdminLockAccount(const CMsgClientToGCShowcaseAdminLockAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminLockAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_account_id_){}
    , decltype(_impl_.locked_until_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_account_id_, &from._impl_.target_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.locked_until_timestamp_) -
    reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.locked_until_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminLockAccount)
}

inline void CMsgClientToGCShowcaseAdminLockAccount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_account_id_){0u}
    , decltype(_impl_.locked_until_timestamp_){0u}
  };
}

CMsgClientToGCShowcaseAdminLockAccount::~CMsgClientToGCShowcaseAdminLockAccount() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminLockAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminLockAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseAdminLockAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminLockAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminLockAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.target_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.locked_until_timestamp_) -
        reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.locked_until_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminLockAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 target_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_target_account_id(&has_bits);
          _impl_.target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 locked_until_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_locked_until_timestamp(&has_bits);
          _impl_.locked_until_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminLockAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminLockAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 target_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_account_id(), target);
  }

  // optional uint32 locked_until_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_locked_until_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminLockAccount)
  return target;
}

size_t CMsgClientToGCShowcaseAdminLockAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminLockAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 target_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_account_id());
    }

    // optional uint32 locked_until_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_locked_until_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminLockAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminLockAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminLockAccount::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminLockAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminLockAccount*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminLockAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminLockAccount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.target_account_id_ = from._impl_.target_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.locked_until_timestamp_ = from._impl_.locked_until_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminLockAccount::CopyFrom(const CMsgClientToGCShowcaseAdminLockAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminLockAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminLockAccount::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminLockAccount::InternalSwap(CMsgClientToGCShowcaseAdminLockAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminLockAccount, _impl_.locked_until_timestamp_)
      + sizeof(CMsgClientToGCShowcaseAdminLockAccount::_impl_.locked_until_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminLockAccount, _impl_.target_account_id_)>(
          reinterpret_cast<char*>(&_impl_.target_account_id_),
          reinterpret_cast<char*>(&other->_impl_.target_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminLockAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[49]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminLockAccountResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminLockAccountResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCShowcaseAdminLockAccountResponse::CMsgClientToGCShowcaseAdminLockAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminLockAccountResponse)
}
CMsgClientToGCShowcaseAdminLockAccountResponse::CMsgClientToGCShowcaseAdminLockAccountResponse(const CMsgClientToGCShowcaseAdminLockAccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminLockAccountResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminLockAccountResponse)
}

inline void CMsgClientToGCShowcaseAdminLockAccountResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseAdminLockAccountResponse::~CMsgClientToGCShowcaseAdminLockAccountResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminLockAccountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminLockAccountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseAdminLockAccountResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminLockAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminLockAccountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminLockAccountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseAdminLockAccountResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminLockAccountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminLockAccountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseAdminLockAccountResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminLockAccountResponse)
  return target;
}

size_t CMsgClientToGCShowcaseAdminLockAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminLockAccountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCShowcaseAdminLockAccountResponse.EResponse response = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminLockAccountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminLockAccountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminLockAccountResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminLockAccountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminLockAccountResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminLockAccountResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminLockAccountResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminLockAccountResponse::CopyFrom(const CMsgClientToGCShowcaseAdminLockAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminLockAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminLockAccountResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminLockAccountResponse::InternalSwap(CMsgClientToGCShowcaseAdminLockAccountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminLockAccountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[50]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminConvict::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminConvict>()._impl_._has_bits_);
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCShowcaseAdminConvict::CMsgClientToGCShowcaseAdminConvict(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminConvict)
}
CMsgClientToGCShowcaseAdminConvict::CMsgClientToGCShowcaseAdminConvict(const CMsgClientToGCShowcaseAdminConvict& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminConvict* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_account_id_){}
    , decltype(_impl_.showcase_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_account_id_, &from._impl_.target_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.showcase_type_) -
    reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.showcase_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminConvict)
}

inline void CMsgClientToGCShowcaseAdminConvict::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_account_id_){0u}
    , decltype(_impl_.showcase_type_){0}
  };
}

CMsgClientToGCShowcaseAdminConvict::~CMsgClientToGCShowcaseAdminConvict() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminConvict)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminConvict::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseAdminConvict::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminConvict::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminConvict)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.target_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.showcase_type_) -
        reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.showcase_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminConvict::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 target_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_target_account_id(&has_bits);
          _impl_.target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminConvict::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminConvict)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 target_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_account_id(), target);
  }

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_showcase_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminConvict)
  return target;
}

size_t CMsgClientToGCShowcaseAdminConvict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminConvict)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 target_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_account_id());
    }

    // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminConvict::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminConvict::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminConvict::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminConvict::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminConvict*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminConvict&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminConvict)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.target_account_id_ = from._impl_.target_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminConvict::CopyFrom(const CMsgClientToGCShowcaseAdminConvict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminConvict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminConvict::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminConvict::InternalSwap(CMsgClientToGCShowcaseAdminConvict* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminConvict, _impl_.showcase_type_)
      + sizeof(CMsgClientToGCShowcaseAdminConvict::_impl_.showcase_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminConvict, _impl_.target_account_id_)>(
          reinterpret_cast<char*>(&_impl_.target_account_id_),
          reinterpret_cast<char*>(&other->_impl_.target_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminConvict::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[51]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminConvictResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminConvictResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCShowcaseAdminConvictResponse::CMsgClientToGCShowcaseAdminConvictResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminConvictResponse)
}
CMsgClientToGCShowcaseAdminConvictResponse::CMsgClientToGCShowcaseAdminConvictResponse(const CMsgClientToGCShowcaseAdminConvictResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminConvictResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminConvictResponse)
}

inline void CMsgClientToGCShowcaseAdminConvictResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseAdminConvictResponse::~CMsgClientToGCShowcaseAdminConvictResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminConvictResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminConvictResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseAdminConvictResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminConvictResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminConvictResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminConvictResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseAdminConvictResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseAdminConvictResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseAdminConvictResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminConvictResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminConvictResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseAdminConvictResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminConvictResponse)
  return target;
}

size_t CMsgClientToGCShowcaseAdminConvictResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminConvictResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCShowcaseAdminConvictResponse.EResponse response = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminConvictResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminConvictResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminConvictResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminConvictResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminConvictResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminConvictResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminConvictResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminConvictResponse::CopyFrom(const CMsgClientToGCShowcaseAdminConvictResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminConvictResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminConvictResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminConvictResponse::InternalSwap(CMsgClientToGCShowcaseAdminConvictResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminConvictResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[52]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminExonerate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminExonerate>()._impl_._has_bits_);
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCShowcaseAdminExonerate::CMsgClientToGCShowcaseAdminExonerate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminExonerate)
}
CMsgClientToGCShowcaseAdminExonerate::CMsgClientToGCShowcaseAdminExonerate(const CMsgClientToGCShowcaseAdminExonerate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminExonerate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_account_id_){}
    , decltype(_impl_.showcase_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_account_id_, &from._impl_.target_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.showcase_type_) -
    reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.showcase_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminExonerate)
}

inline void CMsgClientToGCShowcaseAdminExonerate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_account_id_){0u}
    , decltype(_impl_.showcase_type_){0}
  };
}

CMsgClientToGCShowcaseAdminExonerate::~CMsgClientToGCShowcaseAdminExonerate() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminExonerate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminExonerate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseAdminExonerate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminExonerate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminExonerate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.target_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.showcase_type_) -
        reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.showcase_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminExonerate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 target_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_target_account_id(&has_bits);
          _impl_.target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminExonerate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminExonerate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 target_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_account_id(), target);
  }

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_showcase_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminExonerate)
  return target;
}

size_t CMsgClientToGCShowcaseAdminExonerate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminExonerate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 target_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_account_id());
    }

    // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminExonerate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminExonerate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminExonerate::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminExonerate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminExonerate*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminExonerate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminExonerate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.target_account_id_ = from._impl_.target_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminExonerate::CopyFrom(const CMsgClientToGCShowcaseAdminExonerate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminExonerate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminExonerate::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminExonerate::InternalSwap(CMsgClientToGCShowcaseAdminExonerate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminExonerate, _impl_.showcase_type_)
      + sizeof(CMsgClientToGCShowcaseAdminExonerate::_impl_.showcase_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseAdminExonerate, _impl_.target_account_id_)>(
          reinterpret_cast<char*>(&_impl_.target_account_id_),
          reinterpret_cast<char*>(&other->_impl_.target_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminExonerate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[53]);
}

// ===================================================================

class CMsgClientToGCShowcaseAdminExonerateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseAdminExonerateResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCShowcaseAdminExonerateResponse::CMsgClientToGCShowcaseAdminExonerateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseAdminExonerateResponse)
}
CMsgClientToGCShowcaseAdminExonerateResponse::CMsgClientToGCShowcaseAdminExonerateResponse(const CMsgClientToGCShowcaseAdminExonerateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseAdminExonerateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseAdminExonerateResponse)
}

inline void CMsgClientToGCShowcaseAdminExonerateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseAdminExonerateResponse::~CMsgClientToGCShowcaseAdminExonerateResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseAdminExonerateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseAdminExonerateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseAdminExonerateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseAdminExonerateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseAdminExonerateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseAdminExonerateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseAdminExonerateResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseAdminExonerateResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseAdminExonerateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseAdminExonerateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseAdminExonerateResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseAdminExonerateResponse)
  return target;
}

size_t CMsgClientToGCShowcaseAdminExonerateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseAdminExonerateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCShowcaseAdminExonerateResponse.EResponse response = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseAdminExonerateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseAdminExonerateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseAdminExonerateResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseAdminExonerateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseAdminExonerateResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseAdminExonerateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseAdminExonerateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseAdminExonerateResponse::CopyFrom(const CMsgClientToGCShowcaseAdminExonerateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseAdminExonerateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseAdminExonerateResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseAdminExonerateResponse::InternalSwap(CMsgClientToGCShowcaseAdminExonerateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseAdminExonerateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[54]);
}

// ===================================================================

class CMsgShowcaseModerationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseModerationInfo>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_showcase_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgShowcaseModerationInfo::CMsgShowcaseModerationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseModerationInfo)
}
CMsgShowcaseModerationInfo::CMsgShowcaseModerationInfo(const CMsgShowcaseModerationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseModerationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.showcase_type_){}
    , decltype(_impl_.showcase_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.showcase_timestamp_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.showcase_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseModerationInfo)
}

inline void CMsgShowcaseModerationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.showcase_type_){0}
    , decltype(_impl_.showcase_timestamp_){0u}
  };
}

CMsgShowcaseModerationInfo::~CMsgShowcaseModerationInfo() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseModerationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseModerationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseModerationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseModerationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseModerationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.showcase_timestamp_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.showcase_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseModerationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 showcase_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_showcase_timestamp(&has_bits);
          _impl_.showcase_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseModerationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseModerationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_showcase_type(), target);
  }

  // optional uint32 showcase_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_showcase_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseModerationInfo)
  return target;
}

size_t CMsgShowcaseModerationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseModerationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

    // optional uint32 showcase_timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_showcase_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseModerationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseModerationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseModerationInfo::GetClassData() const { return &_class_data_; }


void CMsgShowcaseModerationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseModerationInfo*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseModerationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseModerationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.showcase_timestamp_ = from._impl_.showcase_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseModerationInfo::CopyFrom(const CMsgShowcaseModerationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseModerationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseModerationInfo::IsInitialized() const {
  return true;
}

void CMsgShowcaseModerationInfo::InternalSwap(CMsgShowcaseModerationInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseModerationInfo, _impl_.showcase_timestamp_)
      + sizeof(CMsgShowcaseModerationInfo::_impl_.showcase_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseModerationInfo, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseModerationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[55]);
}

// ===================================================================

class CMsgClientToGCShowcaseModerationGetQueue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseModerationGetQueue>()._impl_._has_bits_);
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCShowcaseModerationGetQueue::CMsgClientToGCShowcaseModerationGetQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseModerationGetQueue)
}
CMsgClientToGCShowcaseModerationGetQueue::CMsgClientToGCShowcaseModerationGetQueue(const CMsgClientToGCShowcaseModerationGetQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseModerationGetQueue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_timestamp_){}
    , decltype(_impl_.result_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_timestamp_, &from._impl_.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_count_) -
    reinterpret_cast<char*>(&_impl_.start_timestamp_)) + sizeof(_impl_.result_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseModerationGetQueue)
}

inline void CMsgClientToGCShowcaseModerationGetQueue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_timestamp_){0u}
    , decltype(_impl_.result_count_){0u}
  };
}

CMsgClientToGCShowcaseModerationGetQueue::~CMsgClientToGCShowcaseModerationGetQueue() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseModerationGetQueue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseModerationGetQueue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseModerationGetQueue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseModerationGetQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseModerationGetQueue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_count_) -
        reinterpret_cast<char*>(&_impl_.start_timestamp_)) + sizeof(_impl_.result_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseModerationGetQueue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 start_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start_timestamp(&has_bits);
          _impl_.start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 result_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_result_count(&has_bits);
          _impl_.result_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseModerationGetQueue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseModerationGetQueue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 start_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_timestamp(), target);
  }

  // optional uint32 result_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseModerationGetQueue)
  return target;
}

size_t CMsgClientToGCShowcaseModerationGetQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseModerationGetQueue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 start_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_timestamp());
    }

    // optional uint32 result_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseModerationGetQueue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseModerationGetQueue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseModerationGetQueue::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseModerationGetQueue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseModerationGetQueue*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseModerationGetQueue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseModerationGetQueue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.start_timestamp_ = from._impl_.start_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_count_ = from._impl_.result_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseModerationGetQueue::CopyFrom(const CMsgClientToGCShowcaseModerationGetQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseModerationGetQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseModerationGetQueue::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseModerationGetQueue::InternalSwap(CMsgClientToGCShowcaseModerationGetQueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseModerationGetQueue, _impl_.result_count_)
      + sizeof(CMsgClientToGCShowcaseModerationGetQueue::_impl_.result_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseModerationGetQueue, _impl_.start_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.start_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.start_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseModerationGetQueue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[56]);
}

// ===================================================================

class CMsgClientToGCShowcaseModerationGetQueueResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseModerationGetQueueResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCShowcaseModerationGetQueueResponse::CMsgClientToGCShowcaseModerationGetQueueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseModerationGetQueueResponse)
}
CMsgClientToGCShowcaseModerationGetQueueResponse::CMsgClientToGCShowcaseModerationGetQueueResponse(const CMsgClientToGCShowcaseModerationGetQueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseModerationGetQueueResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcases_){from._impl_.showcases_}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseModerationGetQueueResponse)
}

inline void CMsgClientToGCShowcaseModerationGetQueueResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcases_){arena}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseModerationGetQueueResponse::~CMsgClientToGCShowcaseModerationGetQueueResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseModerationGetQueueResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseModerationGetQueueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.showcases_.~RepeatedPtrField();
}

void CMsgClientToGCShowcaseModerationGetQueueResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseModerationGetQueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseModerationGetQueueResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.showcases_.Clear();
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseModerationGetQueueResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseModerationGetQueueResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgShowcaseModerationInfo showcases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_showcases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseModerationGetQueueResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseModerationGetQueueResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseModerationGetQueueResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // repeated .CMsgShowcaseModerationInfo showcases = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_showcases_size()); i < n; i++) {
    const auto& repfield = this->_internal_showcases(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseModerationGetQueueResponse)
  return target;
}

size_t CMsgClientToGCShowcaseModerationGetQueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseModerationGetQueueResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgShowcaseModerationInfo showcases = 2;
  total_size += 1UL * this->_internal_showcases_size();
  for (const auto& msg : this->_impl_.showcases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgClientToGCShowcaseModerationGetQueueResponse.EResponse response = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseModerationGetQueueResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseModerationGetQueueResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseModerationGetQueueResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseModerationGetQueueResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseModerationGetQueueResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseModerationGetQueueResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseModerationGetQueueResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.showcases_.MergeFrom(from._impl_.showcases_);
  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseModerationGetQueueResponse::CopyFrom(const CMsgClientToGCShowcaseModerationGetQueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseModerationGetQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseModerationGetQueueResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseModerationGetQueueResponse::InternalSwap(CMsgClientToGCShowcaseModerationGetQueueResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.showcases_.InternalSwap(&other->_impl_.showcases_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseModerationGetQueueResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[57]);
}

// ===================================================================

class CMsgClientToGCShowcaseModerationApplyModeration::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseModerationApplyModeration>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_showcase_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_approve(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientToGCShowcaseModerationApplyModeration::CMsgClientToGCShowcaseModerationApplyModeration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseModerationApplyModeration)
}
CMsgClientToGCShowcaseModerationApplyModeration::CMsgClientToGCShowcaseModerationApplyModeration(const CMsgClientToGCShowcaseModerationApplyModeration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseModerationApplyModeration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.showcase_type_){}
    , decltype(_impl_.showcase_timestamp_){}
    , decltype(_impl_.approve_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.approve_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.approve_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseModerationApplyModeration)
}

inline void CMsgClientToGCShowcaseModerationApplyModeration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.showcase_type_){0}
    , decltype(_impl_.showcase_timestamp_){0u}
    , decltype(_impl_.approve_){false}
  };
}

CMsgClientToGCShowcaseModerationApplyModeration::~CMsgClientToGCShowcaseModerationApplyModeration() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseModerationApplyModeration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseModerationApplyModeration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseModerationApplyModeration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseModerationApplyModeration::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseModerationApplyModeration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.approve_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.approve_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseModerationApplyModeration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 showcase_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_showcase_timestamp(&has_bits);
          _impl_.showcase_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool approve = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_approve(&has_bits);
          _impl_.approve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseModerationApplyModeration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseModerationApplyModeration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_showcase_type(), target);
  }

  // optional uint32 showcase_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_showcase_timestamp(), target);
  }

  // optional bool approve = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_approve(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseModerationApplyModeration)
  return target;
}

size_t CMsgClientToGCShowcaseModerationApplyModeration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseModerationApplyModeration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

    // optional uint32 showcase_timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_showcase_timestamp());
    }

    // optional bool approve = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseModerationApplyModeration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseModerationApplyModeration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseModerationApplyModeration::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseModerationApplyModeration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseModerationApplyModeration*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseModerationApplyModeration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseModerationApplyModeration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.showcase_timestamp_ = from._impl_.showcase_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.approve_ = from._impl_.approve_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseModerationApplyModeration::CopyFrom(const CMsgClientToGCShowcaseModerationApplyModeration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseModerationApplyModeration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseModerationApplyModeration::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseModerationApplyModeration::InternalSwap(CMsgClientToGCShowcaseModerationApplyModeration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseModerationApplyModeration, _impl_.approve_)
      + sizeof(CMsgClientToGCShowcaseModerationApplyModeration::_impl_.approve_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseModerationApplyModeration, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseModerationApplyModeration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[58]);
}

// ===================================================================

class CMsgClientToGCShowcaseModerationApplyModerationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseModerationApplyModerationResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCShowcaseModerationApplyModerationResponse::CMsgClientToGCShowcaseModerationApplyModerationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseModerationApplyModerationResponse)
}
CMsgClientToGCShowcaseModerationApplyModerationResponse::CMsgClientToGCShowcaseModerationApplyModerationResponse(const CMsgClientToGCShowcaseModerationApplyModerationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseModerationApplyModerationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseModerationApplyModerationResponse)
}

inline void CMsgClientToGCShowcaseModerationApplyModerationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseModerationApplyModerationResponse::~CMsgClientToGCShowcaseModerationApplyModerationResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseModerationApplyModerationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseModerationApplyModerationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseModerationApplyModerationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseModerationApplyModerationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseModerationApplyModerationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseModerationApplyModerationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseModerationApplyModerationResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseModerationApplyModerationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseModerationApplyModerationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseModerationApplyModerationResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseModerationApplyModerationResponse)
  return target;
}

size_t CMsgClientToGCShowcaseModerationApplyModerationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseModerationApplyModerationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCShowcaseModerationApplyModerationResponse.EResponse response = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseModerationApplyModerationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseModerationApplyModerationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseModerationApplyModerationResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseModerationApplyModerationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseModerationApplyModerationResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseModerationApplyModerationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseModerationApplyModerationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseModerationApplyModerationResponse::CopyFrom(const CMsgClientToGCShowcaseModerationApplyModerationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseModerationApplyModerationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseModerationApplyModerationResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseModerationApplyModerationResponse::InternalSwap(CMsgClientToGCShowcaseModerationApplyModerationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseModerationApplyModerationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[59]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgShowcaseEconItemReference*
Arena::CreateMaybeMessage< ::CMsgShowcaseEconItemReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseEconItemReference >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHeroPlusInfo*
Arena::CreateMaybeMessage< ::CMsgHeroPlusInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHeroPlusInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Trophy_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Trophy_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Trophy_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Trophy*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Trophy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Trophy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_EconItem_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_EconItem_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_EconItem_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_EconItem*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_EconItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Hero_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Hero_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Hero_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Hero*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Hero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Hero >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_HeroIcon_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_HeroIcon_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_HeroIcon_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_HeroIcon*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_HeroIcon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_HeroIcon >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_PlayerMatch_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_PlayerMatch_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_PlayerMatch_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_PlayerMatch*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_PlayerMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_PlayerMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_ChatWheel_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_ChatWheel_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_ChatWheel_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_ChatWheel*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_ChatWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_ChatWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Emoticon_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Emoticon_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Emoticon_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Emoticon*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Emoticon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Emoticon >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_SpiderGraph_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_SpiderGraph_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_SpiderGraph_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_SpiderGraph*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_SpiderGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_SpiderGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_UserFeed_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_UserFeed_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_UserFeed_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_UserFeed*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_UserFeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_UserFeed >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Stat_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Stat_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Stat_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Stat*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseBackground_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseBackground_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseBackground_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseBackground*
Arena::CreateMaybeMessage< ::CMsgShowcaseBackground >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseBackground >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItemData*
Arena::CreateMaybeMessage< ::CMsgShowcaseItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItemPosition*
Arena::CreateMaybeMessage< ::CMsgShowcaseItemPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItemPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcase*
Arena::CreateMaybeMessage< ::CMsgShowcase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcase >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseGetUserData*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseGetUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseGetUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseGetUserDataResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseGetUserDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseGetUserDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseSetUserData*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseSetUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseSetUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseSetUserDataResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseSetUserDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseSetUserDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseSubmitReport*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseSubmitReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseSubmitReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseSubmitReportResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseSubmitReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseSubmitReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseReportsRollupInfo*
Arena::CreateMaybeMessage< ::CMsgShowcaseReportsRollupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseReportsRollupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseReportsRollupList*
Arena::CreateMaybeMessage< ::CMsgShowcaseReportsRollupList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseReportsRollupList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseReportsRollupEntry*
Arena::CreateMaybeMessage< ::CMsgShowcaseReportsRollupEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseReportsRollupEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseReportsRollup*
Arena::CreateMaybeMessage< ::CMsgShowcaseReportsRollup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseReportsRollup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminGetReportsRollupList*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminGetReportsRollupList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminGetReportsRollupList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminGetReportsRollupListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminGetReportsRollup*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminGetReportsRollup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminGetReportsRollup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminGetReportsRollupResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminGetReportsRollupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminGetReportsRollupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseAuditEntry*
Arena::CreateMaybeMessage< ::CMsgShowcaseAuditEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseAuditEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseReport*
Arena::CreateMaybeMessage< ::CMsgShowcaseReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseAdminUserDetails*
Arena::CreateMaybeMessage< ::CMsgShowcaseAdminUserDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseAdminUserDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminGetUserDetails*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminGetUserDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminGetUserDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminGetUserDetailsResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminGetUserDetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminGetUserDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminReset*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminReset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminReset >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminResetResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminResetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminResetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminLockAccount*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminLockAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminLockAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminLockAccountResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminLockAccountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminLockAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminConvict*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminConvict >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminConvict >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminConvictResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminConvictResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminConvictResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminExonerate*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminExonerate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminExonerate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseAdminExonerateResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseAdminExonerateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseAdminExonerateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseModerationInfo*
Arena::CreateMaybeMessage< ::CMsgShowcaseModerationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseModerationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseModerationGetQueue*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseModerationGetQueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseModerationGetQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseModerationGetQueueResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseModerationGetQueueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseModerationGetQueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseModerationApplyModeration*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseModerationApplyModeration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseModerationApplyModeration >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseModerationApplyModerationResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseModerationApplyModerationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseModerationApplyModerationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
