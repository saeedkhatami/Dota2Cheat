// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_fighting_game.proto

#include "dota_gcmessages_common_fighting_game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameChallengeFriend::CMsgClientToGCFightingGameChallengeFriend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.friend_account_id_)*/0u} {}
struct CMsgClientToGCFightingGameChallengeFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameChallengeFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFightingGameChallengeFriendDefaultTypeInternal() {}
  union {
    CMsgClientToGCFightingGameChallengeFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFightingGameChallengeFriendDefaultTypeInternal _CMsgClientToGCFightingGameChallengeFriend_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameChallengeFriendResponse::CMsgClientToGCFightingGameChallengeFriendResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCFightingGameChallengeFriendResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameChallengeFriendResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFightingGameChallengeFriendResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCFightingGameChallengeFriendResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFightingGameChallengeFriendResponseDefaultTypeInternal _CMsgClientToGCFightingGameChallengeFriendResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameCancelChallengeFriend::CMsgClientToGCFightingGameCancelChallengeFriend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.friend_account_id_)*/0u} {}
struct CMsgClientToGCFightingGameCancelChallengeFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameCancelChallengeFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFightingGameCancelChallengeFriendDefaultTypeInternal() {}
  union {
    CMsgClientToGCFightingGameCancelChallengeFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFightingGameCancelChallengeFriendDefaultTypeInternal _CMsgClientToGCFightingGameCancelChallengeFriend_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameAnswerChallenge::CMsgClientToGCFightingGameAnswerChallenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.challenger_account_id_)*/0u
  , /*decltype(_impl_.accept_)*/false} {}
struct CMsgClientToGCFightingGameAnswerChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameAnswerChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFightingGameAnswerChallengeDefaultTypeInternal() {}
  union {
    CMsgClientToGCFightingGameAnswerChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFightingGameAnswerChallengeDefaultTypeInternal _CMsgClientToGCFightingGameAnswerChallenge_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameAnswerChallengeResponse::CMsgClientToGCFightingGameAnswerChallengeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCFightingGameAnswerChallengeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameAnswerChallengeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFightingGameAnswerChallengeResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCFightingGameAnswerChallengeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFightingGameAnswerChallengeResponseDefaultTypeInternal _CMsgClientToGCFightingGameAnswerChallengeResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientFightingGameChallenge::CMsgGCToClientFightingGameChallenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.challenger_account_id_)*/0u} {}
struct CMsgGCToClientFightingGameChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientFightingGameChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientFightingGameChallengeDefaultTypeInternal() {}
  union {
    CMsgGCToClientFightingGameChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientFightingGameChallengeDefaultTypeInternal _CMsgGCToClientFightingGameChallenge_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientFightingGameChallengeCanceled::CMsgGCToClientFightingGameChallengeCanceled(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.challenger_account_id_)*/0u
  , /*decltype(_impl_.responder_account_id_)*/0u} {}
struct CMsgGCToClientFightingGameChallengeCanceledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientFightingGameChallengeCanceledDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientFightingGameChallengeCanceledDefaultTypeInternal() {}
  union {
    CMsgGCToClientFightingGameChallengeCanceled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientFightingGameChallengeCanceledDefaultTypeInternal _CMsgGCToClientFightingGameChallengeCanceled_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientFightingGameStartMatch::CMsgGCToClientFightingGameStartMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.challenger_account_id_)*/0u
  , /*decltype(_impl_.responder_account_id_)*/0u} {}
struct CMsgGCToClientFightingGameStartMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientFightingGameStartMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientFightingGameStartMatchDefaultTypeInternal() {}
  union {
    CMsgGCToClientFightingGameStartMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientFightingGameStartMatchDefaultTypeInternal _CMsgGCToClientFightingGameStartMatch_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameChallengeFriend, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameChallengeFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameChallengeFriend, _impl_.friend_account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameChallengeFriendResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameChallengeFriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameChallengeFriendResponse, _impl_.response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameCancelChallengeFriend, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameCancelChallengeFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameCancelChallengeFriend, _impl_.friend_account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameAnswerChallenge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameAnswerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameAnswerChallenge, _impl_.challenger_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameAnswerChallenge, _impl_.accept_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameAnswerChallengeResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameAnswerChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFightingGameAnswerChallengeResponse, _impl_.response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFightingGameChallenge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFightingGameChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFightingGameChallenge, _impl_.challenger_account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFightingGameChallengeCanceled, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFightingGameChallengeCanceled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFightingGameChallengeCanceled, _impl_.challenger_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFightingGameChallengeCanceled, _impl_.responder_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFightingGameStartMatch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFightingGameStartMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFightingGameStartMatch, _impl_.challenger_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFightingGameStartMatch, _impl_.responder_account_id_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::CMsgClientToGCFightingGameChallengeFriend)},
  { 8, 15, -1, sizeof(::CMsgClientToGCFightingGameChallengeFriendResponse)},
  { 16, 23, -1, sizeof(::CMsgClientToGCFightingGameCancelChallengeFriend)},
  { 24, 32, -1, sizeof(::CMsgClientToGCFightingGameAnswerChallenge)},
  { 34, 41, -1, sizeof(::CMsgClientToGCFightingGameAnswerChallengeResponse)},
  { 42, 49, -1, sizeof(::CMsgGCToClientFightingGameChallenge)},
  { 50, 58, -1, sizeof(::CMsgGCToClientFightingGameChallengeCanceled)},
  { 60, 68, -1, sizeof(::CMsgGCToClientFightingGameStartMatch)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgClientToGCFightingGameChallengeFriend_default_instance_._instance,
  &::_CMsgClientToGCFightingGameChallengeFriendResponse_default_instance_._instance,
  &::_CMsgClientToGCFightingGameCancelChallengeFriend_default_instance_._instance,
  &::_CMsgClientToGCFightingGameAnswerChallenge_default_instance_._instance,
  &::_CMsgClientToGCFightingGameAnswerChallengeResponse_default_instance_._instance,
  &::_CMsgGCToClientFightingGameChallenge_default_instance_._instance,
  &::_CMsgGCToClientFightingGameChallengeCanceled_default_instance_._instance,
  &::_CMsgGCToClientFightingGameStartMatch_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*dota_gcmessages_common_fighting_game.p"
  "roto\032\023steammessages.proto\032\027dota_shared_e"
  "nums.proto\032\034dota_gcmessages_common.proto"
  "\032\026gcsdk_gcmessages.proto\"F\n)CMsgClientTo"
  "GCFightingGameChallengeFriend\022\031\n\021friend_"
  "account_id\030\001 \001(\r\"\272\002\n1CMsgClientToGCFight"
  "ingGameChallengeFriendResponse\022`\n\010respon"
  "se\030\001 \001(\0162<.CMsgClientToGCFightingGameCha"
  "llengeFriendResponse.EResponse:\020k_eInter"
  "nalError\"\242\001\n\tEResponse\022\024\n\020k_eInternalErr"
  "or\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013"
  "k_eDisabled\020\003\022\016\n\nk_eTimeout\020\004\022\027\n\023k_eInva"
  "lidAccountID\020\005\022%\n!k_eStillWaitingOnAnoth"
  "erChallenge\020\006\"L\n/CMsgClientToGCFightingG"
  "ameCancelChallengeFriend\022\031\n\021friend_accou"
  "nt_id\030\001 \001(\r\"Z\n)CMsgClientToGCFightingGam"
  "eAnswerChallenge\022\035\n\025challenger_account_i"
  "d\030\001 \001(\r\022\016\n\006accept\030\002 \001(\010\"\222\002\n1CMsgClientTo"
  "GCFightingGameAnswerChallengeResponse\022`\n"
  "\010response\030\001 \001(\0162<.CMsgClientToGCFighting"
  "GameAnswerChallengeResponse.EResponse:\020k"
  "_eInternalError\"{\n\tEResponse\022\024\n\020k_eInter"
  "nalError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy"
  "\020\002\022\017\n\013k_eDisabled\020\003\022\016\n\nk_eTimeout\020\004\022\027\n\023k"
  "_eInvalidChallenge\020\005\"D\n#CMsgGCToClientFi"
  "ghtingGameChallenge\022\035\n\025challenger_accoun"
  "t_id\030\001 \001(\r\"j\n+CMsgGCToClientFightingGame"
  "ChallengeCanceled\022\035\n\025challenger_account_"
  "id\030\001 \001(\r\022\034\n\024responder_account_id\030\002 \001(\r\"c"
  "\n$CMsgGCToClientFightingGameStartMatch\022\035"
  "\n\025challenger_account_id\030\001 \001(\r\022\034\n\024respond"
  "er_account_id\030\002 \001(\r"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_deps[4] = {
  &::descriptor_table_dota_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto = {
    false, false, 1259, descriptor_table_protodef_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto,
    "dota_gcmessages_common_fighting_game.proto",
    &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_once, descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_deps, 4, 8,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto(&descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[0];
}
bool CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse::k_eInternalError;
constexpr CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse::k_eSuccess;
constexpr CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse::k_eTooBusy;
constexpr CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse::k_eDisabled;
constexpr CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse::k_eTimeout;
constexpr CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse::k_eInvalidAccountID;
constexpr CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse::k_eStillWaitingOnAnotherChallenge;
constexpr CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse::EResponse_MIN;
constexpr CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse::EResponse_MAX;
constexpr int CMsgClientToGCFightingGameChallengeFriendResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[1];
}
bool CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse CMsgClientToGCFightingGameAnswerChallengeResponse::k_eInternalError;
constexpr CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse CMsgClientToGCFightingGameAnswerChallengeResponse::k_eSuccess;
constexpr CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse CMsgClientToGCFightingGameAnswerChallengeResponse::k_eTooBusy;
constexpr CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse CMsgClientToGCFightingGameAnswerChallengeResponse::k_eDisabled;
constexpr CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse CMsgClientToGCFightingGameAnswerChallengeResponse::k_eTimeout;
constexpr CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse CMsgClientToGCFightingGameAnswerChallengeResponse::k_eInvalidChallenge;
constexpr CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse CMsgClientToGCFightingGameAnswerChallengeResponse::EResponse_MIN;
constexpr CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse CMsgClientToGCFightingGameAnswerChallengeResponse::EResponse_MAX;
constexpr int CMsgClientToGCFightingGameAnswerChallengeResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CMsgClientToGCFightingGameChallengeFriend::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFightingGameChallengeFriend>()._impl_._has_bits_);
  static void set_has_friend_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCFightingGameChallengeFriend::CMsgClientToGCFightingGameChallengeFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFightingGameChallengeFriend)
}
CMsgClientToGCFightingGameChallengeFriend::CMsgClientToGCFightingGameChallengeFriend(const CMsgClientToGCFightingGameChallengeFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFightingGameChallengeFriend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.friend_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.friend_account_id_ = from._impl_.friend_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFightingGameChallengeFriend)
}

inline void CMsgClientToGCFightingGameChallengeFriend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.friend_account_id_){0u}
  };
}

CMsgClientToGCFightingGameChallengeFriend::~CMsgClientToGCFightingGameChallengeFriend() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFightingGameChallengeFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFightingGameChallengeFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCFightingGameChallengeFriend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFightingGameChallengeFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFightingGameChallengeFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friend_account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFightingGameChallengeFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 friend_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_friend_account_id(&has_bits);
          _impl_.friend_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFightingGameChallengeFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFightingGameChallengeFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 friend_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_friend_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFightingGameChallengeFriend)
  return target;
}

size_t CMsgClientToGCFightingGameChallengeFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFightingGameChallengeFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 friend_account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_friend_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFightingGameChallengeFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFightingGameChallengeFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFightingGameChallengeFriend::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFightingGameChallengeFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFightingGameChallengeFriend*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFightingGameChallengeFriend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFightingGameChallengeFriend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friend_account_id()) {
    _this->_internal_set_friend_account_id(from._internal_friend_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFightingGameChallengeFriend::CopyFrom(const CMsgClientToGCFightingGameChallengeFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFightingGameChallengeFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFightingGameChallengeFriend::IsInitialized() const {
  return true;
}

void CMsgClientToGCFightingGameChallengeFriend::InternalSwap(CMsgClientToGCFightingGameChallengeFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.friend_account_id_, other->_impl_.friend_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFightingGameChallengeFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[0]);
}

// ===================================================================

class CMsgClientToGCFightingGameChallengeFriendResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFightingGameChallengeFriendResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCFightingGameChallengeFriendResponse::CMsgClientToGCFightingGameChallengeFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFightingGameChallengeFriendResponse)
}
CMsgClientToGCFightingGameChallengeFriendResponse::CMsgClientToGCFightingGameChallengeFriendResponse(const CMsgClientToGCFightingGameChallengeFriendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFightingGameChallengeFriendResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFightingGameChallengeFriendResponse)
}

inline void CMsgClientToGCFightingGameChallengeFriendResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCFightingGameChallengeFriendResponse::~CMsgClientToGCFightingGameChallengeFriendResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFightingGameChallengeFriendResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFightingGameChallengeFriendResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCFightingGameChallengeFriendResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFightingGameChallengeFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFightingGameChallengeFriendResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFightingGameChallengeFriendResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCFightingGameChallengeFriendResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFightingGameChallengeFriendResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFightingGameChallengeFriendResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCFightingGameChallengeFriendResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFightingGameChallengeFriendResponse)
  return target;
}

size_t CMsgClientToGCFightingGameChallengeFriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFightingGameChallengeFriendResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCFightingGameChallengeFriendResponse.EResponse response = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFightingGameChallengeFriendResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFightingGameChallengeFriendResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFightingGameChallengeFriendResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFightingGameChallengeFriendResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFightingGameChallengeFriendResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFightingGameChallengeFriendResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFightingGameChallengeFriendResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFightingGameChallengeFriendResponse::CopyFrom(const CMsgClientToGCFightingGameChallengeFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFightingGameChallengeFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFightingGameChallengeFriendResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCFightingGameChallengeFriendResponse::InternalSwap(CMsgClientToGCFightingGameChallengeFriendResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFightingGameChallengeFriendResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[1]);
}

// ===================================================================

class CMsgClientToGCFightingGameCancelChallengeFriend::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFightingGameCancelChallengeFriend>()._impl_._has_bits_);
  static void set_has_friend_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCFightingGameCancelChallengeFriend::CMsgClientToGCFightingGameCancelChallengeFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFightingGameCancelChallengeFriend)
}
CMsgClientToGCFightingGameCancelChallengeFriend::CMsgClientToGCFightingGameCancelChallengeFriend(const CMsgClientToGCFightingGameCancelChallengeFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFightingGameCancelChallengeFriend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.friend_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.friend_account_id_ = from._impl_.friend_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFightingGameCancelChallengeFriend)
}

inline void CMsgClientToGCFightingGameCancelChallengeFriend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.friend_account_id_){0u}
  };
}

CMsgClientToGCFightingGameCancelChallengeFriend::~CMsgClientToGCFightingGameCancelChallengeFriend() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFightingGameCancelChallengeFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFightingGameCancelChallengeFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCFightingGameCancelChallengeFriend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFightingGameCancelChallengeFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFightingGameCancelChallengeFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friend_account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFightingGameCancelChallengeFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 friend_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_friend_account_id(&has_bits);
          _impl_.friend_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFightingGameCancelChallengeFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFightingGameCancelChallengeFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 friend_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_friend_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFightingGameCancelChallengeFriend)
  return target;
}

size_t CMsgClientToGCFightingGameCancelChallengeFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFightingGameCancelChallengeFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 friend_account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_friend_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFightingGameCancelChallengeFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFightingGameCancelChallengeFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFightingGameCancelChallengeFriend::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFightingGameCancelChallengeFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFightingGameCancelChallengeFriend*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFightingGameCancelChallengeFriend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFightingGameCancelChallengeFriend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friend_account_id()) {
    _this->_internal_set_friend_account_id(from._internal_friend_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFightingGameCancelChallengeFriend::CopyFrom(const CMsgClientToGCFightingGameCancelChallengeFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFightingGameCancelChallengeFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFightingGameCancelChallengeFriend::IsInitialized() const {
  return true;
}

void CMsgClientToGCFightingGameCancelChallengeFriend::InternalSwap(CMsgClientToGCFightingGameCancelChallengeFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.friend_account_id_, other->_impl_.friend_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFightingGameCancelChallengeFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[2]);
}

// ===================================================================

class CMsgClientToGCFightingGameAnswerChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFightingGameAnswerChallenge>()._impl_._has_bits_);
  static void set_has_challenger_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCFightingGameAnswerChallenge::CMsgClientToGCFightingGameAnswerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFightingGameAnswerChallenge)
}
CMsgClientToGCFightingGameAnswerChallenge::CMsgClientToGCFightingGameAnswerChallenge(const CMsgClientToGCFightingGameAnswerChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFightingGameAnswerChallenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenger_account_id_){}
    , decltype(_impl_.accept_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.challenger_account_id_, &from._impl_.challenger_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accept_) -
    reinterpret_cast<char*>(&_impl_.challenger_account_id_)) + sizeof(_impl_.accept_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFightingGameAnswerChallenge)
}

inline void CMsgClientToGCFightingGameAnswerChallenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenger_account_id_){0u}
    , decltype(_impl_.accept_){false}
  };
}

CMsgClientToGCFightingGameAnswerChallenge::~CMsgClientToGCFightingGameAnswerChallenge() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFightingGameAnswerChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFightingGameAnswerChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCFightingGameAnswerChallenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFightingGameAnswerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFightingGameAnswerChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.challenger_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accept_) -
        reinterpret_cast<char*>(&_impl_.challenger_account_id_)) + sizeof(_impl_.accept_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFightingGameAnswerChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 challenger_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_challenger_account_id(&has_bits);
          _impl_.challenger_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accept(&has_bits);
          _impl_.accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFightingGameAnswerChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFightingGameAnswerChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 challenger_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_challenger_account_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFightingGameAnswerChallenge)
  return target;
}

size_t CMsgClientToGCFightingGameAnswerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFightingGameAnswerChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 challenger_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenger_account_id());
    }

    // optional bool accept = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFightingGameAnswerChallenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFightingGameAnswerChallenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFightingGameAnswerChallenge::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFightingGameAnswerChallenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFightingGameAnswerChallenge*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFightingGameAnswerChallenge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFightingGameAnswerChallenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.challenger_account_id_ = from._impl_.challenger_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accept_ = from._impl_.accept_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFightingGameAnswerChallenge::CopyFrom(const CMsgClientToGCFightingGameAnswerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFightingGameAnswerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFightingGameAnswerChallenge::IsInitialized() const {
  return true;
}

void CMsgClientToGCFightingGameAnswerChallenge::InternalSwap(CMsgClientToGCFightingGameAnswerChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCFightingGameAnswerChallenge, _impl_.accept_)
      + sizeof(CMsgClientToGCFightingGameAnswerChallenge::_impl_.accept_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCFightingGameAnswerChallenge, _impl_.challenger_account_id_)>(
          reinterpret_cast<char*>(&_impl_.challenger_account_id_),
          reinterpret_cast<char*>(&other->_impl_.challenger_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFightingGameAnswerChallenge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[3]);
}

// ===================================================================

class CMsgClientToGCFightingGameAnswerChallengeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFightingGameAnswerChallengeResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCFightingGameAnswerChallengeResponse::CMsgClientToGCFightingGameAnswerChallengeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFightingGameAnswerChallengeResponse)
}
CMsgClientToGCFightingGameAnswerChallengeResponse::CMsgClientToGCFightingGameAnswerChallengeResponse(const CMsgClientToGCFightingGameAnswerChallengeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFightingGameAnswerChallengeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFightingGameAnswerChallengeResponse)
}

inline void CMsgClientToGCFightingGameAnswerChallengeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCFightingGameAnswerChallengeResponse::~CMsgClientToGCFightingGameAnswerChallengeResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFightingGameAnswerChallengeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFightingGameAnswerChallengeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCFightingGameAnswerChallengeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFightingGameAnswerChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFightingGameAnswerChallengeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFightingGameAnswerChallengeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFightingGameAnswerChallengeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFightingGameAnswerChallengeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFightingGameAnswerChallengeResponse)
  return target;
}

size_t CMsgClientToGCFightingGameAnswerChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFightingGameAnswerChallengeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse response = 1 [default = k_eInternalError];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFightingGameAnswerChallengeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFightingGameAnswerChallengeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFightingGameAnswerChallengeResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFightingGameAnswerChallengeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFightingGameAnswerChallengeResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFightingGameAnswerChallengeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFightingGameAnswerChallengeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFightingGameAnswerChallengeResponse::CopyFrom(const CMsgClientToGCFightingGameAnswerChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFightingGameAnswerChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFightingGameAnswerChallengeResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCFightingGameAnswerChallengeResponse::InternalSwap(CMsgClientToGCFightingGameAnswerChallengeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFightingGameAnswerChallengeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[4]);
}

// ===================================================================

class CMsgGCToClientFightingGameChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientFightingGameChallenge>()._impl_._has_bits_);
  static void set_has_challenger_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToClientFightingGameChallenge::CMsgGCToClientFightingGameChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientFightingGameChallenge)
}
CMsgGCToClientFightingGameChallenge::CMsgGCToClientFightingGameChallenge(const CMsgGCToClientFightingGameChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientFightingGameChallenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenger_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.challenger_account_id_ = from._impl_.challenger_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientFightingGameChallenge)
}

inline void CMsgGCToClientFightingGameChallenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenger_account_id_){0u}
  };
}

CMsgGCToClientFightingGameChallenge::~CMsgGCToClientFightingGameChallenge() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientFightingGameChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientFightingGameChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToClientFightingGameChallenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientFightingGameChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientFightingGameChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.challenger_account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientFightingGameChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 challenger_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_challenger_account_id(&has_bits);
          _impl_.challenger_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientFightingGameChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientFightingGameChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 challenger_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_challenger_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientFightingGameChallenge)
  return target;
}

size_t CMsgGCToClientFightingGameChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientFightingGameChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 challenger_account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenger_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientFightingGameChallenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientFightingGameChallenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientFightingGameChallenge::GetClassData() const { return &_class_data_; }


void CMsgGCToClientFightingGameChallenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientFightingGameChallenge*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientFightingGameChallenge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientFightingGameChallenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_challenger_account_id()) {
    _this->_internal_set_challenger_account_id(from._internal_challenger_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientFightingGameChallenge::CopyFrom(const CMsgGCToClientFightingGameChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientFightingGameChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFightingGameChallenge::IsInitialized() const {
  return true;
}

void CMsgGCToClientFightingGameChallenge::InternalSwap(CMsgGCToClientFightingGameChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.challenger_account_id_, other->_impl_.challenger_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientFightingGameChallenge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[5]);
}

// ===================================================================

class CMsgGCToClientFightingGameChallengeCanceled::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientFightingGameChallengeCanceled>()._impl_._has_bits_);
  static void set_has_challenger_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_responder_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToClientFightingGameChallengeCanceled::CMsgGCToClientFightingGameChallengeCanceled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientFightingGameChallengeCanceled)
}
CMsgGCToClientFightingGameChallengeCanceled::CMsgGCToClientFightingGameChallengeCanceled(const CMsgGCToClientFightingGameChallengeCanceled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientFightingGameChallengeCanceled* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenger_account_id_){}
    , decltype(_impl_.responder_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.challenger_account_id_, &from._impl_.challenger_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.responder_account_id_) -
    reinterpret_cast<char*>(&_impl_.challenger_account_id_)) + sizeof(_impl_.responder_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientFightingGameChallengeCanceled)
}

inline void CMsgGCToClientFightingGameChallengeCanceled::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenger_account_id_){0u}
    , decltype(_impl_.responder_account_id_){0u}
  };
}

CMsgGCToClientFightingGameChallengeCanceled::~CMsgGCToClientFightingGameChallengeCanceled() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientFightingGameChallengeCanceled)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientFightingGameChallengeCanceled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToClientFightingGameChallengeCanceled::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientFightingGameChallengeCanceled::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientFightingGameChallengeCanceled)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.challenger_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.responder_account_id_) -
        reinterpret_cast<char*>(&_impl_.challenger_account_id_)) + sizeof(_impl_.responder_account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientFightingGameChallengeCanceled::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 challenger_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_challenger_account_id(&has_bits);
          _impl_.challenger_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 responder_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_responder_account_id(&has_bits);
          _impl_.responder_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientFightingGameChallengeCanceled::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientFightingGameChallengeCanceled)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 challenger_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_challenger_account_id(), target);
  }

  // optional uint32 responder_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_responder_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientFightingGameChallengeCanceled)
  return target;
}

size_t CMsgGCToClientFightingGameChallengeCanceled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientFightingGameChallengeCanceled)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 challenger_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenger_account_id());
    }

    // optional uint32 responder_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_responder_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientFightingGameChallengeCanceled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientFightingGameChallengeCanceled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientFightingGameChallengeCanceled::GetClassData() const { return &_class_data_; }


void CMsgGCToClientFightingGameChallengeCanceled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientFightingGameChallengeCanceled*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientFightingGameChallengeCanceled&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientFightingGameChallengeCanceled)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.challenger_account_id_ = from._impl_.challenger_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.responder_account_id_ = from._impl_.responder_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientFightingGameChallengeCanceled::CopyFrom(const CMsgGCToClientFightingGameChallengeCanceled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientFightingGameChallengeCanceled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFightingGameChallengeCanceled::IsInitialized() const {
  return true;
}

void CMsgGCToClientFightingGameChallengeCanceled::InternalSwap(CMsgGCToClientFightingGameChallengeCanceled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientFightingGameChallengeCanceled, _impl_.responder_account_id_)
      + sizeof(CMsgGCToClientFightingGameChallengeCanceled::_impl_.responder_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientFightingGameChallengeCanceled, _impl_.challenger_account_id_)>(
          reinterpret_cast<char*>(&_impl_.challenger_account_id_),
          reinterpret_cast<char*>(&other->_impl_.challenger_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientFightingGameChallengeCanceled::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[6]);
}

// ===================================================================

class CMsgGCToClientFightingGameStartMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientFightingGameStartMatch>()._impl_._has_bits_);
  static void set_has_challenger_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_responder_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToClientFightingGameStartMatch::CMsgGCToClientFightingGameStartMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientFightingGameStartMatch)
}
CMsgGCToClientFightingGameStartMatch::CMsgGCToClientFightingGameStartMatch(const CMsgGCToClientFightingGameStartMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientFightingGameStartMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenger_account_id_){}
    , decltype(_impl_.responder_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.challenger_account_id_, &from._impl_.challenger_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.responder_account_id_) -
    reinterpret_cast<char*>(&_impl_.challenger_account_id_)) + sizeof(_impl_.responder_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientFightingGameStartMatch)
}

inline void CMsgGCToClientFightingGameStartMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenger_account_id_){0u}
    , decltype(_impl_.responder_account_id_){0u}
  };
}

CMsgGCToClientFightingGameStartMatch::~CMsgGCToClientFightingGameStartMatch() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientFightingGameStartMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientFightingGameStartMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToClientFightingGameStartMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientFightingGameStartMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientFightingGameStartMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.challenger_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.responder_account_id_) -
        reinterpret_cast<char*>(&_impl_.challenger_account_id_)) + sizeof(_impl_.responder_account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientFightingGameStartMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 challenger_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_challenger_account_id(&has_bits);
          _impl_.challenger_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 responder_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_responder_account_id(&has_bits);
          _impl_.responder_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientFightingGameStartMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientFightingGameStartMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 challenger_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_challenger_account_id(), target);
  }

  // optional uint32 responder_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_responder_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientFightingGameStartMatch)
  return target;
}

size_t CMsgGCToClientFightingGameStartMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientFightingGameStartMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 challenger_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenger_account_id());
    }

    // optional uint32 responder_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_responder_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientFightingGameStartMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientFightingGameStartMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientFightingGameStartMatch::GetClassData() const { return &_class_data_; }


void CMsgGCToClientFightingGameStartMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientFightingGameStartMatch*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientFightingGameStartMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientFightingGameStartMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.challenger_account_id_ = from._impl_.challenger_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.responder_account_id_ = from._impl_.responder_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientFightingGameStartMatch::CopyFrom(const CMsgGCToClientFightingGameStartMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientFightingGameStartMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFightingGameStartMatch::IsInitialized() const {
  return true;
}

void CMsgGCToClientFightingGameStartMatch::InternalSwap(CMsgGCToClientFightingGameStartMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientFightingGameStartMatch, _impl_.responder_account_id_)
      + sizeof(CMsgGCToClientFightingGameStartMatch::_impl_.responder_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientFightingGameStartMatch, _impl_.challenger_account_id_)>(
          reinterpret_cast<char*>(&_impl_.challenger_account_id_),
          reinterpret_cast<char*>(&other->_impl_.challenger_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientFightingGameStartMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFightingGameChallengeFriend*
Arena::CreateMaybeMessage< ::CMsgClientToGCFightingGameChallengeFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFightingGameChallengeFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFightingGameChallengeFriendResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCFightingGameChallengeFriendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFightingGameChallengeFriendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFightingGameCancelChallengeFriend*
Arena::CreateMaybeMessage< ::CMsgClientToGCFightingGameCancelChallengeFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFightingGameCancelChallengeFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFightingGameAnswerChallenge*
Arena::CreateMaybeMessage< ::CMsgClientToGCFightingGameAnswerChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFightingGameAnswerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFightingGameAnswerChallengeResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCFightingGameAnswerChallengeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFightingGameAnswerChallengeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientFightingGameChallenge*
Arena::CreateMaybeMessage< ::CMsgGCToClientFightingGameChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientFightingGameChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientFightingGameChallengeCanceled*
Arena::CreateMaybeMessage< ::CMsgGCToClientFightingGameChallengeCanceled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientFightingGameChallengeCanceled >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientFightingGameStartMatch*
Arena::CreateMaybeMessage< ::CMsgGCToClientFightingGameStartMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientFightingGameStartMatch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
