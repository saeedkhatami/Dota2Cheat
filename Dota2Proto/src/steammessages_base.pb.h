// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fbase_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fbase_2eproto;
class CBilling_Address;
struct CBilling_AddressDefaultTypeInternal;
extern CBilling_AddressDefaultTypeInternal _CBilling_Address_default_instance_;
class CCDDBAppDetailCommon;
struct CCDDBAppDetailCommonDefaultTypeInternal;
extern CCDDBAppDetailCommonDefaultTypeInternal _CCDDBAppDetailCommon_default_instance_;
class CClanEventData;
struct CClanEventDataDefaultTypeInternal;
extern CClanEventDataDefaultTypeInternal _CClanEventData_default_instance_;
class CClanEventUserNewsTuple;
struct CClanEventUserNewsTupleDefaultTypeInternal;
extern CClanEventUserNewsTupleDefaultTypeInternal _CClanEventUserNewsTuple_default_instance_;
class CClanMatchEventByRange;
struct CClanMatchEventByRangeDefaultTypeInternal;
extern CClanMatchEventByRangeDefaultTypeInternal _CClanMatchEventByRange_default_instance_;
class CCommunity_ClanAnnouncementInfo;
struct CCommunity_ClanAnnouncementInfoDefaultTypeInternal;
extern CCommunity_ClanAnnouncementInfoDefaultTypeInternal _CCommunity_ClanAnnouncementInfo_default_instance_;
class CCuratorPreferences;
struct CCuratorPreferencesDefaultTypeInternal;
extern CCuratorPreferencesDefaultTypeInternal _CCuratorPreferences_default_instance_;
class CLocalizationToken;
struct CLocalizationTokenDefaultTypeInternal;
extern CLocalizationTokenDefaultTypeInternal _CLocalizationToken_default_instance_;
class CMsgAppRights;
struct CMsgAppRightsDefaultTypeInternal;
extern CMsgAppRightsDefaultTypeInternal _CMsgAppRights_default_instance_;
class CMsgAuthTicket;
struct CMsgAuthTicketDefaultTypeInternal;
extern CMsgAuthTicketDefaultTypeInternal _CMsgAuthTicket_default_instance_;
class CMsgGCRoutingProtoBufHeader;
struct CMsgGCRoutingProtoBufHeaderDefaultTypeInternal;
extern CMsgGCRoutingProtoBufHeaderDefaultTypeInternal _CMsgGCRoutingProtoBufHeader_default_instance_;
class CMsgIPAddress;
struct CMsgIPAddressDefaultTypeInternal;
extern CMsgIPAddressDefaultTypeInternal _CMsgIPAddress_default_instance_;
class CMsgIPAddressBucket;
struct CMsgIPAddressBucketDefaultTypeInternal;
extern CMsgIPAddressBucketDefaultTypeInternal _CMsgIPAddressBucket_default_instance_;
class CMsgKeyValuePair;
struct CMsgKeyValuePairDefaultTypeInternal;
extern CMsgKeyValuePairDefaultTypeInternal _CMsgKeyValuePair_default_instance_;
class CMsgKeyValueSet;
struct CMsgKeyValueSetDefaultTypeInternal;
extern CMsgKeyValueSetDefaultTypeInternal _CMsgKeyValueSet_default_instance_;
class CMsgMulti;
struct CMsgMultiDefaultTypeInternal;
extern CMsgMultiDefaultTypeInternal _CMsgMulti_default_instance_;
class CMsgProtoBufHeader;
struct CMsgProtoBufHeaderDefaultTypeInternal;
extern CMsgProtoBufHeaderDefaultTypeInternal _CMsgProtoBufHeader_default_instance_;
class CMsgProtobufWrapped;
struct CMsgProtobufWrappedDefaultTypeInternal;
extern CMsgProtobufWrappedDefaultTypeInternal _CMsgProtobufWrapped_default_instance_;
class CPackageReservationStatus;
struct CPackageReservationStatusDefaultTypeInternal;
extern CPackageReservationStatusDefaultTypeInternal _CPackageReservationStatus_default_instance_;
class UserContentDescriptorPreferences;
struct UserContentDescriptorPreferencesDefaultTypeInternal;
extern UserContentDescriptorPreferencesDefaultTypeInternal _UserContentDescriptorPreferences_default_instance_;
class UserContentDescriptorPreferences_ContentDescriptor;
struct UserContentDescriptorPreferences_ContentDescriptorDefaultTypeInternal;
extern UserContentDescriptorPreferences_ContentDescriptorDefaultTypeInternal _UserContentDescriptorPreferences_ContentDescriptor_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CBilling_Address* Arena::CreateMaybeMessage<::CBilling_Address>(Arena*);
template<> ::CCDDBAppDetailCommon* Arena::CreateMaybeMessage<::CCDDBAppDetailCommon>(Arena*);
template<> ::CClanEventData* Arena::CreateMaybeMessage<::CClanEventData>(Arena*);
template<> ::CClanEventUserNewsTuple* Arena::CreateMaybeMessage<::CClanEventUserNewsTuple>(Arena*);
template<> ::CClanMatchEventByRange* Arena::CreateMaybeMessage<::CClanMatchEventByRange>(Arena*);
template<> ::CCommunity_ClanAnnouncementInfo* Arena::CreateMaybeMessage<::CCommunity_ClanAnnouncementInfo>(Arena*);
template<> ::CCuratorPreferences* Arena::CreateMaybeMessage<::CCuratorPreferences>(Arena*);
template<> ::CLocalizationToken* Arena::CreateMaybeMessage<::CLocalizationToken>(Arena*);
template<> ::CMsgAppRights* Arena::CreateMaybeMessage<::CMsgAppRights>(Arena*);
template<> ::CMsgAuthTicket* Arena::CreateMaybeMessage<::CMsgAuthTicket>(Arena*);
template<> ::CMsgGCRoutingProtoBufHeader* Arena::CreateMaybeMessage<::CMsgGCRoutingProtoBufHeader>(Arena*);
template<> ::CMsgIPAddress* Arena::CreateMaybeMessage<::CMsgIPAddress>(Arena*);
template<> ::CMsgIPAddressBucket* Arena::CreateMaybeMessage<::CMsgIPAddressBucket>(Arena*);
template<> ::CMsgKeyValuePair* Arena::CreateMaybeMessage<::CMsgKeyValuePair>(Arena*);
template<> ::CMsgKeyValueSet* Arena::CreateMaybeMessage<::CMsgKeyValueSet>(Arena*);
template<> ::CMsgMulti* Arena::CreateMaybeMessage<::CMsgMulti>(Arena*);
template<> ::CMsgProtoBufHeader* Arena::CreateMaybeMessage<::CMsgProtoBufHeader>(Arena*);
template<> ::CMsgProtobufWrapped* Arena::CreateMaybeMessage<::CMsgProtobufWrapped>(Arena*);
template<> ::CPackageReservationStatus* Arena::CreateMaybeMessage<::CPackageReservationStatus>(Arena*);
template<> ::UserContentDescriptorPreferences* Arena::CreateMaybeMessage<::UserContentDescriptorPreferences>(Arena*);
template<> ::UserContentDescriptorPreferences_ContentDescriptor* Arena::CreateMaybeMessage<::UserContentDescriptorPreferences_ContentDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgProtoBufHeader_ESessionDisposition : int {
  CMsgProtoBufHeader_ESessionDisposition_k_ESessionDispositionNormal = 0,
  CMsgProtoBufHeader_ESessionDisposition_k_ESessionDispositionDisconnect = 1
};
bool CMsgProtoBufHeader_ESessionDisposition_IsValid(int value);
constexpr CMsgProtoBufHeader_ESessionDisposition CMsgProtoBufHeader_ESessionDisposition_ESessionDisposition_MIN = CMsgProtoBufHeader_ESessionDisposition_k_ESessionDispositionNormal;
constexpr CMsgProtoBufHeader_ESessionDisposition CMsgProtoBufHeader_ESessionDisposition_ESessionDisposition_MAX = CMsgProtoBufHeader_ESessionDisposition_k_ESessionDispositionDisconnect;
constexpr int CMsgProtoBufHeader_ESessionDisposition_ESessionDisposition_ARRAYSIZE = CMsgProtoBufHeader_ESessionDisposition_ESessionDisposition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgProtoBufHeader_ESessionDisposition_descriptor();
template<typename T>
inline const std::string& CMsgProtoBufHeader_ESessionDisposition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgProtoBufHeader_ESessionDisposition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgProtoBufHeader_ESessionDisposition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgProtoBufHeader_ESessionDisposition_descriptor(), enum_t_value);
}
inline bool CMsgProtoBufHeader_ESessionDisposition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgProtoBufHeader_ESessionDisposition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgProtoBufHeader_ESessionDisposition>(
    CMsgProtoBufHeader_ESessionDisposition_descriptor(), name, value);
}
enum EBanContentCheckResult : int {
  k_EBanContentCheckResult_NotScanned = 0,
  k_EBanContentCheckResult_Reset = 1,
  k_EBanContentCheckResult_NeedsChecking = 2,
  k_EBanContentCheckResult_VeryUnlikely = 5,
  k_EBanContentCheckResult_Unlikely = 30,
  k_EBanContentCheckResult_Possible = 50,
  k_EBanContentCheckResult_Likely = 75,
  k_EBanContentCheckResult_VeryLikely = 100
};
bool EBanContentCheckResult_IsValid(int value);
constexpr EBanContentCheckResult EBanContentCheckResult_MIN = k_EBanContentCheckResult_NotScanned;
constexpr EBanContentCheckResult EBanContentCheckResult_MAX = k_EBanContentCheckResult_VeryLikely;
constexpr int EBanContentCheckResult_ARRAYSIZE = EBanContentCheckResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBanContentCheckResult_descriptor();
template<typename T>
inline const std::string& EBanContentCheckResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EBanContentCheckResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EBanContentCheckResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EBanContentCheckResult_descriptor(), enum_t_value);
}
inline bool EBanContentCheckResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EBanContentCheckResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EBanContentCheckResult>(
    EBanContentCheckResult_descriptor(), name, value);
}
enum EProtoClanEventType : int {
  k_EClanOtherEvent = 1,
  k_EClanGameEvent = 2,
  k_EClanPartyEvent = 3,
  k_EClanMeetingEvent = 4,
  k_EClanSpecialCauseEvent = 5,
  k_EClanMusicAndArtsEvent = 6,
  k_EClanSportsEvent = 7,
  k_EClanTripEvent = 8,
  k_EClanChatEvent = 9,
  k_EClanGameReleaseEvent = 10,
  k_EClanBroadcastEvent = 11,
  k_EClanSmallUpdateEvent = 12,
  k_EClanPreAnnounceMajorUpdateEvent = 13,
  k_EClanMajorUpdateEvent = 14,
  k_EClanDLCReleaseEvent = 15,
  k_EClanFutureReleaseEvent = 16,
  k_EClanESportTournamentStreamEvent = 17,
  k_EClanDevStreamEvent = 18,
  k_EClanFamousStreamEvent = 19,
  k_EClanGameSalesEvent = 20,
  k_EClanGameItemSalesEvent = 21,
  k_EClanInGameBonusXPEvent = 22,
  k_EClanInGameLootEvent = 23,
  k_EClanInGamePerksEvent = 24,
  k_EClanInGameChallengeEvent = 25,
  k_EClanInGameContestEvent = 26,
  k_EClanIRLEvent = 27,
  k_EClanNewsEvent = 28,
  k_EClanBetaReleaseEvent = 29,
  k_EClanInGameContentReleaseEvent = 30,
  k_EClanFreeTrial = 31,
  k_EClanSeasonRelease = 32,
  k_EClanSeasonUpdate = 33,
  k_EClanCrosspostEvent = 34,
  k_EClanInGameEventGeneral = 35
};
bool EProtoClanEventType_IsValid(int value);
constexpr EProtoClanEventType EProtoClanEventType_MIN = k_EClanOtherEvent;
constexpr EProtoClanEventType EProtoClanEventType_MAX = k_EClanInGameEventGeneral;
constexpr int EProtoClanEventType_ARRAYSIZE = EProtoClanEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProtoClanEventType_descriptor();
template<typename T>
inline const std::string& EProtoClanEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EProtoClanEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EProtoClanEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EProtoClanEventType_descriptor(), enum_t_value);
}
inline bool EProtoClanEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EProtoClanEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EProtoClanEventType>(
    EProtoClanEventType_descriptor(), name, value);
}
enum PartnerEventNotificationType : int {
  k_EEventStart = 0,
  k_EEventBroadcastStart = 1,
  k_EEventMatchStart = 2,
  k_EEventPartnerMaxType = 3
};
bool PartnerEventNotificationType_IsValid(int value);
constexpr PartnerEventNotificationType PartnerEventNotificationType_MIN = k_EEventStart;
constexpr PartnerEventNotificationType PartnerEventNotificationType_MAX = k_EEventPartnerMaxType;
constexpr int PartnerEventNotificationType_ARRAYSIZE = PartnerEventNotificationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartnerEventNotificationType_descriptor();
template<typename T>
inline const std::string& PartnerEventNotificationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PartnerEventNotificationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PartnerEventNotificationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PartnerEventNotificationType_descriptor(), enum_t_value);
}
inline bool PartnerEventNotificationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PartnerEventNotificationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PartnerEventNotificationType>(
    PartnerEventNotificationType_descriptor(), name, value);
}
// ===================================================================

class CMsgIPAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgIPAddress) */ {
 public:
  inline CMsgIPAddress() : CMsgIPAddress(nullptr) {}
  ~CMsgIPAddress() override;
  explicit PROTOBUF_CONSTEXPR CMsgIPAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgIPAddress(const CMsgIPAddress& from);
  CMsgIPAddress(CMsgIPAddress&& from) noexcept
    : CMsgIPAddress() {
    *this = ::std::move(from);
  }

  inline CMsgIPAddress& operator=(const CMsgIPAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgIPAddress& operator=(CMsgIPAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgIPAddress& default_instance() {
    return *internal_default_instance();
  }
  enum IpCase {
    kV4 = 1,
    kV6 = 2,
    IP_NOT_SET = 0,
  };

  static inline const CMsgIPAddress* internal_default_instance() {
    return reinterpret_cast<const CMsgIPAddress*>(
               &_CMsgIPAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgIPAddress& a, CMsgIPAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgIPAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgIPAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgIPAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgIPAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgIPAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgIPAddress& from) {
    CMsgIPAddress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgIPAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgIPAddress";
  }
  protected:
  explicit CMsgIPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV4FieldNumber = 1,
    kV6FieldNumber = 2,
  };
  // fixed32 v4 = 1;
  bool has_v4() const;
  private:
  bool _internal_has_v4() const;
  public:
  void clear_v4();
  uint32_t v4() const;
  void set_v4(uint32_t value);
  private:
  uint32_t _internal_v4() const;
  void _internal_set_v4(uint32_t value);
  public:

  // bytes v6 = 2;
  bool has_v6() const;
  private:
  bool _internal_has_v6() const;
  public:
  void clear_v6();
  const std::string& v6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v6();
  PROTOBUF_NODISCARD std::string* release_v6();
  void set_allocated_v6(std::string* v6);
  private:
  const std::string& _internal_v6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v6(const std::string& value);
  std::string* _internal_mutable_v6();
  public:

  void clear_ip();
  IpCase ip_case() const;
  // @@protoc_insertion_point(class_scope:CMsgIPAddress)
 private:
  class _Internal;
  void set_has_v4();
  void set_has_v6();

  inline bool has_ip() const;
  inline void clear_has_ip();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union IpUnion {
      constexpr IpUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t v4_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v6_;
    } ip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgIPAddressBucket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgIPAddressBucket) */ {
 public:
  inline CMsgIPAddressBucket() : CMsgIPAddressBucket(nullptr) {}
  ~CMsgIPAddressBucket() override;
  explicit PROTOBUF_CONSTEXPR CMsgIPAddressBucket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgIPAddressBucket(const CMsgIPAddressBucket& from);
  CMsgIPAddressBucket(CMsgIPAddressBucket&& from) noexcept
    : CMsgIPAddressBucket() {
    *this = ::std::move(from);
  }

  inline CMsgIPAddressBucket& operator=(const CMsgIPAddressBucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgIPAddressBucket& operator=(CMsgIPAddressBucket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgIPAddressBucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgIPAddressBucket* internal_default_instance() {
    return reinterpret_cast<const CMsgIPAddressBucket*>(
               &_CMsgIPAddressBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgIPAddressBucket& a, CMsgIPAddressBucket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgIPAddressBucket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgIPAddressBucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgIPAddressBucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgIPAddressBucket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgIPAddressBucket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgIPAddressBucket& from) {
    CMsgIPAddressBucket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgIPAddressBucket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgIPAddressBucket";
  }
  protected:
  explicit CMsgIPAddressBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalIpAddressFieldNumber = 1,
    kBucketFieldNumber = 2,
  };
  // optional .CMsgIPAddress original_ip_address = 1;
  bool has_original_ip_address() const;
  private:
  bool _internal_has_original_ip_address() const;
  public:
  void clear_original_ip_address();
  const ::CMsgIPAddress& original_ip_address() const;
  PROTOBUF_NODISCARD ::CMsgIPAddress* release_original_ip_address();
  ::CMsgIPAddress* mutable_original_ip_address();
  void set_allocated_original_ip_address(::CMsgIPAddress* original_ip_address);
  private:
  const ::CMsgIPAddress& _internal_original_ip_address() const;
  ::CMsgIPAddress* _internal_mutable_original_ip_address();
  public:
  void unsafe_arena_set_allocated_original_ip_address(
      ::CMsgIPAddress* original_ip_address);
  ::CMsgIPAddress* unsafe_arena_release_original_ip_address();

  // optional fixed64 bucket = 2;
  bool has_bucket() const;
  private:
  bool _internal_has_bucket() const;
  public:
  void clear_bucket();
  uint64_t bucket() const;
  void set_bucket(uint64_t value);
  private:
  uint64_t _internal_bucket() const;
  void _internal_set_bucket(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgIPAddressBucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgIPAddress* original_ip_address_;
    uint64_t bucket_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCRoutingProtoBufHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCRoutingProtoBufHeader) */ {
 public:
  inline CMsgGCRoutingProtoBufHeader() : CMsgGCRoutingProtoBufHeader(nullptr) {}
  ~CMsgGCRoutingProtoBufHeader() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCRoutingProtoBufHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCRoutingProtoBufHeader(const CMsgGCRoutingProtoBufHeader& from);
  CMsgGCRoutingProtoBufHeader(CMsgGCRoutingProtoBufHeader&& from) noexcept
    : CMsgGCRoutingProtoBufHeader() {
    *this = ::std::move(from);
  }

  inline CMsgGCRoutingProtoBufHeader& operator=(const CMsgGCRoutingProtoBufHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCRoutingProtoBufHeader& operator=(CMsgGCRoutingProtoBufHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCRoutingProtoBufHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCRoutingProtoBufHeader* internal_default_instance() {
    return reinterpret_cast<const CMsgGCRoutingProtoBufHeader*>(
               &_CMsgGCRoutingProtoBufHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgGCRoutingProtoBufHeader& a, CMsgGCRoutingProtoBufHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCRoutingProtoBufHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCRoutingProtoBufHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCRoutingProtoBufHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCRoutingProtoBufHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCRoutingProtoBufHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCRoutingProtoBufHeader& from) {
    CMsgGCRoutingProtoBufHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCRoutingProtoBufHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCRoutingProtoBufHeader";
  }
  protected:
  explicit CMsgGCRoutingProtoBufHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDstGcidQueueFieldNumber = 1,
    kDstGcDirIndexFieldNumber = 2,
  };
  // optional uint64 dst_gcid_queue = 1;
  bool has_dst_gcid_queue() const;
  private:
  bool _internal_has_dst_gcid_queue() const;
  public:
  void clear_dst_gcid_queue();
  uint64_t dst_gcid_queue() const;
  void set_dst_gcid_queue(uint64_t value);
  private:
  uint64_t _internal_dst_gcid_queue() const;
  void _internal_set_dst_gcid_queue(uint64_t value);
  public:

  // optional uint32 dst_gc_dir_index = 2;
  bool has_dst_gc_dir_index() const;
  private:
  bool _internal_has_dst_gc_dir_index() const;
  public:
  void clear_dst_gc_dir_index();
  uint32_t dst_gc_dir_index() const;
  void set_dst_gc_dir_index(uint32_t value);
  private:
  uint32_t _internal_dst_gc_dir_index() const;
  void _internal_set_dst_gc_dir_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCRoutingProtoBufHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t dst_gcid_queue_;
    uint32_t dst_gc_dir_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgProtoBufHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProtoBufHeader) */ {
 public:
  inline CMsgProtoBufHeader() : CMsgProtoBufHeader(nullptr) {}
  ~CMsgProtoBufHeader() override;
  explicit PROTOBUF_CONSTEXPR CMsgProtoBufHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProtoBufHeader(const CMsgProtoBufHeader& from);
  CMsgProtoBufHeader(CMsgProtoBufHeader&& from) noexcept
    : CMsgProtoBufHeader() {
    *this = ::std::move(from);
  }

  inline CMsgProtoBufHeader& operator=(const CMsgProtoBufHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProtoBufHeader& operator=(CMsgProtoBufHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgProtoBufHeader& default_instance() {
    return *internal_default_instance();
  }
  enum IpAddrCase {
    kIp = 15,
    kIpV6 = 29,
    IP_ADDR_NOT_SET = 0,
  };

  static inline const CMsgProtoBufHeader* internal_default_instance() {
    return reinterpret_cast<const CMsgProtoBufHeader*>(
               &_CMsgProtoBufHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgProtoBufHeader& a, CMsgProtoBufHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProtoBufHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProtoBufHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgProtoBufHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgProtoBufHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgProtoBufHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgProtoBufHeader& from) {
    CMsgProtoBufHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProtoBufHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProtoBufHeader";
  }
  protected:
  explicit CMsgProtoBufHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgProtoBufHeader_ESessionDisposition ESessionDisposition;
  static constexpr ESessionDisposition k_ESessionDispositionNormal =
    CMsgProtoBufHeader_ESessionDisposition_k_ESessionDispositionNormal;
  static constexpr ESessionDisposition k_ESessionDispositionDisconnect =
    CMsgProtoBufHeader_ESessionDisposition_k_ESessionDispositionDisconnect;
  static inline bool ESessionDisposition_IsValid(int value) {
    return CMsgProtoBufHeader_ESessionDisposition_IsValid(value);
  }
  static constexpr ESessionDisposition ESessionDisposition_MIN =
    CMsgProtoBufHeader_ESessionDisposition_ESessionDisposition_MIN;
  static constexpr ESessionDisposition ESessionDisposition_MAX =
    CMsgProtoBufHeader_ESessionDisposition_ESessionDisposition_MAX;
  static constexpr int ESessionDisposition_ARRAYSIZE =
    CMsgProtoBufHeader_ESessionDisposition_ESessionDisposition_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ESessionDisposition_descriptor() {
    return CMsgProtoBufHeader_ESessionDisposition_descriptor();
  }
  template<typename T>
  static inline const std::string& ESessionDisposition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ESessionDisposition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ESessionDisposition_Name.");
    return CMsgProtoBufHeader_ESessionDisposition_Name(enum_t_value);
  }
  static inline bool ESessionDisposition_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ESessionDisposition* value) {
    return CMsgProtoBufHeader_ESessionDisposition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kForwardToSysidFieldNumber = 27,
    kTargetJobNameFieldNumber = 12,
    kErrorMessageFieldNumber = 14,
    kDebugSourceFieldNumber = 34,
    kWgTokenFieldNumber = 39,
    kWebuiAuthKeyFieldNumber = 40,
    kRoutingGcFieldNumber = 37,
    kSteamidFieldNumber = 1,
    kClientSessionidFieldNumber = 2,
    kRoutingAppidFieldNumber = 3,
    kAuthAccountFlagsFieldNumber = 16,
    kPublisherGroupIdFieldNumber = 19,
    kTraceTagFieldNumber = 21,
    kSysidFieldNumber = 20,
    kTokenSourceFieldNumber = 22,
    kSeqNumFieldNumber = 24,
    kAdminSpoofingUserFieldNumber = 23,
    kIsFromExternalSourceFieldNumber = 26,
    kWebapiKeyIdFieldNumber = 25,
    kCmSysidFieldNumber = 28,
    kLauncherTypeFieldNumber = 31,
    kRealmFieldNumber = 32,
    kTokenIdFieldNumber = 36,
    kDebugSourceStringIndexFieldNumber = 35,
    kSessionDispositionFieldNumber = 38,
    kTimeoutMsFieldNumber = 33,
    kJobidSourceFieldNumber = 10,
    kJobidTargetFieldNumber = 11,
    kEresultFieldNumber = 13,
    kTransportErrorFieldNumber = 17,
    kMessageidFieldNumber = 18,
    kIpFieldNumber = 15,
    kIpV6FieldNumber = 29,
  };
  // repeated uint32 forward_to_sysid = 27;
  int forward_to_sysid_size() const;
  private:
  int _internal_forward_to_sysid_size() const;
  public:
  void clear_forward_to_sysid();
  private:
  uint32_t _internal_forward_to_sysid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_forward_to_sysid() const;
  void _internal_add_forward_to_sysid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_forward_to_sysid();
  public:
  uint32_t forward_to_sysid(int index) const;
  void set_forward_to_sysid(int index, uint32_t value);
  void add_forward_to_sysid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      forward_to_sysid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_forward_to_sysid();

  // optional string target_job_name = 12;
  bool has_target_job_name() const;
  private:
  bool _internal_has_target_job_name() const;
  public:
  void clear_target_job_name();
  const std::string& target_job_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_job_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_job_name();
  PROTOBUF_NODISCARD std::string* release_target_job_name();
  void set_allocated_target_job_name(std::string* target_job_name);
  private:
  const std::string& _internal_target_job_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_job_name(const std::string& value);
  std::string* _internal_mutable_target_job_name();
  public:

  // optional string error_message = 14;
  bool has_error_message() const;
  private:
  bool _internal_has_error_message() const;
  public:
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // optional string debug_source = 34;
  bool has_debug_source() const;
  private:
  bool _internal_has_debug_source() const;
  public:
  void clear_debug_source();
  const std::string& debug_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_debug_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_debug_source();
  PROTOBUF_NODISCARD std::string* release_debug_source();
  void set_allocated_debug_source(std::string* debug_source);
  private:
  const std::string& _internal_debug_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_debug_source(const std::string& value);
  std::string* _internal_mutable_debug_source();
  public:

  // optional string wg_token = 39;
  bool has_wg_token() const;
  private:
  bool _internal_has_wg_token() const;
  public:
  void clear_wg_token();
  const std::string& wg_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wg_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wg_token();
  PROTOBUF_NODISCARD std::string* release_wg_token();
  void set_allocated_wg_token(std::string* wg_token);
  private:
  const std::string& _internal_wg_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wg_token(const std::string& value);
  std::string* _internal_mutable_wg_token();
  public:

  // optional string webui_auth_key = 40;
  bool has_webui_auth_key() const;
  private:
  bool _internal_has_webui_auth_key() const;
  public:
  void clear_webui_auth_key();
  const std::string& webui_auth_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_webui_auth_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_webui_auth_key();
  PROTOBUF_NODISCARD std::string* release_webui_auth_key();
  void set_allocated_webui_auth_key(std::string* webui_auth_key);
  private:
  const std::string& _internal_webui_auth_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webui_auth_key(const std::string& value);
  std::string* _internal_mutable_webui_auth_key();
  public:

  // optional .CMsgGCRoutingProtoBufHeader routing_gc = 37;
  bool has_routing_gc() const;
  private:
  bool _internal_has_routing_gc() const;
  public:
  void clear_routing_gc();
  const ::CMsgGCRoutingProtoBufHeader& routing_gc() const;
  PROTOBUF_NODISCARD ::CMsgGCRoutingProtoBufHeader* release_routing_gc();
  ::CMsgGCRoutingProtoBufHeader* mutable_routing_gc();
  void set_allocated_routing_gc(::CMsgGCRoutingProtoBufHeader* routing_gc);
  private:
  const ::CMsgGCRoutingProtoBufHeader& _internal_routing_gc() const;
  ::CMsgGCRoutingProtoBufHeader* _internal_mutable_routing_gc();
  public:
  void unsafe_arena_set_allocated_routing_gc(
      ::CMsgGCRoutingProtoBufHeader* routing_gc);
  ::CMsgGCRoutingProtoBufHeader* unsafe_arena_release_routing_gc();

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional int32 client_sessionid = 2;
  bool has_client_sessionid() const;
  private:
  bool _internal_has_client_sessionid() const;
  public:
  void clear_client_sessionid();
  int32_t client_sessionid() const;
  void set_client_sessionid(int32_t value);
  private:
  int32_t _internal_client_sessionid() const;
  void _internal_set_client_sessionid(int32_t value);
  public:

  // optional uint32 routing_appid = 3;
  bool has_routing_appid() const;
  private:
  bool _internal_has_routing_appid() const;
  public:
  void clear_routing_appid();
  uint32_t routing_appid() const;
  void set_routing_appid(uint32_t value);
  private:
  uint32_t _internal_routing_appid() const;
  void _internal_set_routing_appid(uint32_t value);
  public:

  // optional uint32 auth_account_flags = 16;
  bool has_auth_account_flags() const;
  private:
  bool _internal_has_auth_account_flags() const;
  public:
  void clear_auth_account_flags();
  uint32_t auth_account_flags() const;
  void set_auth_account_flags(uint32_t value);
  private:
  uint32_t _internal_auth_account_flags() const;
  void _internal_set_auth_account_flags(uint32_t value);
  public:

  // optional uint32 publisher_group_id = 19;
  bool has_publisher_group_id() const;
  private:
  bool _internal_has_publisher_group_id() const;
  public:
  void clear_publisher_group_id();
  uint32_t publisher_group_id() const;
  void set_publisher_group_id(uint32_t value);
  private:
  uint32_t _internal_publisher_group_id() const;
  void _internal_set_publisher_group_id(uint32_t value);
  public:

  // optional uint64 trace_tag = 21;
  bool has_trace_tag() const;
  private:
  bool _internal_has_trace_tag() const;
  public:
  void clear_trace_tag();
  uint64_t trace_tag() const;
  void set_trace_tag(uint64_t value);
  private:
  uint64_t _internal_trace_tag() const;
  void _internal_set_trace_tag(uint64_t value);
  public:

  // optional uint32 sysid = 20;
  bool has_sysid() const;
  private:
  bool _internal_has_sysid() const;
  public:
  void clear_sysid();
  uint32_t sysid() const;
  void set_sysid(uint32_t value);
  private:
  uint32_t _internal_sysid() const;
  void _internal_set_sysid(uint32_t value);
  public:

  // optional uint32 token_source = 22;
  bool has_token_source() const;
  private:
  bool _internal_has_token_source() const;
  public:
  void clear_token_source();
  uint32_t token_source() const;
  void set_token_source(uint32_t value);
  private:
  uint32_t _internal_token_source() const;
  void _internal_set_token_source(uint32_t value);
  public:

  // optional int32 seq_num = 24;
  bool has_seq_num() const;
  private:
  bool _internal_has_seq_num() const;
  public:
  void clear_seq_num();
  int32_t seq_num() const;
  void set_seq_num(int32_t value);
  private:
  int32_t _internal_seq_num() const;
  void _internal_set_seq_num(int32_t value);
  public:

  // optional bool admin_spoofing_user = 23;
  bool has_admin_spoofing_user() const;
  private:
  bool _internal_has_admin_spoofing_user() const;
  public:
  void clear_admin_spoofing_user();
  bool admin_spoofing_user() const;
  void set_admin_spoofing_user(bool value);
  private:
  bool _internal_admin_spoofing_user() const;
  void _internal_set_admin_spoofing_user(bool value);
  public:

  // optional bool is_from_external_source = 26;
  bool has_is_from_external_source() const;
  private:
  bool _internal_has_is_from_external_source() const;
  public:
  void clear_is_from_external_source();
  bool is_from_external_source() const;
  void set_is_from_external_source(bool value);
  private:
  bool _internal_is_from_external_source() const;
  void _internal_set_is_from_external_source(bool value);
  public:

  // optional uint32 webapi_key_id = 25;
  bool has_webapi_key_id() const;
  private:
  bool _internal_has_webapi_key_id() const;
  public:
  void clear_webapi_key_id();
  uint32_t webapi_key_id() const;
  void set_webapi_key_id(uint32_t value);
  private:
  uint32_t _internal_webapi_key_id() const;
  void _internal_set_webapi_key_id(uint32_t value);
  public:

  // optional uint32 cm_sysid = 28;
  bool has_cm_sysid() const;
  private:
  bool _internal_has_cm_sysid() const;
  public:
  void clear_cm_sysid();
  uint32_t cm_sysid() const;
  void set_cm_sysid(uint32_t value);
  private:
  uint32_t _internal_cm_sysid() const;
  void _internal_set_cm_sysid(uint32_t value);
  public:

  // optional uint32 launcher_type = 31 [default = 0];
  bool has_launcher_type() const;
  private:
  bool _internal_has_launcher_type() const;
  public:
  void clear_launcher_type();
  uint32_t launcher_type() const;
  void set_launcher_type(uint32_t value);
  private:
  uint32_t _internal_launcher_type() const;
  void _internal_set_launcher_type(uint32_t value);
  public:

  // optional uint32 realm = 32 [default = 0];
  bool has_realm() const;
  private:
  bool _internal_has_realm() const;
  public:
  void clear_realm();
  uint32_t realm() const;
  void set_realm(uint32_t value);
  private:
  uint32_t _internal_realm() const;
  void _internal_set_realm(uint32_t value);
  public:

  // optional uint64 token_id = 36;
  bool has_token_id() const;
  private:
  bool _internal_has_token_id() const;
  public:
  void clear_token_id();
  uint64_t token_id() const;
  void set_token_id(uint64_t value);
  private:
  uint64_t _internal_token_id() const;
  void _internal_set_token_id(uint64_t value);
  public:

  // optional uint32 debug_source_string_index = 35;
  bool has_debug_source_string_index() const;
  private:
  bool _internal_has_debug_source_string_index() const;
  public:
  void clear_debug_source_string_index();
  uint32_t debug_source_string_index() const;
  void set_debug_source_string_index(uint32_t value);
  private:
  uint32_t _internal_debug_source_string_index() const;
  void _internal_set_debug_source_string_index(uint32_t value);
  public:

  // optional .CMsgProtoBufHeader.ESessionDisposition session_disposition = 38 [default = k_ESessionDispositionNormal];
  bool has_session_disposition() const;
  private:
  bool _internal_has_session_disposition() const;
  public:
  void clear_session_disposition();
  ::CMsgProtoBufHeader_ESessionDisposition session_disposition() const;
  void set_session_disposition(::CMsgProtoBufHeader_ESessionDisposition value);
  private:
  ::CMsgProtoBufHeader_ESessionDisposition _internal_session_disposition() const;
  void _internal_set_session_disposition(::CMsgProtoBufHeader_ESessionDisposition value);
  public:

  // optional int32 timeout_ms = 33 [default = -1];
  bool has_timeout_ms() const;
  private:
  bool _internal_has_timeout_ms() const;
  public:
  void clear_timeout_ms();
  int32_t timeout_ms() const;
  void set_timeout_ms(int32_t value);
  private:
  int32_t _internal_timeout_ms() const;
  void _internal_set_timeout_ms(int32_t value);
  public:

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  bool has_jobid_source() const;
  private:
  bool _internal_has_jobid_source() const;
  public:
  void clear_jobid_source();
  uint64_t jobid_source() const;
  void set_jobid_source(uint64_t value);
  private:
  uint64_t _internal_jobid_source() const;
  void _internal_set_jobid_source(uint64_t value);
  public:

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  bool has_jobid_target() const;
  private:
  bool _internal_has_jobid_target() const;
  public:
  void clear_jobid_target();
  uint64_t jobid_target() const;
  void set_jobid_target(uint64_t value);
  private:
  uint64_t _internal_jobid_target() const;
  void _internal_set_jobid_target(uint64_t value);
  public:

  // optional int32 eresult = 13 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // optional int32 transport_error = 17 [default = 1];
  bool has_transport_error() const;
  private:
  bool _internal_has_transport_error() const;
  public:
  void clear_transport_error();
  int32_t transport_error() const;
  void set_transport_error(int32_t value);
  private:
  int32_t _internal_transport_error() const;
  void _internal_set_transport_error(int32_t value);
  public:

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  uint64_t messageid() const;
  void set_messageid(uint64_t value);
  private:
  uint64_t _internal_messageid() const;
  void _internal_set_messageid(uint64_t value);
  public:

  // uint32 ip = 15;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  uint32_t ip() const;
  void set_ip(uint32_t value);
  private:
  uint32_t _internal_ip() const;
  void _internal_set_ip(uint32_t value);
  public:

  // bytes ip_v6 = 29;
  bool has_ip_v6() const;
  private:
  bool _internal_has_ip_v6() const;
  public:
  void clear_ip_v6();
  const std::string& ip_v6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_v6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_v6();
  PROTOBUF_NODISCARD std::string* release_ip_v6();
  void set_allocated_ip_v6(std::string* ip_v6);
  private:
  const std::string& _internal_ip_v6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_v6(const std::string& value);
  std::string* _internal_mutable_ip_v6();
  public:

  void clear_ip_addr();
  IpAddrCase ip_addr_case() const;
  // @@protoc_insertion_point(class_scope:CMsgProtoBufHeader)
 private:
  class _Internal;
  void set_has_ip();
  void set_has_ip_v6();

  inline bool has_ip_addr() const;
  inline void clear_has_ip_addr();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > forward_to_sysid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_job_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wg_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webui_auth_key_;
    ::CMsgGCRoutingProtoBufHeader* routing_gc_;
    uint64_t steamid_;
    int32_t client_sessionid_;
    uint32_t routing_appid_;
    uint32_t auth_account_flags_;
    uint32_t publisher_group_id_;
    uint64_t trace_tag_;
    uint32_t sysid_;
    uint32_t token_source_;
    int32_t seq_num_;
    bool admin_spoofing_user_;
    bool is_from_external_source_;
    uint32_t webapi_key_id_;
    uint32_t cm_sysid_;
    uint32_t launcher_type_;
    uint32_t realm_;
    uint64_t token_id_;
    uint32_t debug_source_string_index_;
    int session_disposition_;
    int32_t timeout_ms_;
    uint64_t jobid_source_;
    uint64_t jobid_target_;
    int32_t eresult_;
    int32_t transport_error_;
    uint64_t messageid_;
    union IpAddrUnion {
      constexpr IpAddrUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t ip_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_v6_;
    } ip_addr_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgMulti final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMulti) */ {
 public:
  inline CMsgMulti() : CMsgMulti(nullptr) {}
  ~CMsgMulti() override;
  explicit PROTOBUF_CONSTEXPR CMsgMulti(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMulti(const CMsgMulti& from);
  CMsgMulti(CMsgMulti&& from) noexcept
    : CMsgMulti() {
    *this = ::std::move(from);
  }

  inline CMsgMulti& operator=(const CMsgMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMulti& operator=(CMsgMulti&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMulti& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMulti* internal_default_instance() {
    return reinterpret_cast<const CMsgMulti*>(
               &_CMsgMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgMulti& a, CMsgMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMulti* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMulti* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMulti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMulti>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMulti& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgMulti& from) {
    CMsgMulti::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMulti* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMulti";
  }
  protected:
  explicit CMsgMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageBodyFieldNumber = 2,
    kSizeUnzippedFieldNumber = 1,
  };
  // optional bytes message_body = 2;
  bool has_message_body() const;
  private:
  bool _internal_has_message_body() const;
  public:
  void clear_message_body();
  const std::string& message_body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_body();
  PROTOBUF_NODISCARD std::string* release_message_body();
  void set_allocated_message_body(std::string* message_body);
  private:
  const std::string& _internal_message_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_body(const std::string& value);
  std::string* _internal_mutable_message_body();
  public:

  // optional uint32 size_unzipped = 1;
  bool has_size_unzipped() const;
  private:
  bool _internal_has_size_unzipped() const;
  public:
  void clear_size_unzipped();
  uint32_t size_unzipped() const;
  void set_size_unzipped(uint32_t value);
  private:
  uint32_t _internal_size_unzipped() const;
  void _internal_set_size_unzipped(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMulti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_body_;
    uint32_t size_unzipped_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgProtobufWrapped final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProtobufWrapped) */ {
 public:
  inline CMsgProtobufWrapped() : CMsgProtobufWrapped(nullptr) {}
  ~CMsgProtobufWrapped() override;
  explicit PROTOBUF_CONSTEXPR CMsgProtobufWrapped(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProtobufWrapped(const CMsgProtobufWrapped& from);
  CMsgProtobufWrapped(CMsgProtobufWrapped&& from) noexcept
    : CMsgProtobufWrapped() {
    *this = ::std::move(from);
  }

  inline CMsgProtobufWrapped& operator=(const CMsgProtobufWrapped& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProtobufWrapped& operator=(CMsgProtobufWrapped&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgProtobufWrapped& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgProtobufWrapped* internal_default_instance() {
    return reinterpret_cast<const CMsgProtobufWrapped*>(
               &_CMsgProtobufWrapped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgProtobufWrapped& a, CMsgProtobufWrapped& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProtobufWrapped* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProtobufWrapped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgProtobufWrapped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgProtobufWrapped>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgProtobufWrapped& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgProtobufWrapped& from) {
    CMsgProtobufWrapped::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProtobufWrapped* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProtobufWrapped";
  }
  protected:
  explicit CMsgProtobufWrapped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageBodyFieldNumber = 1,
  };
  // optional bytes message_body = 1;
  bool has_message_body() const;
  private:
  bool _internal_has_message_body() const;
  public:
  void clear_message_body();
  const std::string& message_body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_body();
  PROTOBUF_NODISCARD std::string* release_message_body();
  void set_allocated_message_body(std::string* message_body);
  private:
  const std::string& _internal_message_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_body(const std::string& value);
  std::string* _internal_mutable_message_body();
  public:

  // @@protoc_insertion_point(class_scope:CMsgProtobufWrapped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_body_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgAuthTicket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAuthTicket) */ {
 public:
  inline CMsgAuthTicket() : CMsgAuthTicket(nullptr) {}
  ~CMsgAuthTicket() override;
  explicit PROTOBUF_CONSTEXPR CMsgAuthTicket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAuthTicket(const CMsgAuthTicket& from);
  CMsgAuthTicket(CMsgAuthTicket&& from) noexcept
    : CMsgAuthTicket() {
    *this = ::std::move(from);
  }

  inline CMsgAuthTicket& operator=(const CMsgAuthTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAuthTicket& operator=(CMsgAuthTicket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAuthTicket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAuthTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgAuthTicket*>(
               &_CMsgAuthTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgAuthTicket& a, CMsgAuthTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAuthTicket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAuthTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAuthTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAuthTicket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAuthTicket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAuthTicket& from) {
    CMsgAuthTicket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAuthTicket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAuthTicket";
  }
  protected:
  explicit CMsgAuthTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 7,
    kServerSecretFieldNumber = 8,
    kSteamidFieldNumber = 3,
    kEstateFieldNumber = 1,
    kHSteamPipeFieldNumber = 5,
    kGameidFieldNumber = 4,
    kTicketCrcFieldNumber = 6,
    kTicketTypeFieldNumber = 9,
    kEresultFieldNumber = 2,
  };
  // optional bytes ticket = 7;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_NODISCARD std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // optional bytes server_secret = 8;
  bool has_server_secret() const;
  private:
  bool _internal_has_server_secret() const;
  public:
  void clear_server_secret();
  const std::string& server_secret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_secret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_secret();
  PROTOBUF_NODISCARD std::string* release_server_secret();
  void set_allocated_server_secret(std::string* server_secret);
  private:
  const std::string& _internal_server_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_secret(const std::string& value);
  std::string* _internal_mutable_server_secret();
  public:

  // optional fixed64 steamid = 3;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 estate = 1;
  bool has_estate() const;
  private:
  bool _internal_has_estate() const;
  public:
  void clear_estate();
  uint32_t estate() const;
  void set_estate(uint32_t value);
  private:
  uint32_t _internal_estate() const;
  void _internal_set_estate(uint32_t value);
  public:

  // optional uint32 h_steam_pipe = 5;
  bool has_h_steam_pipe() const;
  private:
  bool _internal_has_h_steam_pipe() const;
  public:
  void clear_h_steam_pipe();
  uint32_t h_steam_pipe() const;
  void set_h_steam_pipe(uint32_t value);
  private:
  uint32_t _internal_h_steam_pipe() const;
  void _internal_set_h_steam_pipe(uint32_t value);
  public:

  // optional fixed64 gameid = 4;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  uint64_t gameid() const;
  void set_gameid(uint64_t value);
  private:
  uint64_t _internal_gameid() const;
  void _internal_set_gameid(uint64_t value);
  public:

  // optional uint32 ticket_crc = 6;
  bool has_ticket_crc() const;
  private:
  bool _internal_has_ticket_crc() const;
  public:
  void clear_ticket_crc();
  uint32_t ticket_crc() const;
  void set_ticket_crc(uint32_t value);
  private:
  uint32_t _internal_ticket_crc() const;
  void _internal_set_ticket_crc(uint32_t value);
  public:

  // optional uint32 ticket_type = 9;
  bool has_ticket_type() const;
  private:
  bool _internal_has_ticket_type() const;
  public:
  void clear_ticket_type();
  uint32_t ticket_type() const;
  void set_ticket_type(uint32_t value);
  private:
  uint32_t _internal_ticket_type() const;
  void _internal_set_ticket_type(uint32_t value);
  public:

  // optional uint32 eresult = 2 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAuthTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_secret_;
    uint64_t steamid_;
    uint32_t estate_;
    uint32_t h_steam_pipe_;
    uint64_t gameid_;
    uint32_t ticket_crc_;
    uint32_t ticket_type_;
    uint32_t eresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CCDDBAppDetailCommon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCDDBAppDetailCommon) */ {
 public:
  inline CCDDBAppDetailCommon() : CCDDBAppDetailCommon(nullptr) {}
  ~CCDDBAppDetailCommon() override;
  explicit PROTOBUF_CONSTEXPR CCDDBAppDetailCommon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCDDBAppDetailCommon(const CCDDBAppDetailCommon& from);
  CCDDBAppDetailCommon(CCDDBAppDetailCommon&& from) noexcept
    : CCDDBAppDetailCommon() {
    *this = ::std::move(from);
  }

  inline CCDDBAppDetailCommon& operator=(const CCDDBAppDetailCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCDDBAppDetailCommon& operator=(CCDDBAppDetailCommon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCDDBAppDetailCommon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCDDBAppDetailCommon* internal_default_instance() {
    return reinterpret_cast<const CCDDBAppDetailCommon*>(
               &_CCDDBAppDetailCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CCDDBAppDetailCommon& a, CCDDBAppDetailCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(CCDDBAppDetailCommon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCDDBAppDetailCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCDDBAppDetailCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCDDBAppDetailCommon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCDDBAppDetailCommon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCDDBAppDetailCommon& from) {
    CCDDBAppDetailCommon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCDDBAppDetailCommon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCDDBAppDetailCommon";
  }
  protected:
  explicit CCDDBAppDetailCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentDescriptoridsFieldNumber = 17,
    kNameFieldNumber = 2,
    kIconFieldNumber = 3,
    kFriendlyNameFieldNumber = 10,
    kPropagationFieldNumber = 11,
    kAppidFieldNumber = 1,
    kToolFieldNumber = 6,
    kDemoFieldNumber = 7,
    kMediaFieldNumber = 8,
    kCommunityVisibleStatsFieldNumber = 9,
    kAppTypeFieldNumber = 14,
    kHasAdultContentFieldNumber = 12,
    kIsVisibleInSteamChinaFieldNumber = 13,
    kHasAdultContentSexFieldNumber = 15,
    kHasAdultContentViolenceFieldNumber = 16,
  };
  // repeated uint32 content_descriptorids = 17;
  int content_descriptorids_size() const;
  private:
  int _internal_content_descriptorids_size() const;
  public:
  void clear_content_descriptorids();
  private:
  uint32_t _internal_content_descriptorids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_content_descriptorids() const;
  void _internal_add_content_descriptorids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_content_descriptorids();
  public:
  uint32_t content_descriptorids(int index) const;
  void set_content_descriptorids(int index, uint32_t value);
  void add_content_descriptorids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      content_descriptorids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_content_descriptorids();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string icon = 3;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // optional string friendly_name = 10;
  bool has_friendly_name() const;
  private:
  bool _internal_has_friendly_name() const;
  public:
  void clear_friendly_name();
  const std::string& friendly_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friendly_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friendly_name();
  PROTOBUF_NODISCARD std::string* release_friendly_name();
  void set_allocated_friendly_name(std::string* friendly_name);
  private:
  const std::string& _internal_friendly_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendly_name(const std::string& value);
  std::string* _internal_mutable_friendly_name();
  public:

  // optional string propagation = 11;
  bool has_propagation() const;
  private:
  bool _internal_has_propagation() const;
  public:
  void clear_propagation();
  const std::string& propagation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_propagation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_propagation();
  PROTOBUF_NODISCARD std::string* release_propagation();
  void set_allocated_propagation(std::string* propagation);
  private:
  const std::string& _internal_propagation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_propagation(const std::string& value);
  std::string* _internal_mutable_propagation();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool tool = 6;
  bool has_tool() const;
  private:
  bool _internal_has_tool() const;
  public:
  void clear_tool();
  bool tool() const;
  void set_tool(bool value);
  private:
  bool _internal_tool() const;
  void _internal_set_tool(bool value);
  public:

  // optional bool demo = 7;
  bool has_demo() const;
  private:
  bool _internal_has_demo() const;
  public:
  void clear_demo();
  bool demo() const;
  void set_demo(bool value);
  private:
  bool _internal_demo() const;
  void _internal_set_demo(bool value);
  public:

  // optional bool media = 8;
  bool has_media() const;
  private:
  bool _internal_has_media() const;
  public:
  void clear_media();
  bool media() const;
  void set_media(bool value);
  private:
  bool _internal_media() const;
  void _internal_set_media(bool value);
  public:

  // optional bool community_visible_stats = 9;
  bool has_community_visible_stats() const;
  private:
  bool _internal_has_community_visible_stats() const;
  public:
  void clear_community_visible_stats();
  bool community_visible_stats() const;
  void set_community_visible_stats(bool value);
  private:
  bool _internal_community_visible_stats() const;
  void _internal_set_community_visible_stats(bool value);
  public:

  // optional uint32 app_type = 14;
  bool has_app_type() const;
  private:
  bool _internal_has_app_type() const;
  public:
  void clear_app_type();
  uint32_t app_type() const;
  void set_app_type(uint32_t value);
  private:
  uint32_t _internal_app_type() const;
  void _internal_set_app_type(uint32_t value);
  public:

  // optional bool has_adult_content = 12;
  bool has_has_adult_content() const;
  private:
  bool _internal_has_has_adult_content() const;
  public:
  void clear_has_adult_content();
  bool has_adult_content() const;
  void set_has_adult_content(bool value);
  private:
  bool _internal_has_adult_content() const;
  void _internal_set_has_adult_content(bool value);
  public:

  // optional bool is_visible_in_steam_china = 13;
  bool has_is_visible_in_steam_china() const;
  private:
  bool _internal_has_is_visible_in_steam_china() const;
  public:
  void clear_is_visible_in_steam_china();
  bool is_visible_in_steam_china() const;
  void set_is_visible_in_steam_china(bool value);
  private:
  bool _internal_is_visible_in_steam_china() const;
  void _internal_set_is_visible_in_steam_china(bool value);
  public:

  // optional bool has_adult_content_sex = 15;
  bool has_has_adult_content_sex() const;
  private:
  bool _internal_has_has_adult_content_sex() const;
  public:
  void clear_has_adult_content_sex();
  bool has_adult_content_sex() const;
  void set_has_adult_content_sex(bool value);
  private:
  bool _internal_has_adult_content_sex() const;
  void _internal_set_has_adult_content_sex(bool value);
  public:

  // optional bool has_adult_content_violence = 16;
  bool has_has_adult_content_violence() const;
  private:
  bool _internal_has_has_adult_content_violence() const;
  public:
  void clear_has_adult_content_violence();
  bool has_adult_content_violence() const;
  void set_has_adult_content_violence(bool value);
  private:
  bool _internal_has_adult_content_violence() const;
  void _internal_set_has_adult_content_violence(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCDDBAppDetailCommon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > content_descriptorids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendly_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr propagation_;
    uint32_t appid_;
    bool tool_;
    bool demo_;
    bool media_;
    bool community_visible_stats_;
    uint32_t app_type_;
    bool has_adult_content_;
    bool is_visible_in_steam_china_;
    bool has_adult_content_sex_;
    bool has_adult_content_violence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgAppRights final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAppRights) */ {
 public:
  inline CMsgAppRights() : CMsgAppRights(nullptr) {}
  ~CMsgAppRights() override;
  explicit PROTOBUF_CONSTEXPR CMsgAppRights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAppRights(const CMsgAppRights& from);
  CMsgAppRights(CMsgAppRights&& from) noexcept
    : CMsgAppRights() {
    *this = ::std::move(from);
  }

  inline CMsgAppRights& operator=(const CMsgAppRights& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAppRights& operator=(CMsgAppRights&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAppRights& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAppRights* internal_default_instance() {
    return reinterpret_cast<const CMsgAppRights*>(
               &_CMsgAppRights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgAppRights& a, CMsgAppRights& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAppRights* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAppRights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAppRights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAppRights>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAppRights& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAppRights& from) {
    CMsgAppRights::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAppRights* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAppRights";
  }
  protected:
  explicit CMsgAppRights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEditInfoFieldNumber = 1,
    kPublishFieldNumber = 2,
    kViewErrorDataFieldNumber = 3,
    kDownloadFieldNumber = 4,
    kUploadCdkeysFieldNumber = 5,
    kGenerateCdkeysFieldNumber = 6,
    kViewFinancialsFieldNumber = 7,
    kManageCegFieldNumber = 8,
    kManageSigningFieldNumber = 9,
    kManageCdkeysFieldNumber = 10,
    kEditMarketingFieldNumber = 11,
    kEconomySupportFieldNumber = 12,
    kEconomySupportSupervisorFieldNumber = 13,
    kManagePricingFieldNumber = 14,
    kBroadcastLiveFieldNumber = 15,
    kViewMarketingTrafficFieldNumber = 16,
    kEditStoreDisplayContentFieldNumber = 17,
  };
  // optional bool edit_info = 1;
  bool has_edit_info() const;
  private:
  bool _internal_has_edit_info() const;
  public:
  void clear_edit_info();
  bool edit_info() const;
  void set_edit_info(bool value);
  private:
  bool _internal_edit_info() const;
  void _internal_set_edit_info(bool value);
  public:

  // optional bool publish = 2;
  bool has_publish() const;
  private:
  bool _internal_has_publish() const;
  public:
  void clear_publish();
  bool publish() const;
  void set_publish(bool value);
  private:
  bool _internal_publish() const;
  void _internal_set_publish(bool value);
  public:

  // optional bool view_error_data = 3;
  bool has_view_error_data() const;
  private:
  bool _internal_has_view_error_data() const;
  public:
  void clear_view_error_data();
  bool view_error_data() const;
  void set_view_error_data(bool value);
  private:
  bool _internal_view_error_data() const;
  void _internal_set_view_error_data(bool value);
  public:

  // optional bool download = 4;
  bool has_download() const;
  private:
  bool _internal_has_download() const;
  public:
  void clear_download();
  bool download() const;
  void set_download(bool value);
  private:
  bool _internal_download() const;
  void _internal_set_download(bool value);
  public:

  // optional bool upload_cdkeys = 5;
  bool has_upload_cdkeys() const;
  private:
  bool _internal_has_upload_cdkeys() const;
  public:
  void clear_upload_cdkeys();
  bool upload_cdkeys() const;
  void set_upload_cdkeys(bool value);
  private:
  bool _internal_upload_cdkeys() const;
  void _internal_set_upload_cdkeys(bool value);
  public:

  // optional bool generate_cdkeys = 6;
  bool has_generate_cdkeys() const;
  private:
  bool _internal_has_generate_cdkeys() const;
  public:
  void clear_generate_cdkeys();
  bool generate_cdkeys() const;
  void set_generate_cdkeys(bool value);
  private:
  bool _internal_generate_cdkeys() const;
  void _internal_set_generate_cdkeys(bool value);
  public:

  // optional bool view_financials = 7;
  bool has_view_financials() const;
  private:
  bool _internal_has_view_financials() const;
  public:
  void clear_view_financials();
  bool view_financials() const;
  void set_view_financials(bool value);
  private:
  bool _internal_view_financials() const;
  void _internal_set_view_financials(bool value);
  public:

  // optional bool manage_ceg = 8;
  bool has_manage_ceg() const;
  private:
  bool _internal_has_manage_ceg() const;
  public:
  void clear_manage_ceg();
  bool manage_ceg() const;
  void set_manage_ceg(bool value);
  private:
  bool _internal_manage_ceg() const;
  void _internal_set_manage_ceg(bool value);
  public:

  // optional bool manage_signing = 9;
  bool has_manage_signing() const;
  private:
  bool _internal_has_manage_signing() const;
  public:
  void clear_manage_signing();
  bool manage_signing() const;
  void set_manage_signing(bool value);
  private:
  bool _internal_manage_signing() const;
  void _internal_set_manage_signing(bool value);
  public:

  // optional bool manage_cdkeys = 10;
  bool has_manage_cdkeys() const;
  private:
  bool _internal_has_manage_cdkeys() const;
  public:
  void clear_manage_cdkeys();
  bool manage_cdkeys() const;
  void set_manage_cdkeys(bool value);
  private:
  bool _internal_manage_cdkeys() const;
  void _internal_set_manage_cdkeys(bool value);
  public:

  // optional bool edit_marketing = 11;
  bool has_edit_marketing() const;
  private:
  bool _internal_has_edit_marketing() const;
  public:
  void clear_edit_marketing();
  bool edit_marketing() const;
  void set_edit_marketing(bool value);
  private:
  bool _internal_edit_marketing() const;
  void _internal_set_edit_marketing(bool value);
  public:

  // optional bool economy_support = 12;
  bool has_economy_support() const;
  private:
  bool _internal_has_economy_support() const;
  public:
  void clear_economy_support();
  bool economy_support() const;
  void set_economy_support(bool value);
  private:
  bool _internal_economy_support() const;
  void _internal_set_economy_support(bool value);
  public:

  // optional bool economy_support_supervisor = 13;
  bool has_economy_support_supervisor() const;
  private:
  bool _internal_has_economy_support_supervisor() const;
  public:
  void clear_economy_support_supervisor();
  bool economy_support_supervisor() const;
  void set_economy_support_supervisor(bool value);
  private:
  bool _internal_economy_support_supervisor() const;
  void _internal_set_economy_support_supervisor(bool value);
  public:

  // optional bool manage_pricing = 14;
  bool has_manage_pricing() const;
  private:
  bool _internal_has_manage_pricing() const;
  public:
  void clear_manage_pricing();
  bool manage_pricing() const;
  void set_manage_pricing(bool value);
  private:
  bool _internal_manage_pricing() const;
  void _internal_set_manage_pricing(bool value);
  public:

  // optional bool broadcast_live = 15;
  bool has_broadcast_live() const;
  private:
  bool _internal_has_broadcast_live() const;
  public:
  void clear_broadcast_live();
  bool broadcast_live() const;
  void set_broadcast_live(bool value);
  private:
  bool _internal_broadcast_live() const;
  void _internal_set_broadcast_live(bool value);
  public:

  // optional bool view_marketing_traffic = 16;
  bool has_view_marketing_traffic() const;
  private:
  bool _internal_has_view_marketing_traffic() const;
  public:
  void clear_view_marketing_traffic();
  bool view_marketing_traffic() const;
  void set_view_marketing_traffic(bool value);
  private:
  bool _internal_view_marketing_traffic() const;
  void _internal_set_view_marketing_traffic(bool value);
  public:

  // optional bool edit_store_display_content = 17;
  bool has_edit_store_display_content() const;
  private:
  bool _internal_has_edit_store_display_content() const;
  public:
  void clear_edit_store_display_content();
  bool edit_store_display_content() const;
  void set_edit_store_display_content(bool value);
  private:
  bool _internal_edit_store_display_content() const;
  void _internal_set_edit_store_display_content(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAppRights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool edit_info_;
    bool publish_;
    bool view_error_data_;
    bool download_;
    bool upload_cdkeys_;
    bool generate_cdkeys_;
    bool view_financials_;
    bool manage_ceg_;
    bool manage_signing_;
    bool manage_cdkeys_;
    bool edit_marketing_;
    bool economy_support_;
    bool economy_support_supervisor_;
    bool manage_pricing_;
    bool broadcast_live_;
    bool view_marketing_traffic_;
    bool edit_store_display_content_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CCuratorPreferences final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCuratorPreferences) */ {
 public:
  inline CCuratorPreferences() : CCuratorPreferences(nullptr) {}
  ~CCuratorPreferences() override;
  explicit PROTOBUF_CONSTEXPR CCuratorPreferences(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCuratorPreferences(const CCuratorPreferences& from);
  CCuratorPreferences(CCuratorPreferences&& from) noexcept
    : CCuratorPreferences() {
    *this = ::std::move(from);
  }

  inline CCuratorPreferences& operator=(const CCuratorPreferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCuratorPreferences& operator=(CCuratorPreferences&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCuratorPreferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCuratorPreferences* internal_default_instance() {
    return reinterpret_cast<const CCuratorPreferences*>(
               &_CCuratorPreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CCuratorPreferences& a, CCuratorPreferences& b) {
    a.Swap(&b);
  }
  inline void Swap(CCuratorPreferences* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCuratorPreferences* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCuratorPreferences* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCuratorPreferences>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCuratorPreferences& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCuratorPreferences& from) {
    CCuratorPreferences::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCuratorPreferences* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCuratorPreferences";
  }
  protected:
  explicit CCuratorPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagidsCuratedFieldNumber = 9,
    kTagidsFilteredFieldNumber = 10,
    kWebsiteTitleFieldNumber = 11,
    kWebsiteUrlFieldNumber = 12,
    kDiscussionUrlFieldNumber = 13,
    kSupportedLanguagesFieldNumber = 1,
    kPlatformWindowsFieldNumber = 2,
    kPlatformMacFieldNumber = 3,
    kPlatformLinuxFieldNumber = 4,
    kVrContentFieldNumber = 5,
    kTimestampUpdatedFieldNumber = 8,
    kAdultContentViolenceFieldNumber = 6,
    kAdultContentSexFieldNumber = 7,
    kShowBroadcastFieldNumber = 14,
  };
  // repeated uint32 tagids_curated = 9;
  int tagids_curated_size() const;
  private:
  int _internal_tagids_curated_size() const;
  public:
  void clear_tagids_curated();
  private:
  uint32_t _internal_tagids_curated(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_tagids_curated() const;
  void _internal_add_tagids_curated(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_tagids_curated();
  public:
  uint32_t tagids_curated(int index) const;
  void set_tagids_curated(int index, uint32_t value);
  void add_tagids_curated(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      tagids_curated() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_tagids_curated();

  // repeated uint32 tagids_filtered = 10;
  int tagids_filtered_size() const;
  private:
  int _internal_tagids_filtered_size() const;
  public:
  void clear_tagids_filtered();
  private:
  uint32_t _internal_tagids_filtered(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_tagids_filtered() const;
  void _internal_add_tagids_filtered(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_tagids_filtered();
  public:
  uint32_t tagids_filtered(int index) const;
  void set_tagids_filtered(int index, uint32_t value);
  void add_tagids_filtered(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      tagids_filtered() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_tagids_filtered();

  // optional string website_title = 11;
  bool has_website_title() const;
  private:
  bool _internal_has_website_title() const;
  public:
  void clear_website_title();
  const std::string& website_title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_website_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_website_title();
  PROTOBUF_NODISCARD std::string* release_website_title();
  void set_allocated_website_title(std::string* website_title);
  private:
  const std::string& _internal_website_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_website_title(const std::string& value);
  std::string* _internal_mutable_website_title();
  public:

  // optional string website_url = 12;
  bool has_website_url() const;
  private:
  bool _internal_has_website_url() const;
  public:
  void clear_website_url();
  const std::string& website_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_website_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_website_url();
  PROTOBUF_NODISCARD std::string* release_website_url();
  void set_allocated_website_url(std::string* website_url);
  private:
  const std::string& _internal_website_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_website_url(const std::string& value);
  std::string* _internal_mutable_website_url();
  public:

  // optional string discussion_url = 13;
  bool has_discussion_url() const;
  private:
  bool _internal_has_discussion_url() const;
  public:
  void clear_discussion_url();
  const std::string& discussion_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_discussion_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_discussion_url();
  PROTOBUF_NODISCARD std::string* release_discussion_url();
  void set_allocated_discussion_url(std::string* discussion_url);
  private:
  const std::string& _internal_discussion_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_discussion_url(const std::string& value);
  std::string* _internal_mutable_discussion_url();
  public:

  // optional uint32 supported_languages = 1;
  bool has_supported_languages() const;
  private:
  bool _internal_has_supported_languages() const;
  public:
  void clear_supported_languages();
  uint32_t supported_languages() const;
  void set_supported_languages(uint32_t value);
  private:
  uint32_t _internal_supported_languages() const;
  void _internal_set_supported_languages(uint32_t value);
  public:

  // optional bool platform_windows = 2;
  bool has_platform_windows() const;
  private:
  bool _internal_has_platform_windows() const;
  public:
  void clear_platform_windows();
  bool platform_windows() const;
  void set_platform_windows(bool value);
  private:
  bool _internal_platform_windows() const;
  void _internal_set_platform_windows(bool value);
  public:

  // optional bool platform_mac = 3;
  bool has_platform_mac() const;
  private:
  bool _internal_has_platform_mac() const;
  public:
  void clear_platform_mac();
  bool platform_mac() const;
  void set_platform_mac(bool value);
  private:
  bool _internal_platform_mac() const;
  void _internal_set_platform_mac(bool value);
  public:

  // optional bool platform_linux = 4;
  bool has_platform_linux() const;
  private:
  bool _internal_has_platform_linux() const;
  public:
  void clear_platform_linux();
  bool platform_linux() const;
  void set_platform_linux(bool value);
  private:
  bool _internal_platform_linux() const;
  void _internal_set_platform_linux(bool value);
  public:

  // optional bool vr_content = 5;
  bool has_vr_content() const;
  private:
  bool _internal_has_vr_content() const;
  public:
  void clear_vr_content();
  bool vr_content() const;
  void set_vr_content(bool value);
  private:
  bool _internal_vr_content() const;
  void _internal_set_vr_content(bool value);
  public:

  // optional uint32 timestamp_updated = 8;
  bool has_timestamp_updated() const;
  private:
  bool _internal_has_timestamp_updated() const;
  public:
  void clear_timestamp_updated();
  uint32_t timestamp_updated() const;
  void set_timestamp_updated(uint32_t value);
  private:
  uint32_t _internal_timestamp_updated() const;
  void _internal_set_timestamp_updated(uint32_t value);
  public:

  // optional bool adult_content_violence = 6;
  bool has_adult_content_violence() const;
  private:
  bool _internal_has_adult_content_violence() const;
  public:
  void clear_adult_content_violence();
  bool adult_content_violence() const;
  void set_adult_content_violence(bool value);
  private:
  bool _internal_adult_content_violence() const;
  void _internal_set_adult_content_violence(bool value);
  public:

  // optional bool adult_content_sex = 7;
  bool has_adult_content_sex() const;
  private:
  bool _internal_has_adult_content_sex() const;
  public:
  void clear_adult_content_sex();
  bool adult_content_sex() const;
  void set_adult_content_sex(bool value);
  private:
  bool _internal_adult_content_sex() const;
  void _internal_set_adult_content_sex(bool value);
  public:

  // optional bool show_broadcast = 14;
  bool has_show_broadcast() const;
  private:
  bool _internal_has_show_broadcast() const;
  public:
  void clear_show_broadcast();
  bool show_broadcast() const;
  void set_show_broadcast(bool value);
  private:
  bool _internal_show_broadcast() const;
  void _internal_set_show_broadcast(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCuratorPreferences)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > tagids_curated_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > tagids_filtered_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr website_title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr website_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr discussion_url_;
    uint32_t supported_languages_;
    bool platform_windows_;
    bool platform_mac_;
    bool platform_linux_;
    bool vr_content_;
    uint32_t timestamp_updated_;
    bool adult_content_violence_;
    bool adult_content_sex_;
    bool show_broadcast_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CLocalizationToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLocalizationToken) */ {
 public:
  inline CLocalizationToken() : CLocalizationToken(nullptr) {}
  ~CLocalizationToken() override;
  explicit PROTOBUF_CONSTEXPR CLocalizationToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLocalizationToken(const CLocalizationToken& from);
  CLocalizationToken(CLocalizationToken&& from) noexcept
    : CLocalizationToken() {
    *this = ::std::move(from);
  }

  inline CLocalizationToken& operator=(const CLocalizationToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLocalizationToken& operator=(CLocalizationToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CLocalizationToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLocalizationToken* internal_default_instance() {
    return reinterpret_cast<const CLocalizationToken*>(
               &_CLocalizationToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CLocalizationToken& a, CLocalizationToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CLocalizationToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLocalizationToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CLocalizationToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CLocalizationToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CLocalizationToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CLocalizationToken& from) {
    CLocalizationToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLocalizationToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLocalizationToken";
  }
  protected:
  explicit CLocalizationToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalizedStringFieldNumber = 2,
    kLanguageFieldNumber = 1,
  };
  // optional string localized_string = 2;
  bool has_localized_string() const;
  private:
  bool _internal_has_localized_string() const;
  public:
  void clear_localized_string();
  const std::string& localized_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localized_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localized_string();
  PROTOBUF_NODISCARD std::string* release_localized_string();
  void set_allocated_localized_string(std::string* localized_string);
  private:
  const std::string& _internal_localized_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localized_string(const std::string& value);
  std::string* _internal_mutable_localized_string();
  public:

  // optional uint32 language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  uint32_t language() const;
  void set_language(uint32_t value);
  private:
  uint32_t _internal_language() const;
  void _internal_set_language(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CLocalizationToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localized_string_;
    uint32_t language_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CClanEventUserNewsTuple final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClanEventUserNewsTuple) */ {
 public:
  inline CClanEventUserNewsTuple() : CClanEventUserNewsTuple(nullptr) {}
  ~CClanEventUserNewsTuple() override;
  explicit PROTOBUF_CONSTEXPR CClanEventUserNewsTuple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClanEventUserNewsTuple(const CClanEventUserNewsTuple& from);
  CClanEventUserNewsTuple(CClanEventUserNewsTuple&& from) noexcept
    : CClanEventUserNewsTuple() {
    *this = ::std::move(from);
  }

  inline CClanEventUserNewsTuple& operator=(const CClanEventUserNewsTuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClanEventUserNewsTuple& operator=(CClanEventUserNewsTuple&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClanEventUserNewsTuple& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClanEventUserNewsTuple* internal_default_instance() {
    return reinterpret_cast<const CClanEventUserNewsTuple*>(
               &_CClanEventUserNewsTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CClanEventUserNewsTuple& a, CClanEventUserNewsTuple& b) {
    a.Swap(&b);
  }
  inline void Swap(CClanEventUserNewsTuple* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClanEventUserNewsTuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClanEventUserNewsTuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClanEventUserNewsTuple>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClanEventUserNewsTuple& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CClanEventUserNewsTuple& from) {
    CClanEventUserNewsTuple::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClanEventUserNewsTuple* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClanEventUserNewsTuple";
  }
  protected:
  explicit CClanEventUserNewsTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventGidFieldNumber = 2,
    kClanidFieldNumber = 1,
    kRtimeStartFieldNumber = 4,
    kAnnouncementGidFieldNumber = 3,
    kRtimeEndFieldNumber = 5,
    kPriorityScoreFieldNumber = 6,
    kTypeFieldNumber = 7,
    kClampRangeSlotFieldNumber = 8,
    kAppidFieldNumber = 9,
    kRtime32LastModifiedFieldNumber = 10,
  };
  // optional fixed64 event_gid = 2;
  bool has_event_gid() const;
  private:
  bool _internal_has_event_gid() const;
  public:
  void clear_event_gid();
  uint64_t event_gid() const;
  void set_event_gid(uint64_t value);
  private:
  uint64_t _internal_event_gid() const;
  void _internal_set_event_gid(uint64_t value);
  public:

  // optional uint32 clanid = 1;
  bool has_clanid() const;
  private:
  bool _internal_has_clanid() const;
  public:
  void clear_clanid();
  uint32_t clanid() const;
  void set_clanid(uint32_t value);
  private:
  uint32_t _internal_clanid() const;
  void _internal_set_clanid(uint32_t value);
  public:

  // optional uint32 rtime_start = 4;
  bool has_rtime_start() const;
  private:
  bool _internal_has_rtime_start() const;
  public:
  void clear_rtime_start();
  uint32_t rtime_start() const;
  void set_rtime_start(uint32_t value);
  private:
  uint32_t _internal_rtime_start() const;
  void _internal_set_rtime_start(uint32_t value);
  public:

  // optional fixed64 announcement_gid = 3;
  bool has_announcement_gid() const;
  private:
  bool _internal_has_announcement_gid() const;
  public:
  void clear_announcement_gid();
  uint64_t announcement_gid() const;
  void set_announcement_gid(uint64_t value);
  private:
  uint64_t _internal_announcement_gid() const;
  void _internal_set_announcement_gid(uint64_t value);
  public:

  // optional uint32 rtime_end = 5;
  bool has_rtime_end() const;
  private:
  bool _internal_has_rtime_end() const;
  public:
  void clear_rtime_end();
  uint32_t rtime_end() const;
  void set_rtime_end(uint32_t value);
  private:
  uint32_t _internal_rtime_end() const;
  void _internal_set_rtime_end(uint32_t value);
  public:

  // optional uint32 priority_score = 6;
  bool has_priority_score() const;
  private:
  bool _internal_has_priority_score() const;
  public:
  void clear_priority_score();
  uint32_t priority_score() const;
  void set_priority_score(uint32_t value);
  private:
  uint32_t _internal_priority_score() const;
  void _internal_set_priority_score(uint32_t value);
  public:

  // optional uint32 type = 7;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional uint32 clamp_range_slot = 8;
  bool has_clamp_range_slot() const;
  private:
  bool _internal_has_clamp_range_slot() const;
  public:
  void clear_clamp_range_slot();
  uint32_t clamp_range_slot() const;
  void set_clamp_range_slot(uint32_t value);
  private:
  uint32_t _internal_clamp_range_slot() const;
  void _internal_set_clamp_range_slot(uint32_t value);
  public:

  // optional uint32 appid = 9;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 rtime32_last_modified = 10;
  bool has_rtime32_last_modified() const;
  private:
  bool _internal_has_rtime32_last_modified() const;
  public:
  void clear_rtime32_last_modified();
  uint32_t rtime32_last_modified() const;
  void set_rtime32_last_modified(uint32_t value);
  private:
  uint32_t _internal_rtime32_last_modified() const;
  void _internal_set_rtime32_last_modified(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClanEventUserNewsTuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t event_gid_;
    uint32_t clanid_;
    uint32_t rtime_start_;
    uint64_t announcement_gid_;
    uint32_t rtime_end_;
    uint32_t priority_score_;
    uint32_t type_;
    uint32_t clamp_range_slot_;
    uint32_t appid_;
    uint32_t rtime32_last_modified_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CClanMatchEventByRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClanMatchEventByRange) */ {
 public:
  inline CClanMatchEventByRange() : CClanMatchEventByRange(nullptr) {}
  ~CClanMatchEventByRange() override;
  explicit PROTOBUF_CONSTEXPR CClanMatchEventByRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClanMatchEventByRange(const CClanMatchEventByRange& from);
  CClanMatchEventByRange(CClanMatchEventByRange&& from) noexcept
    : CClanMatchEventByRange() {
    *this = ::std::move(from);
  }

  inline CClanMatchEventByRange& operator=(const CClanMatchEventByRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClanMatchEventByRange& operator=(CClanMatchEventByRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClanMatchEventByRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClanMatchEventByRange* internal_default_instance() {
    return reinterpret_cast<const CClanMatchEventByRange*>(
               &_CClanMatchEventByRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CClanMatchEventByRange& a, CClanMatchEventByRange& b) {
    a.Swap(&b);
  }
  inline void Swap(CClanMatchEventByRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClanMatchEventByRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClanMatchEventByRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClanMatchEventByRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClanMatchEventByRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CClanMatchEventByRange& from) {
    CClanMatchEventByRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClanMatchEventByRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClanMatchEventByRange";
  }
  protected:
  explicit CClanMatchEventByRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 4,
    kRtimeBeforeFieldNumber = 1,
    kRtimeAfterFieldNumber = 2,
    kQualifiedFieldNumber = 3,
  };
  // repeated .CClanEventUserNewsTuple events = 4;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::CClanEventUserNewsTuple* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClanEventUserNewsTuple >*
      mutable_events();
  private:
  const ::CClanEventUserNewsTuple& _internal_events(int index) const;
  ::CClanEventUserNewsTuple* _internal_add_events();
  public:
  const ::CClanEventUserNewsTuple& events(int index) const;
  ::CClanEventUserNewsTuple* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClanEventUserNewsTuple >&
      events() const;

  // optional uint32 rtime_before = 1;
  bool has_rtime_before() const;
  private:
  bool _internal_has_rtime_before() const;
  public:
  void clear_rtime_before();
  uint32_t rtime_before() const;
  void set_rtime_before(uint32_t value);
  private:
  uint32_t _internal_rtime_before() const;
  void _internal_set_rtime_before(uint32_t value);
  public:

  // optional uint32 rtime_after = 2;
  bool has_rtime_after() const;
  private:
  bool _internal_has_rtime_after() const;
  public:
  void clear_rtime_after();
  uint32_t rtime_after() const;
  void set_rtime_after(uint32_t value);
  private:
  uint32_t _internal_rtime_after() const;
  void _internal_set_rtime_after(uint32_t value);
  public:

  // optional uint32 qualified = 3;
  bool has_qualified() const;
  private:
  bool _internal_has_qualified() const;
  public:
  void clear_qualified();
  uint32_t qualified() const;
  void set_qualified(uint32_t value);
  private:
  uint32_t _internal_qualified() const;
  void _internal_set_qualified(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClanMatchEventByRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClanEventUserNewsTuple > events_;
    uint32_t rtime_before_;
    uint32_t rtime_after_;
    uint32_t qualified_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_ClanAnnouncementInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_ClanAnnouncementInfo) */ {
 public:
  inline CCommunity_ClanAnnouncementInfo() : CCommunity_ClanAnnouncementInfo(nullptr) {}
  ~CCommunity_ClanAnnouncementInfo() override;
  explicit PROTOBUF_CONSTEXPR CCommunity_ClanAnnouncementInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_ClanAnnouncementInfo(const CCommunity_ClanAnnouncementInfo& from);
  CCommunity_ClanAnnouncementInfo(CCommunity_ClanAnnouncementInfo&& from) noexcept
    : CCommunity_ClanAnnouncementInfo() {
    *this = ::std::move(from);
  }

  inline CCommunity_ClanAnnouncementInfo& operator=(const CCommunity_ClanAnnouncementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_ClanAnnouncementInfo& operator=(CCommunity_ClanAnnouncementInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_ClanAnnouncementInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_ClanAnnouncementInfo* internal_default_instance() {
    return reinterpret_cast<const CCommunity_ClanAnnouncementInfo*>(
               &_CCommunity_ClanAnnouncementInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CCommunity_ClanAnnouncementInfo& a, CCommunity_ClanAnnouncementInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_ClanAnnouncementInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_ClanAnnouncementInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_ClanAnnouncementInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_ClanAnnouncementInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_ClanAnnouncementInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCommunity_ClanAnnouncementInfo& from) {
    CCommunity_ClanAnnouncementInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_ClanAnnouncementInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_ClanAnnouncementInfo";
  }
  protected:
  explicit CCommunity_ClanAnnouncementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 9,
    kHeadlineFieldNumber = 4,
    kBodyFieldNumber = 7,
    kGidFieldNumber = 1,
    kClanidFieldNumber = 2,
    kPosteridFieldNumber = 3,
    kPosttimeFieldNumber = 5,
    kUpdatetimeFieldNumber = 6,
    kCommentcountFieldNumber = 8,
    kLanguageFieldNumber = 10,
    kForumTopicIdFieldNumber = 12,
    kEventGidFieldNumber = 13,
    kVoteupcountFieldNumber = 14,
    kHiddenFieldNumber = 11,
    kBannedFieldNumber = 17,
    kVotedowncountFieldNumber = 15,
    kBanCheckResultFieldNumber = 16,
  };
  // repeated string tags = 9;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // optional string headline = 4;
  bool has_headline() const;
  private:
  bool _internal_has_headline() const;
  public:
  void clear_headline();
  const std::string& headline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_headline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_headline();
  PROTOBUF_NODISCARD std::string* release_headline();
  void set_allocated_headline(std::string* headline);
  private:
  const std::string& _internal_headline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_headline(const std::string& value);
  std::string* _internal_mutable_headline();
  public:

  // optional string body = 7;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional uint64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // optional uint64 clanid = 2;
  bool has_clanid() const;
  private:
  bool _internal_has_clanid() const;
  public:
  void clear_clanid();
  uint64_t clanid() const;
  void set_clanid(uint64_t value);
  private:
  uint64_t _internal_clanid() const;
  void _internal_set_clanid(uint64_t value);
  public:

  // optional uint64 posterid = 3;
  bool has_posterid() const;
  private:
  bool _internal_has_posterid() const;
  public:
  void clear_posterid();
  uint64_t posterid() const;
  void set_posterid(uint64_t value);
  private:
  uint64_t _internal_posterid() const;
  void _internal_set_posterid(uint64_t value);
  public:

  // optional uint32 posttime = 5;
  bool has_posttime() const;
  private:
  bool _internal_has_posttime() const;
  public:
  void clear_posttime();
  uint32_t posttime() const;
  void set_posttime(uint32_t value);
  private:
  uint32_t _internal_posttime() const;
  void _internal_set_posttime(uint32_t value);
  public:

  // optional uint32 updatetime = 6;
  bool has_updatetime() const;
  private:
  bool _internal_has_updatetime() const;
  public:
  void clear_updatetime();
  uint32_t updatetime() const;
  void set_updatetime(uint32_t value);
  private:
  uint32_t _internal_updatetime() const;
  void _internal_set_updatetime(uint32_t value);
  public:

  // optional int32 commentcount = 8;
  bool has_commentcount() const;
  private:
  bool _internal_has_commentcount() const;
  public:
  void clear_commentcount();
  int32_t commentcount() const;
  void set_commentcount(int32_t value);
  private:
  int32_t _internal_commentcount() const;
  void _internal_set_commentcount(int32_t value);
  public:

  // optional int32 language = 10;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // optional fixed64 forum_topic_id = 12;
  bool has_forum_topic_id() const;
  private:
  bool _internal_has_forum_topic_id() const;
  public:
  void clear_forum_topic_id();
  uint64_t forum_topic_id() const;
  void set_forum_topic_id(uint64_t value);
  private:
  uint64_t _internal_forum_topic_id() const;
  void _internal_set_forum_topic_id(uint64_t value);
  public:

  // optional fixed64 event_gid = 13;
  bool has_event_gid() const;
  private:
  bool _internal_has_event_gid() const;
  public:
  void clear_event_gid();
  uint64_t event_gid() const;
  void set_event_gid(uint64_t value);
  private:
  uint64_t _internal_event_gid() const;
  void _internal_set_event_gid(uint64_t value);
  public:

  // optional int32 voteupcount = 14;
  bool has_voteupcount() const;
  private:
  bool _internal_has_voteupcount() const;
  public:
  void clear_voteupcount();
  int32_t voteupcount() const;
  void set_voteupcount(int32_t value);
  private:
  int32_t _internal_voteupcount() const;
  void _internal_set_voteupcount(int32_t value);
  public:

  // optional bool hidden = 11;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // optional bool banned = 17;
  bool has_banned() const;
  private:
  bool _internal_has_banned() const;
  public:
  void clear_banned();
  bool banned() const;
  void set_banned(bool value);
  private:
  bool _internal_banned() const;
  void _internal_set_banned(bool value);
  public:

  // optional int32 votedowncount = 15;
  bool has_votedowncount() const;
  private:
  bool _internal_has_votedowncount() const;
  public:
  void clear_votedowncount();
  int32_t votedowncount() const;
  void set_votedowncount(int32_t value);
  private:
  int32_t _internal_votedowncount() const;
  void _internal_set_votedowncount(int32_t value);
  public:

  // optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
  bool has_ban_check_result() const;
  private:
  bool _internal_has_ban_check_result() const;
  public:
  void clear_ban_check_result();
  ::EBanContentCheckResult ban_check_result() const;
  void set_ban_check_result(::EBanContentCheckResult value);
  private:
  ::EBanContentCheckResult _internal_ban_check_result() const;
  void _internal_set_ban_check_result(::EBanContentCheckResult value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_ClanAnnouncementInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headline_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    uint64_t gid_;
    uint64_t clanid_;
    uint64_t posterid_;
    uint32_t posttime_;
    uint32_t updatetime_;
    int32_t commentcount_;
    int32_t language_;
    uint64_t forum_topic_id_;
    uint64_t event_gid_;
    int32_t voteupcount_;
    bool hidden_;
    bool banned_;
    int32_t votedowncount_;
    int ban_check_result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CClanEventData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClanEventData) */ {
 public:
  inline CClanEventData() : CClanEventData(nullptr) {}
  ~CClanEventData() override;
  explicit PROTOBUF_CONSTEXPR CClanEventData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClanEventData(const CClanEventData& from);
  CClanEventData(CClanEventData&& from) noexcept
    : CClanEventData() {
    *this = ::std::move(from);
  }

  inline CClanEventData& operator=(const CClanEventData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClanEventData& operator=(CClanEventData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClanEventData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClanEventData* internal_default_instance() {
    return reinterpret_cast<const CClanEventData*>(
               &_CClanEventData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CClanEventData& a, CClanEventData& b) {
    a.Swap(&b);
  }
  inline void Swap(CClanEventData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClanEventData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClanEventData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClanEventData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClanEventData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CClanEventData& from) {
    CClanEventData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClanEventData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClanEventData";
  }
  protected:
  explicit CClanEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencedAppidsFieldNumber = 28,
    kEventNameFieldNumber = 3,
    kServerAddressFieldNumber = 6,
    kServerPasswordFieldNumber = 7,
    kEventNotesFieldNumber = 13,
    kJsondataFieldNumber = 14,
    kBuildBranchFieldNumber = 30,
    kAnnouncementBodyFieldNumber = 15,
    kGidFieldNumber = 1,
    kClanSteamidFieldNumber = 2,
    kAppidFieldNumber = 5,
    kRtime32StartTimeFieldNumber = 8,
    kRtime32EndTimeFieldNumber = 9,
    kCommentCountFieldNumber = 10,
    kCreatorSteamidFieldNumber = 11,
    kLastUpdateSteamidFieldNumber = 12,
    kPublishedFieldNumber = 16,
    kHiddenFieldNumber = 17,
    kRtime32VisibilityStartFieldNumber = 18,
    kRtime32VisibilityEndFieldNumber = 19,
    kBroadcasterAccountidFieldNumber = 20,
    kFollowerCountFieldNumber = 21,
    kIgnoreCountFieldNumber = 22,
    kForumTopicIdFieldNumber = 23,
    kNewsPostGidFieldNumber = 25,
    kRtime32LastModifiedFieldNumber = 24,
    kRtimeModReviewedFieldNumber = 26,
    kFeaturedAppTagidFieldNumber = 27,
    kBuildIdFieldNumber = 29,
    kEventTypeFieldNumber = 4,
  };
  // repeated uint32 referenced_appids = 28;
  int referenced_appids_size() const;
  private:
  int _internal_referenced_appids_size() const;
  public:
  void clear_referenced_appids();
  private:
  uint32_t _internal_referenced_appids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_referenced_appids() const;
  void _internal_add_referenced_appids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_referenced_appids();
  public:
  uint32_t referenced_appids(int index) const;
  void set_referenced_appids(int index, uint32_t value);
  void add_referenced_appids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      referenced_appids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_referenced_appids();

  // optional string event_name = 3;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_name();
  PROTOBUF_NODISCARD std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // optional string server_address = 6;
  bool has_server_address() const;
  private:
  bool _internal_has_server_address() const;
  public:
  void clear_server_address();
  const std::string& server_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_address();
  PROTOBUF_NODISCARD std::string* release_server_address();
  void set_allocated_server_address(std::string* server_address);
  private:
  const std::string& _internal_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_address(const std::string& value);
  std::string* _internal_mutable_server_address();
  public:

  // optional string server_password = 7;
  bool has_server_password() const;
  private:
  bool _internal_has_server_password() const;
  public:
  void clear_server_password();
  const std::string& server_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_password();
  PROTOBUF_NODISCARD std::string* release_server_password();
  void set_allocated_server_password(std::string* server_password);
  private:
  const std::string& _internal_server_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_password(const std::string& value);
  std::string* _internal_mutable_server_password();
  public:

  // optional string event_notes = 13;
  bool has_event_notes() const;
  private:
  bool _internal_has_event_notes() const;
  public:
  void clear_event_notes();
  const std::string& event_notes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_notes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_notes();
  PROTOBUF_NODISCARD std::string* release_event_notes();
  void set_allocated_event_notes(std::string* event_notes);
  private:
  const std::string& _internal_event_notes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_notes(const std::string& value);
  std::string* _internal_mutable_event_notes();
  public:

  // optional string jsondata = 14;
  bool has_jsondata() const;
  private:
  bool _internal_has_jsondata() const;
  public:
  void clear_jsondata();
  const std::string& jsondata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jsondata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jsondata();
  PROTOBUF_NODISCARD std::string* release_jsondata();
  void set_allocated_jsondata(std::string* jsondata);
  private:
  const std::string& _internal_jsondata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jsondata(const std::string& value);
  std::string* _internal_mutable_jsondata();
  public:

  // optional string build_branch = 30;
  bool has_build_branch() const;
  private:
  bool _internal_has_build_branch() const;
  public:
  void clear_build_branch();
  const std::string& build_branch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_build_branch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_build_branch();
  PROTOBUF_NODISCARD std::string* release_build_branch();
  void set_allocated_build_branch(std::string* build_branch);
  private:
  const std::string& _internal_build_branch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_build_branch(const std::string& value);
  std::string* _internal_mutable_build_branch();
  public:

  // optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
  bool has_announcement_body() const;
  private:
  bool _internal_has_announcement_body() const;
  public:
  void clear_announcement_body();
  const ::CCommunity_ClanAnnouncementInfo& announcement_body() const;
  PROTOBUF_NODISCARD ::CCommunity_ClanAnnouncementInfo* release_announcement_body();
  ::CCommunity_ClanAnnouncementInfo* mutable_announcement_body();
  void set_allocated_announcement_body(::CCommunity_ClanAnnouncementInfo* announcement_body);
  private:
  const ::CCommunity_ClanAnnouncementInfo& _internal_announcement_body() const;
  ::CCommunity_ClanAnnouncementInfo* _internal_mutable_announcement_body();
  public:
  void unsafe_arena_set_allocated_announcement_body(
      ::CCommunity_ClanAnnouncementInfo* announcement_body);
  ::CCommunity_ClanAnnouncementInfo* unsafe_arena_release_announcement_body();

  // optional fixed64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // optional fixed64 clan_steamid = 2;
  bool has_clan_steamid() const;
  private:
  bool _internal_has_clan_steamid() const;
  public:
  void clear_clan_steamid();
  uint64_t clan_steamid() const;
  void set_clan_steamid(uint64_t value);
  private:
  uint64_t _internal_clan_steamid() const;
  void _internal_set_clan_steamid(uint64_t value);
  public:

  // optional uint32 appid = 5;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 rtime32_start_time = 8;
  bool has_rtime32_start_time() const;
  private:
  bool _internal_has_rtime32_start_time() const;
  public:
  void clear_rtime32_start_time();
  uint32_t rtime32_start_time() const;
  void set_rtime32_start_time(uint32_t value);
  private:
  uint32_t _internal_rtime32_start_time() const;
  void _internal_set_rtime32_start_time(uint32_t value);
  public:

  // optional uint32 rtime32_end_time = 9;
  bool has_rtime32_end_time() const;
  private:
  bool _internal_has_rtime32_end_time() const;
  public:
  void clear_rtime32_end_time();
  uint32_t rtime32_end_time() const;
  void set_rtime32_end_time(uint32_t value);
  private:
  uint32_t _internal_rtime32_end_time() const;
  void _internal_set_rtime32_end_time(uint32_t value);
  public:

  // optional int32 comment_count = 10;
  bool has_comment_count() const;
  private:
  bool _internal_has_comment_count() const;
  public:
  void clear_comment_count();
  int32_t comment_count() const;
  void set_comment_count(int32_t value);
  private:
  int32_t _internal_comment_count() const;
  void _internal_set_comment_count(int32_t value);
  public:

  // optional fixed64 creator_steamid = 11;
  bool has_creator_steamid() const;
  private:
  bool _internal_has_creator_steamid() const;
  public:
  void clear_creator_steamid();
  uint64_t creator_steamid() const;
  void set_creator_steamid(uint64_t value);
  private:
  uint64_t _internal_creator_steamid() const;
  void _internal_set_creator_steamid(uint64_t value);
  public:

  // optional fixed64 last_update_steamid = 12;
  bool has_last_update_steamid() const;
  private:
  bool _internal_has_last_update_steamid() const;
  public:
  void clear_last_update_steamid();
  uint64_t last_update_steamid() const;
  void set_last_update_steamid(uint64_t value);
  private:
  uint64_t _internal_last_update_steamid() const;
  void _internal_set_last_update_steamid(uint64_t value);
  public:

  // optional bool published = 16;
  bool has_published() const;
  private:
  bool _internal_has_published() const;
  public:
  void clear_published();
  bool published() const;
  void set_published(bool value);
  private:
  bool _internal_published() const;
  void _internal_set_published(bool value);
  public:

  // optional bool hidden = 17;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // optional uint32 rtime32_visibility_start = 18;
  bool has_rtime32_visibility_start() const;
  private:
  bool _internal_has_rtime32_visibility_start() const;
  public:
  void clear_rtime32_visibility_start();
  uint32_t rtime32_visibility_start() const;
  void set_rtime32_visibility_start(uint32_t value);
  private:
  uint32_t _internal_rtime32_visibility_start() const;
  void _internal_set_rtime32_visibility_start(uint32_t value);
  public:

  // optional uint32 rtime32_visibility_end = 19;
  bool has_rtime32_visibility_end() const;
  private:
  bool _internal_has_rtime32_visibility_end() const;
  public:
  void clear_rtime32_visibility_end();
  uint32_t rtime32_visibility_end() const;
  void set_rtime32_visibility_end(uint32_t value);
  private:
  uint32_t _internal_rtime32_visibility_end() const;
  void _internal_set_rtime32_visibility_end(uint32_t value);
  public:

  // optional uint32 broadcaster_accountid = 20;
  bool has_broadcaster_accountid() const;
  private:
  bool _internal_has_broadcaster_accountid() const;
  public:
  void clear_broadcaster_accountid();
  uint32_t broadcaster_accountid() const;
  void set_broadcaster_accountid(uint32_t value);
  private:
  uint32_t _internal_broadcaster_accountid() const;
  void _internal_set_broadcaster_accountid(uint32_t value);
  public:

  // optional uint32 follower_count = 21;
  bool has_follower_count() const;
  private:
  bool _internal_has_follower_count() const;
  public:
  void clear_follower_count();
  uint32_t follower_count() const;
  void set_follower_count(uint32_t value);
  private:
  uint32_t _internal_follower_count() const;
  void _internal_set_follower_count(uint32_t value);
  public:

  // optional uint32 ignore_count = 22;
  bool has_ignore_count() const;
  private:
  bool _internal_has_ignore_count() const;
  public:
  void clear_ignore_count();
  uint32_t ignore_count() const;
  void set_ignore_count(uint32_t value);
  private:
  uint32_t _internal_ignore_count() const;
  void _internal_set_ignore_count(uint32_t value);
  public:

  // optional fixed64 forum_topic_id = 23;
  bool has_forum_topic_id() const;
  private:
  bool _internal_has_forum_topic_id() const;
  public:
  void clear_forum_topic_id();
  uint64_t forum_topic_id() const;
  void set_forum_topic_id(uint64_t value);
  private:
  uint64_t _internal_forum_topic_id() const;
  void _internal_set_forum_topic_id(uint64_t value);
  public:

  // optional fixed64 news_post_gid = 25;
  bool has_news_post_gid() const;
  private:
  bool _internal_has_news_post_gid() const;
  public:
  void clear_news_post_gid();
  uint64_t news_post_gid() const;
  void set_news_post_gid(uint64_t value);
  private:
  uint64_t _internal_news_post_gid() const;
  void _internal_set_news_post_gid(uint64_t value);
  public:

  // optional uint32 rtime32_last_modified = 24;
  bool has_rtime32_last_modified() const;
  private:
  bool _internal_has_rtime32_last_modified() const;
  public:
  void clear_rtime32_last_modified();
  uint32_t rtime32_last_modified() const;
  void set_rtime32_last_modified(uint32_t value);
  private:
  uint32_t _internal_rtime32_last_modified() const;
  void _internal_set_rtime32_last_modified(uint32_t value);
  public:

  // optional uint32 rtime_mod_reviewed = 26;
  bool has_rtime_mod_reviewed() const;
  private:
  bool _internal_has_rtime_mod_reviewed() const;
  public:
  void clear_rtime_mod_reviewed();
  uint32_t rtime_mod_reviewed() const;
  void set_rtime_mod_reviewed(uint32_t value);
  private:
  uint32_t _internal_rtime_mod_reviewed() const;
  void _internal_set_rtime_mod_reviewed(uint32_t value);
  public:

  // optional uint32 featured_app_tagid = 27;
  bool has_featured_app_tagid() const;
  private:
  bool _internal_has_featured_app_tagid() const;
  public:
  void clear_featured_app_tagid();
  uint32_t featured_app_tagid() const;
  void set_featured_app_tagid(uint32_t value);
  private:
  uint32_t _internal_featured_app_tagid() const;
  void _internal_set_featured_app_tagid(uint32_t value);
  public:

  // optional uint32 build_id = 29;
  bool has_build_id() const;
  private:
  bool _internal_has_build_id() const;
  public:
  void clear_build_id();
  uint32_t build_id() const;
  void set_build_id(uint32_t value);
  private:
  uint32_t _internal_build_id() const;
  void _internal_set_build_id(uint32_t value);
  public:

  // optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::EProtoClanEventType event_type() const;
  void set_event_type(::EProtoClanEventType value);
  private:
  ::EProtoClanEventType _internal_event_type() const;
  void _internal_set_event_type(::EProtoClanEventType value);
  public:

  // @@protoc_insertion_point(class_scope:CClanEventData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > referenced_appids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_notes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jsondata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_branch_;
    ::CCommunity_ClanAnnouncementInfo* announcement_body_;
    uint64_t gid_;
    uint64_t clan_steamid_;
    uint32_t appid_;
    uint32_t rtime32_start_time_;
    uint32_t rtime32_end_time_;
    int32_t comment_count_;
    uint64_t creator_steamid_;
    uint64_t last_update_steamid_;
    bool published_;
    bool hidden_;
    uint32_t rtime32_visibility_start_;
    uint32_t rtime32_visibility_end_;
    uint32_t broadcaster_accountid_;
    uint32_t follower_count_;
    uint32_t ignore_count_;
    uint64_t forum_topic_id_;
    uint64_t news_post_gid_;
    uint32_t rtime32_last_modified_;
    uint32_t rtime_mod_reviewed_;
    uint32_t featured_app_tagid_;
    uint32_t build_id_;
    int event_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CBilling_Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBilling_Address) */ {
 public:
  inline CBilling_Address() : CBilling_Address(nullptr) {}
  ~CBilling_Address() override;
  explicit PROTOBUF_CONSTEXPR CBilling_Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBilling_Address(const CBilling_Address& from);
  CBilling_Address(CBilling_Address&& from) noexcept
    : CBilling_Address() {
    *this = ::std::move(from);
  }

  inline CBilling_Address& operator=(const CBilling_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBilling_Address& operator=(CBilling_Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBilling_Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBilling_Address* internal_default_instance() {
    return reinterpret_cast<const CBilling_Address*>(
               &_CBilling_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CBilling_Address& a, CBilling_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(CBilling_Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBilling_Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBilling_Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBilling_Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBilling_Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CBilling_Address& from) {
    CBilling_Address::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBilling_Address* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBilling_Address";
  }
  protected:
  explicit CBilling_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
    kAddress1FieldNumber = 3,
    kAddress2FieldNumber = 4,
    kCityFieldNumber = 5,
    kUsStateFieldNumber = 6,
    kCountryCodeFieldNumber = 7,
    kPostcodeFieldNumber = 8,
    kPhoneFieldNumber = 10,
    kZipPlus4FieldNumber = 9,
  };
  // optional string first_name = 1;
  bool has_first_name() const;
  private:
  bool _internal_has_first_name() const;
  public:
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_NODISCARD std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // optional string last_name = 2;
  bool has_last_name() const;
  private:
  bool _internal_has_last_name() const;
  public:
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_NODISCARD std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // optional string address1 = 3;
  bool has_address1() const;
  private:
  bool _internal_has_address1() const;
  public:
  void clear_address1();
  const std::string& address1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address1();
  PROTOBUF_NODISCARD std::string* release_address1();
  void set_allocated_address1(std::string* address1);
  private:
  const std::string& _internal_address1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address1(const std::string& value);
  std::string* _internal_mutable_address1();
  public:

  // optional string address2 = 4;
  bool has_address2() const;
  private:
  bool _internal_has_address2() const;
  public:
  void clear_address2();
  const std::string& address2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address2();
  PROTOBUF_NODISCARD std::string* release_address2();
  void set_allocated_address2(std::string* address2);
  private:
  const std::string& _internal_address2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address2(const std::string& value);
  std::string* _internal_mutable_address2();
  public:

  // optional string city = 5;
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  const std::string& city() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_city(ArgT0&& arg0, ArgT... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // optional string us_state = 6;
  bool has_us_state() const;
  private:
  bool _internal_has_us_state() const;
  public:
  void clear_us_state();
  const std::string& us_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_us_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_us_state();
  PROTOBUF_NODISCARD std::string* release_us_state();
  void set_allocated_us_state(std::string* us_state);
  private:
  const std::string& _internal_us_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_us_state(const std::string& value);
  std::string* _internal_mutable_us_state();
  public:

  // optional string country_code = 7;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional string postcode = 8;
  bool has_postcode() const;
  private:
  bool _internal_has_postcode() const;
  public:
  void clear_postcode();
  const std::string& postcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_postcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_postcode();
  PROTOBUF_NODISCARD std::string* release_postcode();
  void set_allocated_postcode(std::string* postcode);
  private:
  const std::string& _internal_postcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_postcode(const std::string& value);
  std::string* _internal_mutable_postcode();
  public:

  // optional string phone = 10;
  bool has_phone() const;
  private:
  bool _internal_has_phone() const;
  public:
  void clear_phone();
  const std::string& phone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone();
  PROTOBUF_NODISCARD std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // optional int32 zip_plus4 = 9;
  bool has_zip_plus4() const;
  private:
  bool _internal_has_zip_plus4() const;
  public:
  void clear_zip_plus4();
  int32_t zip_plus4() const;
  void set_zip_plus4(int32_t value);
  private:
  int32_t _internal_zip_plus4() const;
  void _internal_set_zip_plus4(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBilling_Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr us_state_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postcode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
    int32_t zip_plus4_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CPackageReservationStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPackageReservationStatus) */ {
 public:
  inline CPackageReservationStatus() : CPackageReservationStatus(nullptr) {}
  ~CPackageReservationStatus() override;
  explicit PROTOBUF_CONSTEXPR CPackageReservationStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPackageReservationStatus(const CPackageReservationStatus& from);
  CPackageReservationStatus(CPackageReservationStatus&& from) noexcept
    : CPackageReservationStatus() {
    *this = ::std::move(from);
  }

  inline CPackageReservationStatus& operator=(const CPackageReservationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPackageReservationStatus& operator=(CPackageReservationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPackageReservationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPackageReservationStatus* internal_default_instance() {
    return reinterpret_cast<const CPackageReservationStatus*>(
               &_CPackageReservationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CPackageReservationStatus& a, CPackageReservationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CPackageReservationStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPackageReservationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPackageReservationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPackageReservationStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPackageReservationStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CPackageReservationStatus& from) {
    CPackageReservationStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPackageReservationStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPackageReservationStatus";
  }
  protected:
  explicit CPackageReservationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservationCountryCodeFieldNumber = 5,
    kPackageidFieldNumber = 1,
    kReservationStateFieldNumber = 2,
    kQueuePositionFieldNumber = 3,
    kTotalQueueSizeFieldNumber = 4,
    kExpiredFieldNumber = 6,
    kTimeExpiresFieldNumber = 7,
    kTimeReservedFieldNumber = 8,
  };
  // optional string reservation_country_code = 5;
  bool has_reservation_country_code() const;
  private:
  bool _internal_has_reservation_country_code() const;
  public:
  void clear_reservation_country_code();
  const std::string& reservation_country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reservation_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reservation_country_code();
  PROTOBUF_NODISCARD std::string* release_reservation_country_code();
  void set_allocated_reservation_country_code(std::string* reservation_country_code);
  private:
  const std::string& _internal_reservation_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reservation_country_code(const std::string& value);
  std::string* _internal_mutable_reservation_country_code();
  public:

  // optional uint32 packageid = 1;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  uint32_t packageid() const;
  void set_packageid(uint32_t value);
  private:
  uint32_t _internal_packageid() const;
  void _internal_set_packageid(uint32_t value);
  public:

  // optional int32 reservation_state = 2;
  bool has_reservation_state() const;
  private:
  bool _internal_has_reservation_state() const;
  public:
  void clear_reservation_state();
  int32_t reservation_state() const;
  void set_reservation_state(int32_t value);
  private:
  int32_t _internal_reservation_state() const;
  void _internal_set_reservation_state(int32_t value);
  public:

  // optional int32 queue_position = 3;
  bool has_queue_position() const;
  private:
  bool _internal_has_queue_position() const;
  public:
  void clear_queue_position();
  int32_t queue_position() const;
  void set_queue_position(int32_t value);
  private:
  int32_t _internal_queue_position() const;
  void _internal_set_queue_position(int32_t value);
  public:

  // optional int32 total_queue_size = 4;
  bool has_total_queue_size() const;
  private:
  bool _internal_has_total_queue_size() const;
  public:
  void clear_total_queue_size();
  int32_t total_queue_size() const;
  void set_total_queue_size(int32_t value);
  private:
  int32_t _internal_total_queue_size() const;
  void _internal_set_total_queue_size(int32_t value);
  public:

  // optional bool expired = 6;
  bool has_expired() const;
  private:
  bool _internal_has_expired() const;
  public:
  void clear_expired();
  bool expired() const;
  void set_expired(bool value);
  private:
  bool _internal_expired() const;
  void _internal_set_expired(bool value);
  public:

  // optional uint32 time_expires = 7;
  bool has_time_expires() const;
  private:
  bool _internal_has_time_expires() const;
  public:
  void clear_time_expires();
  uint32_t time_expires() const;
  void set_time_expires(uint32_t value);
  private:
  uint32_t _internal_time_expires() const;
  void _internal_set_time_expires(uint32_t value);
  public:

  // optional uint32 time_reserved = 8;
  bool has_time_reserved() const;
  private:
  bool _internal_has_time_reserved() const;
  public:
  void clear_time_reserved();
  uint32_t time_reserved() const;
  void set_time_reserved(uint32_t value);
  private:
  uint32_t _internal_time_reserved() const;
  void _internal_set_time_reserved(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPackageReservationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reservation_country_code_;
    uint32_t packageid_;
    int32_t reservation_state_;
    int32_t queue_position_;
    int32_t total_queue_size_;
    bool expired_;
    uint32_t time_expires_;
    uint32_t time_reserved_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgKeyValuePair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgKeyValuePair) */ {
 public:
  inline CMsgKeyValuePair() : CMsgKeyValuePair(nullptr) {}
  ~CMsgKeyValuePair() override;
  explicit PROTOBUF_CONSTEXPR CMsgKeyValuePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgKeyValuePair(const CMsgKeyValuePair& from);
  CMsgKeyValuePair(CMsgKeyValuePair&& from) noexcept
    : CMsgKeyValuePair() {
    *this = ::std::move(from);
  }

  inline CMsgKeyValuePair& operator=(const CMsgKeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgKeyValuePair& operator=(CMsgKeyValuePair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgKeyValuePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgKeyValuePair* internal_default_instance() {
    return reinterpret_cast<const CMsgKeyValuePair*>(
               &_CMsgKeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgKeyValuePair& a, CMsgKeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgKeyValuePair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgKeyValuePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgKeyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgKeyValuePair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgKeyValuePair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgKeyValuePair& from) {
    CMsgKeyValuePair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgKeyValuePair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgKeyValuePair";
  }
  protected:
  explicit CMsgKeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CMsgKeyValuePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgKeyValueSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgKeyValueSet) */ {
 public:
  inline CMsgKeyValueSet() : CMsgKeyValueSet(nullptr) {}
  ~CMsgKeyValueSet() override;
  explicit PROTOBUF_CONSTEXPR CMsgKeyValueSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgKeyValueSet(const CMsgKeyValueSet& from);
  CMsgKeyValueSet(CMsgKeyValueSet&& from) noexcept
    : CMsgKeyValueSet() {
    *this = ::std::move(from);
  }

  inline CMsgKeyValueSet& operator=(const CMsgKeyValueSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgKeyValueSet& operator=(CMsgKeyValueSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgKeyValueSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgKeyValueSet* internal_default_instance() {
    return reinterpret_cast<const CMsgKeyValueSet*>(
               &_CMsgKeyValueSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgKeyValueSet& a, CMsgKeyValueSet& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgKeyValueSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgKeyValueSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgKeyValueSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgKeyValueSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgKeyValueSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgKeyValueSet& from) {
    CMsgKeyValueSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgKeyValueSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgKeyValueSet";
  }
  protected:
  explicit CMsgKeyValueSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairsFieldNumber = 1,
  };
  // repeated .CMsgKeyValuePair pairs = 1;
  int pairs_size() const;
  private:
  int _internal_pairs_size() const;
  public:
  void clear_pairs();
  ::CMsgKeyValuePair* mutable_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgKeyValuePair >*
      mutable_pairs();
  private:
  const ::CMsgKeyValuePair& _internal_pairs(int index) const;
  ::CMsgKeyValuePair* _internal_add_pairs();
  public:
  const ::CMsgKeyValuePair& pairs(int index) const;
  ::CMsgKeyValuePair* add_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgKeyValuePair >&
      pairs() const;

  // @@protoc_insertion_point(class_scope:CMsgKeyValueSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgKeyValuePair > pairs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class UserContentDescriptorPreferences_ContentDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserContentDescriptorPreferences.ContentDescriptor) */ {
 public:
  inline UserContentDescriptorPreferences_ContentDescriptor() : UserContentDescriptorPreferences_ContentDescriptor(nullptr) {}
  ~UserContentDescriptorPreferences_ContentDescriptor() override;
  explicit PROTOBUF_CONSTEXPR UserContentDescriptorPreferences_ContentDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserContentDescriptorPreferences_ContentDescriptor(const UserContentDescriptorPreferences_ContentDescriptor& from);
  UserContentDescriptorPreferences_ContentDescriptor(UserContentDescriptorPreferences_ContentDescriptor&& from) noexcept
    : UserContentDescriptorPreferences_ContentDescriptor() {
    *this = ::std::move(from);
  }

  inline UserContentDescriptorPreferences_ContentDescriptor& operator=(const UserContentDescriptorPreferences_ContentDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserContentDescriptorPreferences_ContentDescriptor& operator=(UserContentDescriptorPreferences_ContentDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserContentDescriptorPreferences_ContentDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserContentDescriptorPreferences_ContentDescriptor* internal_default_instance() {
    return reinterpret_cast<const UserContentDescriptorPreferences_ContentDescriptor*>(
               &_UserContentDescriptorPreferences_ContentDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UserContentDescriptorPreferences_ContentDescriptor& a, UserContentDescriptorPreferences_ContentDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(UserContentDescriptorPreferences_ContentDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserContentDescriptorPreferences_ContentDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserContentDescriptorPreferences_ContentDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserContentDescriptorPreferences_ContentDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserContentDescriptorPreferences_ContentDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserContentDescriptorPreferences_ContentDescriptor& from) {
    UserContentDescriptorPreferences_ContentDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserContentDescriptorPreferences_ContentDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserContentDescriptorPreferences.ContentDescriptor";
  }
  protected:
  explicit UserContentDescriptorPreferences_ContentDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentDescriptoridFieldNumber = 1,
    kTimestampAddedFieldNumber = 2,
  };
  // optional uint32 content_descriptorid = 1;
  bool has_content_descriptorid() const;
  private:
  bool _internal_has_content_descriptorid() const;
  public:
  void clear_content_descriptorid();
  uint32_t content_descriptorid() const;
  void set_content_descriptorid(uint32_t value);
  private:
  uint32_t _internal_content_descriptorid() const;
  void _internal_set_content_descriptorid(uint32_t value);
  public:

  // optional uint32 timestamp_added = 2;
  bool has_timestamp_added() const;
  private:
  bool _internal_has_timestamp_added() const;
  public:
  void clear_timestamp_added();
  uint32_t timestamp_added() const;
  void set_timestamp_added(uint32_t value);
  private:
  uint32_t _internal_timestamp_added() const;
  void _internal_set_timestamp_added(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserContentDescriptorPreferences.ContentDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t content_descriptorid_;
    uint32_t timestamp_added_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class UserContentDescriptorPreferences final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserContentDescriptorPreferences) */ {
 public:
  inline UserContentDescriptorPreferences() : UserContentDescriptorPreferences(nullptr) {}
  ~UserContentDescriptorPreferences() override;
  explicit PROTOBUF_CONSTEXPR UserContentDescriptorPreferences(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserContentDescriptorPreferences(const UserContentDescriptorPreferences& from);
  UserContentDescriptorPreferences(UserContentDescriptorPreferences&& from) noexcept
    : UserContentDescriptorPreferences() {
    *this = ::std::move(from);
  }

  inline UserContentDescriptorPreferences& operator=(const UserContentDescriptorPreferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserContentDescriptorPreferences& operator=(UserContentDescriptorPreferences&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserContentDescriptorPreferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserContentDescriptorPreferences* internal_default_instance() {
    return reinterpret_cast<const UserContentDescriptorPreferences*>(
               &_UserContentDescriptorPreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UserContentDescriptorPreferences& a, UserContentDescriptorPreferences& b) {
    a.Swap(&b);
  }
  inline void Swap(UserContentDescriptorPreferences* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserContentDescriptorPreferences* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserContentDescriptorPreferences* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserContentDescriptorPreferences>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserContentDescriptorPreferences& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserContentDescriptorPreferences& from) {
    UserContentDescriptorPreferences::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserContentDescriptorPreferences* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserContentDescriptorPreferences";
  }
  protected:
  explicit UserContentDescriptorPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserContentDescriptorPreferences_ContentDescriptor ContentDescriptor;

  // accessors -------------------------------------------------------

  enum : int {
    kContentDescriptorsToExcludeFieldNumber = 1,
  };
  // repeated .UserContentDescriptorPreferences.ContentDescriptor content_descriptors_to_exclude = 1;
  int content_descriptors_to_exclude_size() const;
  private:
  int _internal_content_descriptors_to_exclude_size() const;
  public:
  void clear_content_descriptors_to_exclude();
  ::UserContentDescriptorPreferences_ContentDescriptor* mutable_content_descriptors_to_exclude(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserContentDescriptorPreferences_ContentDescriptor >*
      mutable_content_descriptors_to_exclude();
  private:
  const ::UserContentDescriptorPreferences_ContentDescriptor& _internal_content_descriptors_to_exclude(int index) const;
  ::UserContentDescriptorPreferences_ContentDescriptor* _internal_add_content_descriptors_to_exclude();
  public:
  const ::UserContentDescriptorPreferences_ContentDescriptor& content_descriptors_to_exclude(int index) const;
  ::UserContentDescriptorPreferences_ContentDescriptor* add_content_descriptors_to_exclude();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserContentDescriptorPreferences_ContentDescriptor >&
      content_descriptors_to_exclude() const;

  // @@protoc_insertion_point(class_scope:UserContentDescriptorPreferences)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserContentDescriptorPreferences_ContentDescriptor > content_descriptors_to_exclude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// ===================================================================

static const int kMsgpoolSoftLimitFieldNumber = 50000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  msgpool_soft_limit;
static const int kMsgpoolHardLimitFieldNumber = 50001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  msgpool_hard_limit;
static const int kForcePhpGenerationFieldNumber = 50000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  force_php_generation;
static const int kPhpOutputAlwaysNumberFieldNumber = 50020;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  php_output_always_number;
static const int kAllowFieldNamedSteamIdFieldNumber = 50024;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  allow_field_named_steam_id;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgIPAddress

// fixed32 v4 = 1;
inline bool CMsgIPAddress::_internal_has_v4() const {
  return ip_case() == kV4;
}
inline bool CMsgIPAddress::has_v4() const {
  return _internal_has_v4();
}
inline void CMsgIPAddress::set_has_v4() {
  _impl_._oneof_case_[0] = kV4;
}
inline void CMsgIPAddress::clear_v4() {
  if (_internal_has_v4()) {
    _impl_.ip_.v4_ = 0u;
    clear_has_ip();
  }
}
inline uint32_t CMsgIPAddress::_internal_v4() const {
  if (_internal_has_v4()) {
    return _impl_.ip_.v4_;
  }
  return 0u;
}
inline void CMsgIPAddress::_internal_set_v4(uint32_t value) {
  if (!_internal_has_v4()) {
    clear_ip();
    set_has_v4();
  }
  _impl_.ip_.v4_ = value;
}
inline uint32_t CMsgIPAddress::v4() const {
  // @@protoc_insertion_point(field_get:CMsgIPAddress.v4)
  return _internal_v4();
}
inline void CMsgIPAddress::set_v4(uint32_t value) {
  _internal_set_v4(value);
  // @@protoc_insertion_point(field_set:CMsgIPAddress.v4)
}

// bytes v6 = 2;
inline bool CMsgIPAddress::_internal_has_v6() const {
  return ip_case() == kV6;
}
inline bool CMsgIPAddress::has_v6() const {
  return _internal_has_v6();
}
inline void CMsgIPAddress::set_has_v6() {
  _impl_._oneof_case_[0] = kV6;
}
inline void CMsgIPAddress::clear_v6() {
  if (_internal_has_v6()) {
    _impl_.ip_.v6_.Destroy();
    clear_has_ip();
  }
}
inline const std::string& CMsgIPAddress::v6() const {
  // @@protoc_insertion_point(field_get:CMsgIPAddress.v6)
  return _internal_v6();
}
template <typename ArgT0, typename... ArgT>
inline void CMsgIPAddress::set_v6(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_v6()) {
    clear_ip();
    set_has_v6();
    _impl_.ip_.v6_.InitDefault();
  }
  _impl_.ip_.v6_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgIPAddress.v6)
}
inline std::string* CMsgIPAddress::mutable_v6() {
  std::string* _s = _internal_mutable_v6();
  // @@protoc_insertion_point(field_mutable:CMsgIPAddress.v6)
  return _s;
}
inline const std::string& CMsgIPAddress::_internal_v6() const {
  if (_internal_has_v6()) {
    return _impl_.ip_.v6_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CMsgIPAddress::_internal_set_v6(const std::string& value) {
  if (!_internal_has_v6()) {
    clear_ip();
    set_has_v6();
    _impl_.ip_.v6_.InitDefault();
  }
  _impl_.ip_.v6_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgIPAddress::_internal_mutable_v6() {
  if (!_internal_has_v6()) {
    clear_ip();
    set_has_v6();
    _impl_.ip_.v6_.InitDefault();
  }
  return _impl_.ip_.v6_.Mutable(      GetArenaForAllocation());
}
inline std::string* CMsgIPAddress::release_v6() {
  // @@protoc_insertion_point(field_release:CMsgIPAddress.v6)
  if (_internal_has_v6()) {
    clear_has_ip();
    return _impl_.ip_.v6_.Release();
  } else {
    return nullptr;
  }
}
inline void CMsgIPAddress::set_allocated_v6(std::string* v6) {
  if (has_ip()) {
    clear_ip();
  }
  if (v6 != nullptr) {
    set_has_v6();
    _impl_.ip_.v6_.InitAllocated(v6, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgIPAddress.v6)
}

inline bool CMsgIPAddress::has_ip() const {
  return ip_case() != IP_NOT_SET;
}
inline void CMsgIPAddress::clear_has_ip() {
  _impl_._oneof_case_[0] = IP_NOT_SET;
}
inline CMsgIPAddress::IpCase CMsgIPAddress::ip_case() const {
  return CMsgIPAddress::IpCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgIPAddressBucket

// optional .CMsgIPAddress original_ip_address = 1;
inline bool CMsgIPAddressBucket::_internal_has_original_ip_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.original_ip_address_ != nullptr);
  return value;
}
inline bool CMsgIPAddressBucket::has_original_ip_address() const {
  return _internal_has_original_ip_address();
}
inline void CMsgIPAddressBucket::clear_original_ip_address() {
  if (_impl_.original_ip_address_ != nullptr) _impl_.original_ip_address_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgIPAddress& CMsgIPAddressBucket::_internal_original_ip_address() const {
  const ::CMsgIPAddress* p = _impl_.original_ip_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPAddress&>(
      ::_CMsgIPAddress_default_instance_);
}
inline const ::CMsgIPAddress& CMsgIPAddressBucket::original_ip_address() const {
  // @@protoc_insertion_point(field_get:CMsgIPAddressBucket.original_ip_address)
  return _internal_original_ip_address();
}
inline void CMsgIPAddressBucket::unsafe_arena_set_allocated_original_ip_address(
    ::CMsgIPAddress* original_ip_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_ip_address_);
  }
  _impl_.original_ip_address_ = original_ip_address;
  if (original_ip_address) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgIPAddressBucket.original_ip_address)
}
inline ::CMsgIPAddress* CMsgIPAddressBucket::release_original_ip_address() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgIPAddress* temp = _impl_.original_ip_address_;
  _impl_.original_ip_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgIPAddress* CMsgIPAddressBucket::unsafe_arena_release_original_ip_address() {
  // @@protoc_insertion_point(field_release:CMsgIPAddressBucket.original_ip_address)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgIPAddress* temp = _impl_.original_ip_address_;
  _impl_.original_ip_address_ = nullptr;
  return temp;
}
inline ::CMsgIPAddress* CMsgIPAddressBucket::_internal_mutable_original_ip_address() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.original_ip_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPAddress>(GetArenaForAllocation());
    _impl_.original_ip_address_ = p;
  }
  return _impl_.original_ip_address_;
}
inline ::CMsgIPAddress* CMsgIPAddressBucket::mutable_original_ip_address() {
  ::CMsgIPAddress* _msg = _internal_mutable_original_ip_address();
  // @@protoc_insertion_point(field_mutable:CMsgIPAddressBucket.original_ip_address)
  return _msg;
}
inline void CMsgIPAddressBucket::set_allocated_original_ip_address(::CMsgIPAddress* original_ip_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.original_ip_address_;
  }
  if (original_ip_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(original_ip_address);
    if (message_arena != submessage_arena) {
      original_ip_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_ip_address, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.original_ip_address_ = original_ip_address;
  // @@protoc_insertion_point(field_set_allocated:CMsgIPAddressBucket.original_ip_address)
}

// optional fixed64 bucket = 2;
inline bool CMsgIPAddressBucket::_internal_has_bucket() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgIPAddressBucket::has_bucket() const {
  return _internal_has_bucket();
}
inline void CMsgIPAddressBucket::clear_bucket() {
  _impl_.bucket_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgIPAddressBucket::_internal_bucket() const {
  return _impl_.bucket_;
}
inline uint64_t CMsgIPAddressBucket::bucket() const {
  // @@protoc_insertion_point(field_get:CMsgIPAddressBucket.bucket)
  return _internal_bucket();
}
inline void CMsgIPAddressBucket::_internal_set_bucket(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bucket_ = value;
}
inline void CMsgIPAddressBucket::set_bucket(uint64_t value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:CMsgIPAddressBucket.bucket)
}

// -------------------------------------------------------------------

// CMsgGCRoutingProtoBufHeader

// optional uint64 dst_gcid_queue = 1;
inline bool CMsgGCRoutingProtoBufHeader::_internal_has_dst_gcid_queue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCRoutingProtoBufHeader::has_dst_gcid_queue() const {
  return _internal_has_dst_gcid_queue();
}
inline void CMsgGCRoutingProtoBufHeader::clear_dst_gcid_queue() {
  _impl_.dst_gcid_queue_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCRoutingProtoBufHeader::_internal_dst_gcid_queue() const {
  return _impl_.dst_gcid_queue_;
}
inline uint64_t CMsgGCRoutingProtoBufHeader::dst_gcid_queue() const {
  // @@protoc_insertion_point(field_get:CMsgGCRoutingProtoBufHeader.dst_gcid_queue)
  return _internal_dst_gcid_queue();
}
inline void CMsgGCRoutingProtoBufHeader::_internal_set_dst_gcid_queue(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dst_gcid_queue_ = value;
}
inline void CMsgGCRoutingProtoBufHeader::set_dst_gcid_queue(uint64_t value) {
  _internal_set_dst_gcid_queue(value);
  // @@protoc_insertion_point(field_set:CMsgGCRoutingProtoBufHeader.dst_gcid_queue)
}

// optional uint32 dst_gc_dir_index = 2;
inline bool CMsgGCRoutingProtoBufHeader::_internal_has_dst_gc_dir_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCRoutingProtoBufHeader::has_dst_gc_dir_index() const {
  return _internal_has_dst_gc_dir_index();
}
inline void CMsgGCRoutingProtoBufHeader::clear_dst_gc_dir_index() {
  _impl_.dst_gc_dir_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCRoutingProtoBufHeader::_internal_dst_gc_dir_index() const {
  return _impl_.dst_gc_dir_index_;
}
inline uint32_t CMsgGCRoutingProtoBufHeader::dst_gc_dir_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCRoutingProtoBufHeader.dst_gc_dir_index)
  return _internal_dst_gc_dir_index();
}
inline void CMsgGCRoutingProtoBufHeader::_internal_set_dst_gc_dir_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dst_gc_dir_index_ = value;
}
inline void CMsgGCRoutingProtoBufHeader::set_dst_gc_dir_index(uint32_t value) {
  _internal_set_dst_gc_dir_index(value);
  // @@protoc_insertion_point(field_set:CMsgGCRoutingProtoBufHeader.dst_gc_dir_index)
}

// -------------------------------------------------------------------

// CMsgProtoBufHeader

// optional fixed64 steamid = 1;
inline bool CMsgProtoBufHeader::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgProtoBufHeader::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgProtoBufHeader::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgProtoBufHeader::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.steamid)
  return _internal_steamid();
}
inline void CMsgProtoBufHeader::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.steamid_ = value;
}
inline void CMsgProtoBufHeader::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.steamid)
}

// optional int32 client_sessionid = 2;
inline bool CMsgProtoBufHeader::_internal_has_client_sessionid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_client_sessionid() const {
  return _internal_has_client_sessionid();
}
inline void CMsgProtoBufHeader::clear_client_sessionid() {
  _impl_.client_sessionid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t CMsgProtoBufHeader::_internal_client_sessionid() const {
  return _impl_.client_sessionid_;
}
inline int32_t CMsgProtoBufHeader::client_sessionid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.client_sessionid)
  return _internal_client_sessionid();
}
inline void CMsgProtoBufHeader::_internal_set_client_sessionid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.client_sessionid_ = value;
}
inline void CMsgProtoBufHeader::set_client_sessionid(int32_t value) {
  _internal_set_client_sessionid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.client_sessionid)
}

// optional uint32 routing_appid = 3;
inline bool CMsgProtoBufHeader::_internal_has_routing_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_routing_appid() const {
  return _internal_has_routing_appid();
}
inline void CMsgProtoBufHeader::clear_routing_appid() {
  _impl_.routing_appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgProtoBufHeader::_internal_routing_appid() const {
  return _impl_.routing_appid_;
}
inline uint32_t CMsgProtoBufHeader::routing_appid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.routing_appid)
  return _internal_routing_appid();
}
inline void CMsgProtoBufHeader::_internal_set_routing_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.routing_appid_ = value;
}
inline void CMsgProtoBufHeader::set_routing_appid(uint32_t value) {
  _internal_set_routing_appid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.routing_appid)
}

// optional fixed64 jobid_source = 10 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_jobid_source() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_jobid_source() const {
  return _internal_has_jobid_source();
}
inline void CMsgProtoBufHeader::clear_jobid_source() {
  _impl_.jobid_source_ = uint64_t{18446744073709551615u};
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint64_t CMsgProtoBufHeader::_internal_jobid_source() const {
  return _impl_.jobid_source_;
}
inline uint64_t CMsgProtoBufHeader::jobid_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.jobid_source)
  return _internal_jobid_source();
}
inline void CMsgProtoBufHeader::_internal_set_jobid_source(uint64_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.jobid_source_ = value;
}
inline void CMsgProtoBufHeader::set_jobid_source(uint64_t value) {
  _internal_set_jobid_source(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.jobid_source)
}

// optional fixed64 jobid_target = 11 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_jobid_target() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_jobid_target() const {
  return _internal_has_jobid_target();
}
inline void CMsgProtoBufHeader::clear_jobid_target() {
  _impl_.jobid_target_ = uint64_t{18446744073709551615u};
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint64_t CMsgProtoBufHeader::_internal_jobid_target() const {
  return _impl_.jobid_target_;
}
inline uint64_t CMsgProtoBufHeader::jobid_target() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.jobid_target)
  return _internal_jobid_target();
}
inline void CMsgProtoBufHeader::_internal_set_jobid_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.jobid_target_ = value;
}
inline void CMsgProtoBufHeader::set_jobid_target(uint64_t value) {
  _internal_set_jobid_target(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.jobid_target)
}

// optional string target_job_name = 12;
inline bool CMsgProtoBufHeader::_internal_has_target_job_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_target_job_name() const {
  return _internal_has_target_job_name();
}
inline void CMsgProtoBufHeader::clear_target_job_name() {
  _impl_.target_job_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgProtoBufHeader::target_job_name() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.target_job_name)
  return _internal_target_job_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgProtoBufHeader::set_target_job_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.target_job_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.target_job_name)
}
inline std::string* CMsgProtoBufHeader::mutable_target_job_name() {
  std::string* _s = _internal_mutable_target_job_name();
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.target_job_name)
  return _s;
}
inline const std::string& CMsgProtoBufHeader::_internal_target_job_name() const {
  return _impl_.target_job_name_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_target_job_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_job_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_target_job_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.target_job_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::release_target_job_name() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.target_job_name)
  if (!_internal_has_target_job_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.target_job_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_job_name_.IsDefault()) {
    _impl_.target_job_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgProtoBufHeader::set_allocated_target_job_name(std::string* target_job_name) {
  if (target_job_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.target_job_name_.SetAllocated(target_job_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_job_name_.IsDefault()) {
    _impl_.target_job_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.target_job_name)
}

// optional int32 seq_num = 24;
inline bool CMsgProtoBufHeader::_internal_has_seq_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_seq_num() const {
  return _internal_has_seq_num();
}
inline void CMsgProtoBufHeader::clear_seq_num() {
  _impl_.seq_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t CMsgProtoBufHeader::_internal_seq_num() const {
  return _impl_.seq_num_;
}
inline int32_t CMsgProtoBufHeader::seq_num() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.seq_num)
  return _internal_seq_num();
}
inline void CMsgProtoBufHeader::_internal_set_seq_num(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.seq_num_ = value;
}
inline void CMsgProtoBufHeader::set_seq_num(int32_t value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.seq_num)
}

// optional int32 eresult = 13 [default = 2];
inline bool CMsgProtoBufHeader::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgProtoBufHeader::clear_eresult() {
  _impl_.eresult_ = 2;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline int32_t CMsgProtoBufHeader::_internal_eresult() const {
  return _impl_.eresult_;
}
inline int32_t CMsgProtoBufHeader::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.eresult)
  return _internal_eresult();
}
inline void CMsgProtoBufHeader::_internal_set_eresult(int32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.eresult_ = value;
}
inline void CMsgProtoBufHeader::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.eresult)
}

// optional string error_message = 14;
inline bool CMsgProtoBufHeader::_internal_has_error_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_error_message() const {
  return _internal_has_error_message();
}
inline void CMsgProtoBufHeader::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgProtoBufHeader::error_message() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgProtoBufHeader::set_error_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.error_message)
}
inline std::string* CMsgProtoBufHeader::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.error_message)
  return _s;
}
inline const std::string& CMsgProtoBufHeader::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_error_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_error_message() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::release_error_message() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.error_message)
  if (!_internal_has_error_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.error_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgProtoBufHeader::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.error_message)
}

// optional uint32 auth_account_flags = 16;
inline bool CMsgProtoBufHeader::_internal_has_auth_account_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_auth_account_flags() const {
  return _internal_has_auth_account_flags();
}
inline void CMsgProtoBufHeader::clear_auth_account_flags() {
  _impl_.auth_account_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgProtoBufHeader::_internal_auth_account_flags() const {
  return _impl_.auth_account_flags_;
}
inline uint32_t CMsgProtoBufHeader::auth_account_flags() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.auth_account_flags)
  return _internal_auth_account_flags();
}
inline void CMsgProtoBufHeader::_internal_set_auth_account_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.auth_account_flags_ = value;
}
inline void CMsgProtoBufHeader::set_auth_account_flags(uint32_t value) {
  _internal_set_auth_account_flags(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.auth_account_flags)
}

// optional uint32 token_source = 22;
inline bool CMsgProtoBufHeader::_internal_has_token_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_token_source() const {
  return _internal_has_token_source();
}
inline void CMsgProtoBufHeader::clear_token_source() {
  _impl_.token_source_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgProtoBufHeader::_internal_token_source() const {
  return _impl_.token_source_;
}
inline uint32_t CMsgProtoBufHeader::token_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.token_source)
  return _internal_token_source();
}
inline void CMsgProtoBufHeader::_internal_set_token_source(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.token_source_ = value;
}
inline void CMsgProtoBufHeader::set_token_source(uint32_t value) {
  _internal_set_token_source(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.token_source)
}

// optional bool admin_spoofing_user = 23;
inline bool CMsgProtoBufHeader::_internal_has_admin_spoofing_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_admin_spoofing_user() const {
  return _internal_has_admin_spoofing_user();
}
inline void CMsgProtoBufHeader::clear_admin_spoofing_user() {
  _impl_.admin_spoofing_user_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool CMsgProtoBufHeader::_internal_admin_spoofing_user() const {
  return _impl_.admin_spoofing_user_;
}
inline bool CMsgProtoBufHeader::admin_spoofing_user() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.admin_spoofing_user)
  return _internal_admin_spoofing_user();
}
inline void CMsgProtoBufHeader::_internal_set_admin_spoofing_user(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.admin_spoofing_user_ = value;
}
inline void CMsgProtoBufHeader::set_admin_spoofing_user(bool value) {
  _internal_set_admin_spoofing_user(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.admin_spoofing_user)
}

// optional int32 transport_error = 17 [default = 1];
inline bool CMsgProtoBufHeader::_internal_has_transport_error() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_transport_error() const {
  return _internal_has_transport_error();
}
inline void CMsgProtoBufHeader::clear_transport_error() {
  _impl_.transport_error_ = 1;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline int32_t CMsgProtoBufHeader::_internal_transport_error() const {
  return _impl_.transport_error_;
}
inline int32_t CMsgProtoBufHeader::transport_error() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.transport_error)
  return _internal_transport_error();
}
inline void CMsgProtoBufHeader::_internal_set_transport_error(int32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.transport_error_ = value;
}
inline void CMsgProtoBufHeader::set_transport_error(int32_t value) {
  _internal_set_transport_error(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.transport_error)
}

// optional uint64 messageid = 18 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_messageid() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_messageid() const {
  return _internal_has_messageid();
}
inline void CMsgProtoBufHeader::clear_messageid() {
  _impl_.messageid_ = uint64_t{18446744073709551615u};
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint64_t CMsgProtoBufHeader::_internal_messageid() const {
  return _impl_.messageid_;
}
inline uint64_t CMsgProtoBufHeader::messageid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.messageid)
  return _internal_messageid();
}
inline void CMsgProtoBufHeader::_internal_set_messageid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.messageid_ = value;
}
inline void CMsgProtoBufHeader::set_messageid(uint64_t value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.messageid)
}

// optional uint32 publisher_group_id = 19;
inline bool CMsgProtoBufHeader::_internal_has_publisher_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_publisher_group_id() const {
  return _internal_has_publisher_group_id();
}
inline void CMsgProtoBufHeader::clear_publisher_group_id() {
  _impl_.publisher_group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgProtoBufHeader::_internal_publisher_group_id() const {
  return _impl_.publisher_group_id_;
}
inline uint32_t CMsgProtoBufHeader::publisher_group_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.publisher_group_id)
  return _internal_publisher_group_id();
}
inline void CMsgProtoBufHeader::_internal_set_publisher_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.publisher_group_id_ = value;
}
inline void CMsgProtoBufHeader::set_publisher_group_id(uint32_t value) {
  _internal_set_publisher_group_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.publisher_group_id)
}

// optional uint32 sysid = 20;
inline bool CMsgProtoBufHeader::_internal_has_sysid() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_sysid() const {
  return _internal_has_sysid();
}
inline void CMsgProtoBufHeader::clear_sysid() {
  _impl_.sysid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgProtoBufHeader::_internal_sysid() const {
  return _impl_.sysid_;
}
inline uint32_t CMsgProtoBufHeader::sysid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.sysid)
  return _internal_sysid();
}
inline void CMsgProtoBufHeader::_internal_set_sysid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.sysid_ = value;
}
inline void CMsgProtoBufHeader::set_sysid(uint32_t value) {
  _internal_set_sysid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.sysid)
}

// optional uint64 trace_tag = 21;
inline bool CMsgProtoBufHeader::_internal_has_trace_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_trace_tag() const {
  return _internal_has_trace_tag();
}
inline void CMsgProtoBufHeader::clear_trace_tag() {
  _impl_.trace_tag_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t CMsgProtoBufHeader::_internal_trace_tag() const {
  return _impl_.trace_tag_;
}
inline uint64_t CMsgProtoBufHeader::trace_tag() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.trace_tag)
  return _internal_trace_tag();
}
inline void CMsgProtoBufHeader::_internal_set_trace_tag(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.trace_tag_ = value;
}
inline void CMsgProtoBufHeader::set_trace_tag(uint64_t value) {
  _internal_set_trace_tag(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.trace_tag)
}

// optional uint32 webapi_key_id = 25;
inline bool CMsgProtoBufHeader::_internal_has_webapi_key_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_webapi_key_id() const {
  return _internal_has_webapi_key_id();
}
inline void CMsgProtoBufHeader::clear_webapi_key_id() {
  _impl_.webapi_key_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgProtoBufHeader::_internal_webapi_key_id() const {
  return _impl_.webapi_key_id_;
}
inline uint32_t CMsgProtoBufHeader::webapi_key_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.webapi_key_id)
  return _internal_webapi_key_id();
}
inline void CMsgProtoBufHeader::_internal_set_webapi_key_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.webapi_key_id_ = value;
}
inline void CMsgProtoBufHeader::set_webapi_key_id(uint32_t value) {
  _internal_set_webapi_key_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.webapi_key_id)
}

// optional bool is_from_external_source = 26;
inline bool CMsgProtoBufHeader::_internal_has_is_from_external_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_is_from_external_source() const {
  return _internal_has_is_from_external_source();
}
inline void CMsgProtoBufHeader::clear_is_from_external_source() {
  _impl_.is_from_external_source_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool CMsgProtoBufHeader::_internal_is_from_external_source() const {
  return _impl_.is_from_external_source_;
}
inline bool CMsgProtoBufHeader::is_from_external_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.is_from_external_source)
  return _internal_is_from_external_source();
}
inline void CMsgProtoBufHeader::_internal_set_is_from_external_source(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.is_from_external_source_ = value;
}
inline void CMsgProtoBufHeader::set_is_from_external_source(bool value) {
  _internal_set_is_from_external_source(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.is_from_external_source)
}

// repeated uint32 forward_to_sysid = 27;
inline int CMsgProtoBufHeader::_internal_forward_to_sysid_size() const {
  return _impl_.forward_to_sysid_.size();
}
inline int CMsgProtoBufHeader::forward_to_sysid_size() const {
  return _internal_forward_to_sysid_size();
}
inline void CMsgProtoBufHeader::clear_forward_to_sysid() {
  _impl_.forward_to_sysid_.Clear();
}
inline uint32_t CMsgProtoBufHeader::_internal_forward_to_sysid(int index) const {
  return _impl_.forward_to_sysid_.Get(index);
}
inline uint32_t CMsgProtoBufHeader::forward_to_sysid(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.forward_to_sysid)
  return _internal_forward_to_sysid(index);
}
inline void CMsgProtoBufHeader::set_forward_to_sysid(int index, uint32_t value) {
  _impl_.forward_to_sysid_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.forward_to_sysid)
}
inline void CMsgProtoBufHeader::_internal_add_forward_to_sysid(uint32_t value) {
  _impl_.forward_to_sysid_.Add(value);
}
inline void CMsgProtoBufHeader::add_forward_to_sysid(uint32_t value) {
  _internal_add_forward_to_sysid(value);
  // @@protoc_insertion_point(field_add:CMsgProtoBufHeader.forward_to_sysid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgProtoBufHeader::_internal_forward_to_sysid() const {
  return _impl_.forward_to_sysid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgProtoBufHeader::forward_to_sysid() const {
  // @@protoc_insertion_point(field_list:CMsgProtoBufHeader.forward_to_sysid)
  return _internal_forward_to_sysid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgProtoBufHeader::_internal_mutable_forward_to_sysid() {
  return &_impl_.forward_to_sysid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgProtoBufHeader::mutable_forward_to_sysid() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProtoBufHeader.forward_to_sysid)
  return _internal_mutable_forward_to_sysid();
}

// optional uint32 cm_sysid = 28;
inline bool CMsgProtoBufHeader::_internal_has_cm_sysid() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_cm_sysid() const {
  return _internal_has_cm_sysid();
}
inline void CMsgProtoBufHeader::clear_cm_sysid() {
  _impl_.cm_sysid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMsgProtoBufHeader::_internal_cm_sysid() const {
  return _impl_.cm_sysid_;
}
inline uint32_t CMsgProtoBufHeader::cm_sysid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.cm_sysid)
  return _internal_cm_sysid();
}
inline void CMsgProtoBufHeader::_internal_set_cm_sysid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.cm_sysid_ = value;
}
inline void CMsgProtoBufHeader::set_cm_sysid(uint32_t value) {
  _internal_set_cm_sysid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.cm_sysid)
}

// optional uint32 launcher_type = 31 [default = 0];
inline bool CMsgProtoBufHeader::_internal_has_launcher_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_launcher_type() const {
  return _internal_has_launcher_type();
}
inline void CMsgProtoBufHeader::clear_launcher_type() {
  _impl_.launcher_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgProtoBufHeader::_internal_launcher_type() const {
  return _impl_.launcher_type_;
}
inline uint32_t CMsgProtoBufHeader::launcher_type() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.launcher_type)
  return _internal_launcher_type();
}
inline void CMsgProtoBufHeader::_internal_set_launcher_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.launcher_type_ = value;
}
inline void CMsgProtoBufHeader::set_launcher_type(uint32_t value) {
  _internal_set_launcher_type(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.launcher_type)
}

// optional uint32 realm = 32 [default = 0];
inline bool CMsgProtoBufHeader::_internal_has_realm() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_realm() const {
  return _internal_has_realm();
}
inline void CMsgProtoBufHeader::clear_realm() {
  _impl_.realm_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgProtoBufHeader::_internal_realm() const {
  return _impl_.realm_;
}
inline uint32_t CMsgProtoBufHeader::realm() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.realm)
  return _internal_realm();
}
inline void CMsgProtoBufHeader::_internal_set_realm(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.realm_ = value;
}
inline void CMsgProtoBufHeader::set_realm(uint32_t value) {
  _internal_set_realm(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.realm)
}

// optional int32 timeout_ms = 33 [default = -1];
inline bool CMsgProtoBufHeader::_internal_has_timeout_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_timeout_ms() const {
  return _internal_has_timeout_ms();
}
inline void CMsgProtoBufHeader::clear_timeout_ms() {
  _impl_.timeout_ms_ = -1;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline int32_t CMsgProtoBufHeader::_internal_timeout_ms() const {
  return _impl_.timeout_ms_;
}
inline int32_t CMsgProtoBufHeader::timeout_ms() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.timeout_ms)
  return _internal_timeout_ms();
}
inline void CMsgProtoBufHeader::_internal_set_timeout_ms(int32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.timeout_ms_ = value;
}
inline void CMsgProtoBufHeader::set_timeout_ms(int32_t value) {
  _internal_set_timeout_ms(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.timeout_ms)
}

// optional string debug_source = 34;
inline bool CMsgProtoBufHeader::_internal_has_debug_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_debug_source() const {
  return _internal_has_debug_source();
}
inline void CMsgProtoBufHeader::clear_debug_source() {
  _impl_.debug_source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgProtoBufHeader::debug_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.debug_source)
  return _internal_debug_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgProtoBufHeader::set_debug_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.debug_source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.debug_source)
}
inline std::string* CMsgProtoBufHeader::mutable_debug_source() {
  std::string* _s = _internal_mutable_debug_source();
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.debug_source)
  return _s;
}
inline const std::string& CMsgProtoBufHeader::_internal_debug_source() const {
  return _impl_.debug_source_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_debug_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.debug_source_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_debug_source() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.debug_source_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::release_debug_source() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.debug_source)
  if (!_internal_has_debug_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.debug_source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.debug_source_.IsDefault()) {
    _impl_.debug_source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgProtoBufHeader::set_allocated_debug_source(std::string* debug_source) {
  if (debug_source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.debug_source_.SetAllocated(debug_source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.debug_source_.IsDefault()) {
    _impl_.debug_source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.debug_source)
}

// optional uint32 debug_source_string_index = 35;
inline bool CMsgProtoBufHeader::_internal_has_debug_source_string_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_debug_source_string_index() const {
  return _internal_has_debug_source_string_index();
}
inline void CMsgProtoBufHeader::clear_debug_source_string_index() {
  _impl_.debug_source_string_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CMsgProtoBufHeader::_internal_debug_source_string_index() const {
  return _impl_.debug_source_string_index_;
}
inline uint32_t CMsgProtoBufHeader::debug_source_string_index() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.debug_source_string_index)
  return _internal_debug_source_string_index();
}
inline void CMsgProtoBufHeader::_internal_set_debug_source_string_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.debug_source_string_index_ = value;
}
inline void CMsgProtoBufHeader::set_debug_source_string_index(uint32_t value) {
  _internal_set_debug_source_string_index(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.debug_source_string_index)
}

// optional uint64 token_id = 36;
inline bool CMsgProtoBufHeader::_internal_has_token_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_token_id() const {
  return _internal_has_token_id();
}
inline void CMsgProtoBufHeader::clear_token_id() {
  _impl_.token_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint64_t CMsgProtoBufHeader::_internal_token_id() const {
  return _impl_.token_id_;
}
inline uint64_t CMsgProtoBufHeader::token_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.token_id)
  return _internal_token_id();
}
inline void CMsgProtoBufHeader::_internal_set_token_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.token_id_ = value;
}
inline void CMsgProtoBufHeader::set_token_id(uint64_t value) {
  _internal_set_token_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.token_id)
}

// optional .CMsgGCRoutingProtoBufHeader routing_gc = 37;
inline bool CMsgProtoBufHeader::_internal_has_routing_gc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routing_gc_ != nullptr);
  return value;
}
inline bool CMsgProtoBufHeader::has_routing_gc() const {
  return _internal_has_routing_gc();
}
inline void CMsgProtoBufHeader::clear_routing_gc() {
  if (_impl_.routing_gc_ != nullptr) _impl_.routing_gc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgGCRoutingProtoBufHeader& CMsgProtoBufHeader::_internal_routing_gc() const {
  const ::CMsgGCRoutingProtoBufHeader* p = _impl_.routing_gc_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCRoutingProtoBufHeader&>(
      ::_CMsgGCRoutingProtoBufHeader_default_instance_);
}
inline const ::CMsgGCRoutingProtoBufHeader& CMsgProtoBufHeader::routing_gc() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.routing_gc)
  return _internal_routing_gc();
}
inline void CMsgProtoBufHeader::unsafe_arena_set_allocated_routing_gc(
    ::CMsgGCRoutingProtoBufHeader* routing_gc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_gc_);
  }
  _impl_.routing_gc_ = routing_gc;
  if (routing_gc) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProtoBufHeader.routing_gc)
}
inline ::CMsgGCRoutingProtoBufHeader* CMsgProtoBufHeader::release_routing_gc() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgGCRoutingProtoBufHeader* temp = _impl_.routing_gc_;
  _impl_.routing_gc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCRoutingProtoBufHeader* CMsgProtoBufHeader::unsafe_arena_release_routing_gc() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.routing_gc)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgGCRoutingProtoBufHeader* temp = _impl_.routing_gc_;
  _impl_.routing_gc_ = nullptr;
  return temp;
}
inline ::CMsgGCRoutingProtoBufHeader* CMsgProtoBufHeader::_internal_mutable_routing_gc() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.routing_gc_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCRoutingProtoBufHeader>(GetArenaForAllocation());
    _impl_.routing_gc_ = p;
  }
  return _impl_.routing_gc_;
}
inline ::CMsgGCRoutingProtoBufHeader* CMsgProtoBufHeader::mutable_routing_gc() {
  ::CMsgGCRoutingProtoBufHeader* _msg = _internal_mutable_routing_gc();
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.routing_gc)
  return _msg;
}
inline void CMsgProtoBufHeader::set_allocated_routing_gc(::CMsgGCRoutingProtoBufHeader* routing_gc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.routing_gc_;
  }
  if (routing_gc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_gc);
    if (message_arena != submessage_arena) {
      routing_gc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_gc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.routing_gc_ = routing_gc;
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.routing_gc)
}

// optional .CMsgProtoBufHeader.ESessionDisposition session_disposition = 38 [default = k_ESessionDispositionNormal];
inline bool CMsgProtoBufHeader::_internal_has_session_disposition() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_session_disposition() const {
  return _internal_has_session_disposition();
}
inline void CMsgProtoBufHeader::clear_session_disposition() {
  _impl_.session_disposition_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::CMsgProtoBufHeader_ESessionDisposition CMsgProtoBufHeader::_internal_session_disposition() const {
  return static_cast< ::CMsgProtoBufHeader_ESessionDisposition >(_impl_.session_disposition_);
}
inline ::CMsgProtoBufHeader_ESessionDisposition CMsgProtoBufHeader::session_disposition() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.session_disposition)
  return _internal_session_disposition();
}
inline void CMsgProtoBufHeader::_internal_set_session_disposition(::CMsgProtoBufHeader_ESessionDisposition value) {
  assert(::CMsgProtoBufHeader_ESessionDisposition_IsValid(value));
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.session_disposition_ = value;
}
inline void CMsgProtoBufHeader::set_session_disposition(::CMsgProtoBufHeader_ESessionDisposition value) {
  _internal_set_session_disposition(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.session_disposition)
}

// optional string wg_token = 39;
inline bool CMsgProtoBufHeader::_internal_has_wg_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_wg_token() const {
  return _internal_has_wg_token();
}
inline void CMsgProtoBufHeader::clear_wg_token() {
  _impl_.wg_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgProtoBufHeader::wg_token() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.wg_token)
  return _internal_wg_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgProtoBufHeader::set_wg_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.wg_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.wg_token)
}
inline std::string* CMsgProtoBufHeader::mutable_wg_token() {
  std::string* _s = _internal_mutable_wg_token();
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.wg_token)
  return _s;
}
inline const std::string& CMsgProtoBufHeader::_internal_wg_token() const {
  return _impl_.wg_token_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_wg_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.wg_token_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_wg_token() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.wg_token_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::release_wg_token() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.wg_token)
  if (!_internal_has_wg_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.wg_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wg_token_.IsDefault()) {
    _impl_.wg_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgProtoBufHeader::set_allocated_wg_token(std::string* wg_token) {
  if (wg_token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.wg_token_.SetAllocated(wg_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wg_token_.IsDefault()) {
    _impl_.wg_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.wg_token)
}

// optional string webui_auth_key = 40;
inline bool CMsgProtoBufHeader::_internal_has_webui_auth_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_webui_auth_key() const {
  return _internal_has_webui_auth_key();
}
inline void CMsgProtoBufHeader::clear_webui_auth_key() {
  _impl_.webui_auth_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgProtoBufHeader::webui_auth_key() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.webui_auth_key)
  return _internal_webui_auth_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgProtoBufHeader::set_webui_auth_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.webui_auth_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.webui_auth_key)
}
inline std::string* CMsgProtoBufHeader::mutable_webui_auth_key() {
  std::string* _s = _internal_mutable_webui_auth_key();
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.webui_auth_key)
  return _s;
}
inline const std::string& CMsgProtoBufHeader::_internal_webui_auth_key() const {
  return _impl_.webui_auth_key_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_webui_auth_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.webui_auth_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_webui_auth_key() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.webui_auth_key_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::release_webui_auth_key() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.webui_auth_key)
  if (!_internal_has_webui_auth_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.webui_auth_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.webui_auth_key_.IsDefault()) {
    _impl_.webui_auth_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgProtoBufHeader::set_allocated_webui_auth_key(std::string* webui_auth_key) {
  if (webui_auth_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.webui_auth_key_.SetAllocated(webui_auth_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.webui_auth_key_.IsDefault()) {
    _impl_.webui_auth_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.webui_auth_key)
}

// uint32 ip = 15;
inline bool CMsgProtoBufHeader::_internal_has_ip() const {
  return ip_addr_case() == kIp;
}
inline bool CMsgProtoBufHeader::has_ip() const {
  return _internal_has_ip();
}
inline void CMsgProtoBufHeader::set_has_ip() {
  _impl_._oneof_case_[0] = kIp;
}
inline void CMsgProtoBufHeader::clear_ip() {
  if (_internal_has_ip()) {
    _impl_.ip_addr_.ip_ = 0u;
    clear_has_ip_addr();
  }
}
inline uint32_t CMsgProtoBufHeader::_internal_ip() const {
  if (_internal_has_ip()) {
    return _impl_.ip_addr_.ip_;
  }
  return 0u;
}
inline void CMsgProtoBufHeader::_internal_set_ip(uint32_t value) {
  if (!_internal_has_ip()) {
    clear_ip_addr();
    set_has_ip();
  }
  _impl_.ip_addr_.ip_ = value;
}
inline uint32_t CMsgProtoBufHeader::ip() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.ip)
  return _internal_ip();
}
inline void CMsgProtoBufHeader::set_ip(uint32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.ip)
}

// bytes ip_v6 = 29;
inline bool CMsgProtoBufHeader::_internal_has_ip_v6() const {
  return ip_addr_case() == kIpV6;
}
inline bool CMsgProtoBufHeader::has_ip_v6() const {
  return _internal_has_ip_v6();
}
inline void CMsgProtoBufHeader::set_has_ip_v6() {
  _impl_._oneof_case_[0] = kIpV6;
}
inline void CMsgProtoBufHeader::clear_ip_v6() {
  if (_internal_has_ip_v6()) {
    _impl_.ip_addr_.ip_v6_.Destroy();
    clear_has_ip_addr();
  }
}
inline const std::string& CMsgProtoBufHeader::ip_v6() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.ip_v6)
  return _internal_ip_v6();
}
template <typename ArgT0, typename... ArgT>
inline void CMsgProtoBufHeader::set_ip_v6(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ip_v6()) {
    clear_ip_addr();
    set_has_ip_v6();
    _impl_.ip_addr_.ip_v6_.InitDefault();
  }
  _impl_.ip_addr_.ip_v6_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.ip_v6)
}
inline std::string* CMsgProtoBufHeader::mutable_ip_v6() {
  std::string* _s = _internal_mutable_ip_v6();
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.ip_v6)
  return _s;
}
inline const std::string& CMsgProtoBufHeader::_internal_ip_v6() const {
  if (_internal_has_ip_v6()) {
    return _impl_.ip_addr_.ip_v6_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CMsgProtoBufHeader::_internal_set_ip_v6(const std::string& value) {
  if (!_internal_has_ip_v6()) {
    clear_ip_addr();
    set_has_ip_v6();
    _impl_.ip_addr_.ip_v6_.InitDefault();
  }
  _impl_.ip_addr_.ip_v6_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_ip_v6() {
  if (!_internal_has_ip_v6()) {
    clear_ip_addr();
    set_has_ip_v6();
    _impl_.ip_addr_.ip_v6_.InitDefault();
  }
  return _impl_.ip_addr_.ip_v6_.Mutable(      GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::release_ip_v6() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.ip_v6)
  if (_internal_has_ip_v6()) {
    clear_has_ip_addr();
    return _impl_.ip_addr_.ip_v6_.Release();
  } else {
    return nullptr;
  }
}
inline void CMsgProtoBufHeader::set_allocated_ip_v6(std::string* ip_v6) {
  if (has_ip_addr()) {
    clear_ip_addr();
  }
  if (ip_v6 != nullptr) {
    set_has_ip_v6();
    _impl_.ip_addr_.ip_v6_.InitAllocated(ip_v6, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.ip_v6)
}

inline bool CMsgProtoBufHeader::has_ip_addr() const {
  return ip_addr_case() != IP_ADDR_NOT_SET;
}
inline void CMsgProtoBufHeader::clear_has_ip_addr() {
  _impl_._oneof_case_[0] = IP_ADDR_NOT_SET;
}
inline CMsgProtoBufHeader::IpAddrCase CMsgProtoBufHeader::ip_addr_case() const {
  return CMsgProtoBufHeader::IpAddrCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgMulti

// optional uint32 size_unzipped = 1;
inline bool CMsgMulti::_internal_has_size_unzipped() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMulti::has_size_unzipped() const {
  return _internal_has_size_unzipped();
}
inline void CMsgMulti::clear_size_unzipped() {
  _impl_.size_unzipped_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgMulti::_internal_size_unzipped() const {
  return _impl_.size_unzipped_;
}
inline uint32_t CMsgMulti::size_unzipped() const {
  // @@protoc_insertion_point(field_get:CMsgMulti.size_unzipped)
  return _internal_size_unzipped();
}
inline void CMsgMulti::_internal_set_size_unzipped(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.size_unzipped_ = value;
}
inline void CMsgMulti::set_size_unzipped(uint32_t value) {
  _internal_set_size_unzipped(value);
  // @@protoc_insertion_point(field_set:CMsgMulti.size_unzipped)
}

// optional bytes message_body = 2;
inline bool CMsgMulti::_internal_has_message_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMulti::has_message_body() const {
  return _internal_has_message_body();
}
inline void CMsgMulti::clear_message_body() {
  _impl_.message_body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgMulti::message_body() const {
  // @@protoc_insertion_point(field_get:CMsgMulti.message_body)
  return _internal_message_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgMulti::set_message_body(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgMulti.message_body)
}
inline std::string* CMsgMulti::mutable_message_body() {
  std::string* _s = _internal_mutable_message_body();
  // @@protoc_insertion_point(field_mutable:CMsgMulti.message_body)
  return _s;
}
inline const std::string& CMsgMulti::_internal_message_body() const {
  return _impl_.message_body_.Get();
}
inline void CMsgMulti::_internal_set_message_body(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_body_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgMulti::_internal_mutable_message_body() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_body_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgMulti::release_message_body() {
  // @@protoc_insertion_point(field_release:CMsgMulti.message_body)
  if (!_internal_has_message_body()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_body_.IsDefault()) {
    _impl_.message_body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgMulti::set_allocated_message_body(std::string* message_body) {
  if (message_body != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_body_.SetAllocated(message_body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_body_.IsDefault()) {
    _impl_.message_body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgMulti.message_body)
}

// -------------------------------------------------------------------

// CMsgProtobufWrapped

// optional bytes message_body = 1;
inline bool CMsgProtobufWrapped::_internal_has_message_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProtobufWrapped::has_message_body() const {
  return _internal_has_message_body();
}
inline void CMsgProtobufWrapped::clear_message_body() {
  _impl_.message_body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgProtobufWrapped::message_body() const {
  // @@protoc_insertion_point(field_get:CMsgProtobufWrapped.message_body)
  return _internal_message_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgProtobufWrapped::set_message_body(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgProtobufWrapped.message_body)
}
inline std::string* CMsgProtobufWrapped::mutable_message_body() {
  std::string* _s = _internal_mutable_message_body();
  // @@protoc_insertion_point(field_mutable:CMsgProtobufWrapped.message_body)
  return _s;
}
inline const std::string& CMsgProtobufWrapped::_internal_message_body() const {
  return _impl_.message_body_.Get();
}
inline void CMsgProtobufWrapped::_internal_set_message_body(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_body_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgProtobufWrapped::_internal_mutable_message_body() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_body_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgProtobufWrapped::release_message_body() {
  // @@protoc_insertion_point(field_release:CMsgProtobufWrapped.message_body)
  if (!_internal_has_message_body()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_body_.IsDefault()) {
    _impl_.message_body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgProtobufWrapped::set_allocated_message_body(std::string* message_body) {
  if (message_body != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_body_.SetAllocated(message_body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_body_.IsDefault()) {
    _impl_.message_body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgProtobufWrapped.message_body)
}

// -------------------------------------------------------------------

// CMsgAuthTicket

// optional uint32 estate = 1;
inline bool CMsgAuthTicket::_internal_has_estate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_estate() const {
  return _internal_has_estate();
}
inline void CMsgAuthTicket::clear_estate() {
  _impl_.estate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgAuthTicket::_internal_estate() const {
  return _impl_.estate_;
}
inline uint32_t CMsgAuthTicket::estate() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.estate)
  return _internal_estate();
}
inline void CMsgAuthTicket::_internal_set_estate(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.estate_ = value;
}
inline void CMsgAuthTicket::set_estate(uint32_t value) {
  _internal_set_estate(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.estate)
}

// optional uint32 eresult = 2 [default = 2];
inline bool CMsgAuthTicket::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgAuthTicket::clear_eresult() {
  _impl_.eresult_ = 2u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgAuthTicket::_internal_eresult() const {
  return _impl_.eresult_;
}
inline uint32_t CMsgAuthTicket::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.eresult)
  return _internal_eresult();
}
inline void CMsgAuthTicket::_internal_set_eresult(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.eresult_ = value;
}
inline void CMsgAuthTicket::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.eresult)
}

// optional fixed64 steamid = 3;
inline bool CMsgAuthTicket::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgAuthTicket::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgAuthTicket::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgAuthTicket::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.steamid)
  return _internal_steamid();
}
inline void CMsgAuthTicket::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.steamid_ = value;
}
inline void CMsgAuthTicket::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.steamid)
}

// optional fixed64 gameid = 4;
inline bool CMsgAuthTicket::_internal_has_gameid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_gameid() const {
  return _internal_has_gameid();
}
inline void CMsgAuthTicket::clear_gameid() {
  _impl_.gameid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CMsgAuthTicket::_internal_gameid() const {
  return _impl_.gameid_;
}
inline uint64_t CMsgAuthTicket::gameid() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.gameid)
  return _internal_gameid();
}
inline void CMsgAuthTicket::_internal_set_gameid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.gameid_ = value;
}
inline void CMsgAuthTicket::set_gameid(uint64_t value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.gameid)
}

// optional uint32 h_steam_pipe = 5;
inline bool CMsgAuthTicket::_internal_has_h_steam_pipe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_h_steam_pipe() const {
  return _internal_has_h_steam_pipe();
}
inline void CMsgAuthTicket::clear_h_steam_pipe() {
  _impl_.h_steam_pipe_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgAuthTicket::_internal_h_steam_pipe() const {
  return _impl_.h_steam_pipe_;
}
inline uint32_t CMsgAuthTicket::h_steam_pipe() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.h_steam_pipe)
  return _internal_h_steam_pipe();
}
inline void CMsgAuthTicket::_internal_set_h_steam_pipe(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.h_steam_pipe_ = value;
}
inline void CMsgAuthTicket::set_h_steam_pipe(uint32_t value) {
  _internal_set_h_steam_pipe(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.h_steam_pipe)
}

// optional uint32 ticket_crc = 6;
inline bool CMsgAuthTicket::_internal_has_ticket_crc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_ticket_crc() const {
  return _internal_has_ticket_crc();
}
inline void CMsgAuthTicket::clear_ticket_crc() {
  _impl_.ticket_crc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgAuthTicket::_internal_ticket_crc() const {
  return _impl_.ticket_crc_;
}
inline uint32_t CMsgAuthTicket::ticket_crc() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.ticket_crc)
  return _internal_ticket_crc();
}
inline void CMsgAuthTicket::_internal_set_ticket_crc(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ticket_crc_ = value;
}
inline void CMsgAuthTicket::set_ticket_crc(uint32_t value) {
  _internal_set_ticket_crc(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.ticket_crc)
}

// optional bytes ticket = 7;
inline bool CMsgAuthTicket::_internal_has_ticket() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_ticket() const {
  return _internal_has_ticket();
}
inline void CMsgAuthTicket::clear_ticket() {
  _impl_.ticket_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgAuthTicket::ticket() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgAuthTicket::set_ticket(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ticket_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.ticket)
}
inline std::string* CMsgAuthTicket::mutable_ticket() {
  std::string* _s = _internal_mutable_ticket();
  // @@protoc_insertion_point(field_mutable:CMsgAuthTicket.ticket)
  return _s;
}
inline const std::string& CMsgAuthTicket::_internal_ticket() const {
  return _impl_.ticket_.Get();
}
inline void CMsgAuthTicket::_internal_set_ticket(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ticket_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgAuthTicket::_internal_mutable_ticket() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ticket_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgAuthTicket::release_ticket() {
  // @@protoc_insertion_point(field_release:CMsgAuthTicket.ticket)
  if (!_internal_has_ticket()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ticket_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ticket_.IsDefault()) {
    _impl_.ticket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgAuthTicket::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ticket_.SetAllocated(ticket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ticket_.IsDefault()) {
    _impl_.ticket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgAuthTicket.ticket)
}

// optional bytes server_secret = 8;
inline bool CMsgAuthTicket::_internal_has_server_secret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_server_secret() const {
  return _internal_has_server_secret();
}
inline void CMsgAuthTicket::clear_server_secret() {
  _impl_.server_secret_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgAuthTicket::server_secret() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.server_secret)
  return _internal_server_secret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgAuthTicket::set_server_secret(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.server_secret_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.server_secret)
}
inline std::string* CMsgAuthTicket::mutable_server_secret() {
  std::string* _s = _internal_mutable_server_secret();
  // @@protoc_insertion_point(field_mutable:CMsgAuthTicket.server_secret)
  return _s;
}
inline const std::string& CMsgAuthTicket::_internal_server_secret() const {
  return _impl_.server_secret_.Get();
}
inline void CMsgAuthTicket::_internal_set_server_secret(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.server_secret_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgAuthTicket::_internal_mutable_server_secret() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.server_secret_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgAuthTicket::release_server_secret() {
  // @@protoc_insertion_point(field_release:CMsgAuthTicket.server_secret)
  if (!_internal_has_server_secret()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.server_secret_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_secret_.IsDefault()) {
    _impl_.server_secret_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgAuthTicket::set_allocated_server_secret(std::string* server_secret) {
  if (server_secret != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.server_secret_.SetAllocated(server_secret, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_secret_.IsDefault()) {
    _impl_.server_secret_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgAuthTicket.server_secret)
}

// optional uint32 ticket_type = 9;
inline bool CMsgAuthTicket::_internal_has_ticket_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_ticket_type() const {
  return _internal_has_ticket_type();
}
inline void CMsgAuthTicket::clear_ticket_type() {
  _impl_.ticket_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgAuthTicket::_internal_ticket_type() const {
  return _impl_.ticket_type_;
}
inline uint32_t CMsgAuthTicket::ticket_type() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.ticket_type)
  return _internal_ticket_type();
}
inline void CMsgAuthTicket::_internal_set_ticket_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ticket_type_ = value;
}
inline void CMsgAuthTicket::set_ticket_type(uint32_t value) {
  _internal_set_ticket_type(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.ticket_type)
}

// -------------------------------------------------------------------

// CCDDBAppDetailCommon

// optional uint32 appid = 1;
inline bool CCDDBAppDetailCommon::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_appid() const {
  return _internal_has_appid();
}
inline void CCDDBAppDetailCommon::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CCDDBAppDetailCommon::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CCDDBAppDetailCommon::appid() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.appid)
  return _internal_appid();
}
inline void CCDDBAppDetailCommon::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.appid_ = value;
}
inline void CCDDBAppDetailCommon::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.appid)
}

// optional string name = 2;
inline bool CCDDBAppDetailCommon::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_name() const {
  return _internal_has_name();
}
inline void CCDDBAppDetailCommon::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCDDBAppDetailCommon::name() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCDDBAppDetailCommon::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.name)
}
inline std::string* CCDDBAppDetailCommon::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.name)
  return _s;
}
inline const std::string& CCDDBAppDetailCommon::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CCDDBAppDetailCommon::release_name() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCDDBAppDetailCommon::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.name)
}

// optional string icon = 3;
inline bool CCDDBAppDetailCommon::_internal_has_icon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_icon() const {
  return _internal_has_icon();
}
inline void CCDDBAppDetailCommon::clear_icon() {
  _impl_.icon_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCDDBAppDetailCommon::icon() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCDDBAppDetailCommon::set_icon(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.icon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.icon)
}
inline std::string* CCDDBAppDetailCommon::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.icon)
  return _s;
}
inline const std::string& CCDDBAppDetailCommon::_internal_icon() const {
  return _impl_.icon_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_icon(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.icon_.Set(value, GetArenaForAllocation());
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_icon() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.icon_.Mutable(GetArenaForAllocation());
}
inline std::string* CCDDBAppDetailCommon::release_icon() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.icon_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.icon_.IsDefault()) {
    _impl_.icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCDDBAppDetailCommon::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.icon_.SetAllocated(icon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.icon_.IsDefault()) {
    _impl_.icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.icon)
}

// optional bool tool = 6;
inline bool CCDDBAppDetailCommon::_internal_has_tool() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_tool() const {
  return _internal_has_tool();
}
inline void CCDDBAppDetailCommon::clear_tool() {
  _impl_.tool_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CCDDBAppDetailCommon::_internal_tool() const {
  return _impl_.tool_;
}
inline bool CCDDBAppDetailCommon::tool() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.tool)
  return _internal_tool();
}
inline void CCDDBAppDetailCommon::_internal_set_tool(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.tool_ = value;
}
inline void CCDDBAppDetailCommon::set_tool(bool value) {
  _internal_set_tool(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.tool)
}

// optional bool demo = 7;
inline bool CCDDBAppDetailCommon::_internal_has_demo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_demo() const {
  return _internal_has_demo();
}
inline void CCDDBAppDetailCommon::clear_demo() {
  _impl_.demo_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CCDDBAppDetailCommon::_internal_demo() const {
  return _impl_.demo_;
}
inline bool CCDDBAppDetailCommon::demo() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.demo)
  return _internal_demo();
}
inline void CCDDBAppDetailCommon::_internal_set_demo(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.demo_ = value;
}
inline void CCDDBAppDetailCommon::set_demo(bool value) {
  _internal_set_demo(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.demo)
}

// optional bool media = 8;
inline bool CCDDBAppDetailCommon::_internal_has_media() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_media() const {
  return _internal_has_media();
}
inline void CCDDBAppDetailCommon::clear_media() {
  _impl_.media_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CCDDBAppDetailCommon::_internal_media() const {
  return _impl_.media_;
}
inline bool CCDDBAppDetailCommon::media() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.media)
  return _internal_media();
}
inline void CCDDBAppDetailCommon::_internal_set_media(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.media_ = value;
}
inline void CCDDBAppDetailCommon::set_media(bool value) {
  _internal_set_media(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.media)
}

// optional bool community_visible_stats = 9;
inline bool CCDDBAppDetailCommon::_internal_has_community_visible_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_community_visible_stats() const {
  return _internal_has_community_visible_stats();
}
inline void CCDDBAppDetailCommon::clear_community_visible_stats() {
  _impl_.community_visible_stats_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool CCDDBAppDetailCommon::_internal_community_visible_stats() const {
  return _impl_.community_visible_stats_;
}
inline bool CCDDBAppDetailCommon::community_visible_stats() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.community_visible_stats)
  return _internal_community_visible_stats();
}
inline void CCDDBAppDetailCommon::_internal_set_community_visible_stats(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.community_visible_stats_ = value;
}
inline void CCDDBAppDetailCommon::set_community_visible_stats(bool value) {
  _internal_set_community_visible_stats(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.community_visible_stats)
}

// optional string friendly_name = 10;
inline bool CCDDBAppDetailCommon::_internal_has_friendly_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_friendly_name() const {
  return _internal_has_friendly_name();
}
inline void CCDDBAppDetailCommon::clear_friendly_name() {
  _impl_.friendly_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCDDBAppDetailCommon::friendly_name() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.friendly_name)
  return _internal_friendly_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCDDBAppDetailCommon::set_friendly_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.friendly_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.friendly_name)
}
inline std::string* CCDDBAppDetailCommon::mutable_friendly_name() {
  std::string* _s = _internal_mutable_friendly_name();
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.friendly_name)
  return _s;
}
inline const std::string& CCDDBAppDetailCommon::_internal_friendly_name() const {
  return _impl_.friendly_name_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_friendly_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.friendly_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_friendly_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.friendly_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CCDDBAppDetailCommon::release_friendly_name() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.friendly_name)
  if (!_internal_has_friendly_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.friendly_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.friendly_name_.IsDefault()) {
    _impl_.friendly_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCDDBAppDetailCommon::set_allocated_friendly_name(std::string* friendly_name) {
  if (friendly_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.friendly_name_.SetAllocated(friendly_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.friendly_name_.IsDefault()) {
    _impl_.friendly_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.friendly_name)
}

// optional string propagation = 11;
inline bool CCDDBAppDetailCommon::_internal_has_propagation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_propagation() const {
  return _internal_has_propagation();
}
inline void CCDDBAppDetailCommon::clear_propagation() {
  _impl_.propagation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CCDDBAppDetailCommon::propagation() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.propagation)
  return _internal_propagation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCDDBAppDetailCommon::set_propagation(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.propagation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.propagation)
}
inline std::string* CCDDBAppDetailCommon::mutable_propagation() {
  std::string* _s = _internal_mutable_propagation();
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.propagation)
  return _s;
}
inline const std::string& CCDDBAppDetailCommon::_internal_propagation() const {
  return _impl_.propagation_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_propagation(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.propagation_.Set(value, GetArenaForAllocation());
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_propagation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.propagation_.Mutable(GetArenaForAllocation());
}
inline std::string* CCDDBAppDetailCommon::release_propagation() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.propagation)
  if (!_internal_has_propagation()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.propagation_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.propagation_.IsDefault()) {
    _impl_.propagation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCDDBAppDetailCommon::set_allocated_propagation(std::string* propagation) {
  if (propagation != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.propagation_.SetAllocated(propagation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.propagation_.IsDefault()) {
    _impl_.propagation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.propagation)
}

// optional bool has_adult_content = 12;
inline bool CCDDBAppDetailCommon::_internal_has_has_adult_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_has_adult_content() const {
  return _internal_has_has_adult_content();
}
inline void CCDDBAppDetailCommon::clear_has_adult_content() {
  _impl_.has_adult_content_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool CCDDBAppDetailCommon::_internal_has_adult_content() const {
  return _impl_.has_adult_content_;
}
inline bool CCDDBAppDetailCommon::has_adult_content() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.has_adult_content)
  return _internal_has_adult_content();
}
inline void CCDDBAppDetailCommon::_internal_set_has_adult_content(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.has_adult_content_ = value;
}
inline void CCDDBAppDetailCommon::set_has_adult_content(bool value) {
  _internal_set_has_adult_content(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.has_adult_content)
}

// optional bool is_visible_in_steam_china = 13;
inline bool CCDDBAppDetailCommon::_internal_has_is_visible_in_steam_china() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_is_visible_in_steam_china() const {
  return _internal_has_is_visible_in_steam_china();
}
inline void CCDDBAppDetailCommon::clear_is_visible_in_steam_china() {
  _impl_.is_visible_in_steam_china_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool CCDDBAppDetailCommon::_internal_is_visible_in_steam_china() const {
  return _impl_.is_visible_in_steam_china_;
}
inline bool CCDDBAppDetailCommon::is_visible_in_steam_china() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.is_visible_in_steam_china)
  return _internal_is_visible_in_steam_china();
}
inline void CCDDBAppDetailCommon::_internal_set_is_visible_in_steam_china(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.is_visible_in_steam_china_ = value;
}
inline void CCDDBAppDetailCommon::set_is_visible_in_steam_china(bool value) {
  _internal_set_is_visible_in_steam_china(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.is_visible_in_steam_china)
}

// optional uint32 app_type = 14;
inline bool CCDDBAppDetailCommon::_internal_has_app_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_app_type() const {
  return _internal_has_app_type();
}
inline void CCDDBAppDetailCommon::clear_app_type() {
  _impl_.app_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CCDDBAppDetailCommon::_internal_app_type() const {
  return _impl_.app_type_;
}
inline uint32_t CCDDBAppDetailCommon::app_type() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.app_type)
  return _internal_app_type();
}
inline void CCDDBAppDetailCommon::_internal_set_app_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.app_type_ = value;
}
inline void CCDDBAppDetailCommon::set_app_type(uint32_t value) {
  _internal_set_app_type(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.app_type)
}

// optional bool has_adult_content_sex = 15;
inline bool CCDDBAppDetailCommon::_internal_has_has_adult_content_sex() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_has_adult_content_sex() const {
  return _internal_has_has_adult_content_sex();
}
inline void CCDDBAppDetailCommon::clear_has_adult_content_sex() {
  _impl_.has_adult_content_sex_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool CCDDBAppDetailCommon::_internal_has_adult_content_sex() const {
  return _impl_.has_adult_content_sex_;
}
inline bool CCDDBAppDetailCommon::has_adult_content_sex() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.has_adult_content_sex)
  return _internal_has_adult_content_sex();
}
inline void CCDDBAppDetailCommon::_internal_set_has_adult_content_sex(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.has_adult_content_sex_ = value;
}
inline void CCDDBAppDetailCommon::set_has_adult_content_sex(bool value) {
  _internal_set_has_adult_content_sex(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.has_adult_content_sex)
}

// optional bool has_adult_content_violence = 16;
inline bool CCDDBAppDetailCommon::_internal_has_has_adult_content_violence() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_has_adult_content_violence() const {
  return _internal_has_has_adult_content_violence();
}
inline void CCDDBAppDetailCommon::clear_has_adult_content_violence() {
  _impl_.has_adult_content_violence_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool CCDDBAppDetailCommon::_internal_has_adult_content_violence() const {
  return _impl_.has_adult_content_violence_;
}
inline bool CCDDBAppDetailCommon::has_adult_content_violence() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.has_adult_content_violence)
  return _internal_has_adult_content_violence();
}
inline void CCDDBAppDetailCommon::_internal_set_has_adult_content_violence(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.has_adult_content_violence_ = value;
}
inline void CCDDBAppDetailCommon::set_has_adult_content_violence(bool value) {
  _internal_set_has_adult_content_violence(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.has_adult_content_violence)
}

// repeated uint32 content_descriptorids = 17;
inline int CCDDBAppDetailCommon::_internal_content_descriptorids_size() const {
  return _impl_.content_descriptorids_.size();
}
inline int CCDDBAppDetailCommon::content_descriptorids_size() const {
  return _internal_content_descriptorids_size();
}
inline void CCDDBAppDetailCommon::clear_content_descriptorids() {
  _impl_.content_descriptorids_.Clear();
}
inline uint32_t CCDDBAppDetailCommon::_internal_content_descriptorids(int index) const {
  return _impl_.content_descriptorids_.Get(index);
}
inline uint32_t CCDDBAppDetailCommon::content_descriptorids(int index) const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.content_descriptorids)
  return _internal_content_descriptorids(index);
}
inline void CCDDBAppDetailCommon::set_content_descriptorids(int index, uint32_t value) {
  _impl_.content_descriptorids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.content_descriptorids)
}
inline void CCDDBAppDetailCommon::_internal_add_content_descriptorids(uint32_t value) {
  _impl_.content_descriptorids_.Add(value);
}
inline void CCDDBAppDetailCommon::add_content_descriptorids(uint32_t value) {
  _internal_add_content_descriptorids(value);
  // @@protoc_insertion_point(field_add:CCDDBAppDetailCommon.content_descriptorids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CCDDBAppDetailCommon::_internal_content_descriptorids() const {
  return _impl_.content_descriptorids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CCDDBAppDetailCommon::content_descriptorids() const {
  // @@protoc_insertion_point(field_list:CCDDBAppDetailCommon.content_descriptorids)
  return _internal_content_descriptorids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CCDDBAppDetailCommon::_internal_mutable_content_descriptorids() {
  return &_impl_.content_descriptorids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CCDDBAppDetailCommon::mutable_content_descriptorids() {
  // @@protoc_insertion_point(field_mutable_list:CCDDBAppDetailCommon.content_descriptorids)
  return _internal_mutable_content_descriptorids();
}

// -------------------------------------------------------------------

// CMsgAppRights

// optional bool edit_info = 1;
inline bool CMsgAppRights::_internal_has_edit_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAppRights::has_edit_info() const {
  return _internal_has_edit_info();
}
inline void CMsgAppRights::clear_edit_info() {
  _impl_.edit_info_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgAppRights::_internal_edit_info() const {
  return _impl_.edit_info_;
}
inline bool CMsgAppRights::edit_info() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.edit_info)
  return _internal_edit_info();
}
inline void CMsgAppRights::_internal_set_edit_info(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.edit_info_ = value;
}
inline void CMsgAppRights::set_edit_info(bool value) {
  _internal_set_edit_info(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.edit_info)
}

// optional bool publish = 2;
inline bool CMsgAppRights::_internal_has_publish() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAppRights::has_publish() const {
  return _internal_has_publish();
}
inline void CMsgAppRights::clear_publish() {
  _impl_.publish_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgAppRights::_internal_publish() const {
  return _impl_.publish_;
}
inline bool CMsgAppRights::publish() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.publish)
  return _internal_publish();
}
inline void CMsgAppRights::_internal_set_publish(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.publish_ = value;
}
inline void CMsgAppRights::set_publish(bool value) {
  _internal_set_publish(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.publish)
}

// optional bool view_error_data = 3;
inline bool CMsgAppRights::_internal_has_view_error_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAppRights::has_view_error_data() const {
  return _internal_has_view_error_data();
}
inline void CMsgAppRights::clear_view_error_data() {
  _impl_.view_error_data_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgAppRights::_internal_view_error_data() const {
  return _impl_.view_error_data_;
}
inline bool CMsgAppRights::view_error_data() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.view_error_data)
  return _internal_view_error_data();
}
inline void CMsgAppRights::_internal_set_view_error_data(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.view_error_data_ = value;
}
inline void CMsgAppRights::set_view_error_data(bool value) {
  _internal_set_view_error_data(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.view_error_data)
}

// optional bool download = 4;
inline bool CMsgAppRights::_internal_has_download() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgAppRights::has_download() const {
  return _internal_has_download();
}
inline void CMsgAppRights::clear_download() {
  _impl_.download_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgAppRights::_internal_download() const {
  return _impl_.download_;
}
inline bool CMsgAppRights::download() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.download)
  return _internal_download();
}
inline void CMsgAppRights::_internal_set_download(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.download_ = value;
}
inline void CMsgAppRights::set_download(bool value) {
  _internal_set_download(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.download)
}

// optional bool upload_cdkeys = 5;
inline bool CMsgAppRights::_internal_has_upload_cdkeys() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgAppRights::has_upload_cdkeys() const {
  return _internal_has_upload_cdkeys();
}
inline void CMsgAppRights::clear_upload_cdkeys() {
  _impl_.upload_cdkeys_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgAppRights::_internal_upload_cdkeys() const {
  return _impl_.upload_cdkeys_;
}
inline bool CMsgAppRights::upload_cdkeys() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.upload_cdkeys)
  return _internal_upload_cdkeys();
}
inline void CMsgAppRights::_internal_set_upload_cdkeys(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.upload_cdkeys_ = value;
}
inline void CMsgAppRights::set_upload_cdkeys(bool value) {
  _internal_set_upload_cdkeys(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.upload_cdkeys)
}

// optional bool generate_cdkeys = 6;
inline bool CMsgAppRights::_internal_has_generate_cdkeys() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgAppRights::has_generate_cdkeys() const {
  return _internal_has_generate_cdkeys();
}
inline void CMsgAppRights::clear_generate_cdkeys() {
  _impl_.generate_cdkeys_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgAppRights::_internal_generate_cdkeys() const {
  return _impl_.generate_cdkeys_;
}
inline bool CMsgAppRights::generate_cdkeys() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.generate_cdkeys)
  return _internal_generate_cdkeys();
}
inline void CMsgAppRights::_internal_set_generate_cdkeys(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.generate_cdkeys_ = value;
}
inline void CMsgAppRights::set_generate_cdkeys(bool value) {
  _internal_set_generate_cdkeys(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.generate_cdkeys)
}

// optional bool view_financials = 7;
inline bool CMsgAppRights::_internal_has_view_financials() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgAppRights::has_view_financials() const {
  return _internal_has_view_financials();
}
inline void CMsgAppRights::clear_view_financials() {
  _impl_.view_financials_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgAppRights::_internal_view_financials() const {
  return _impl_.view_financials_;
}
inline bool CMsgAppRights::view_financials() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.view_financials)
  return _internal_view_financials();
}
inline void CMsgAppRights::_internal_set_view_financials(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.view_financials_ = value;
}
inline void CMsgAppRights::set_view_financials(bool value) {
  _internal_set_view_financials(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.view_financials)
}

// optional bool manage_ceg = 8;
inline bool CMsgAppRights::_internal_has_manage_ceg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgAppRights::has_manage_ceg() const {
  return _internal_has_manage_ceg();
}
inline void CMsgAppRights::clear_manage_ceg() {
  _impl_.manage_ceg_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgAppRights::_internal_manage_ceg() const {
  return _impl_.manage_ceg_;
}
inline bool CMsgAppRights::manage_ceg() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.manage_ceg)
  return _internal_manage_ceg();
}
inline void CMsgAppRights::_internal_set_manage_ceg(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.manage_ceg_ = value;
}
inline void CMsgAppRights::set_manage_ceg(bool value) {
  _internal_set_manage_ceg(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.manage_ceg)
}

// optional bool manage_signing = 9;
inline bool CMsgAppRights::_internal_has_manage_signing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgAppRights::has_manage_signing() const {
  return _internal_has_manage_signing();
}
inline void CMsgAppRights::clear_manage_signing() {
  _impl_.manage_signing_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgAppRights::_internal_manage_signing() const {
  return _impl_.manage_signing_;
}
inline bool CMsgAppRights::manage_signing() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.manage_signing)
  return _internal_manage_signing();
}
inline void CMsgAppRights::_internal_set_manage_signing(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.manage_signing_ = value;
}
inline void CMsgAppRights::set_manage_signing(bool value) {
  _internal_set_manage_signing(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.manage_signing)
}

// optional bool manage_cdkeys = 10;
inline bool CMsgAppRights::_internal_has_manage_cdkeys() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgAppRights::has_manage_cdkeys() const {
  return _internal_has_manage_cdkeys();
}
inline void CMsgAppRights::clear_manage_cdkeys() {
  _impl_.manage_cdkeys_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgAppRights::_internal_manage_cdkeys() const {
  return _impl_.manage_cdkeys_;
}
inline bool CMsgAppRights::manage_cdkeys() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.manage_cdkeys)
  return _internal_manage_cdkeys();
}
inline void CMsgAppRights::_internal_set_manage_cdkeys(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.manage_cdkeys_ = value;
}
inline void CMsgAppRights::set_manage_cdkeys(bool value) {
  _internal_set_manage_cdkeys(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.manage_cdkeys)
}

// optional bool edit_marketing = 11;
inline bool CMsgAppRights::_internal_has_edit_marketing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgAppRights::has_edit_marketing() const {
  return _internal_has_edit_marketing();
}
inline void CMsgAppRights::clear_edit_marketing() {
  _impl_.edit_marketing_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgAppRights::_internal_edit_marketing() const {
  return _impl_.edit_marketing_;
}
inline bool CMsgAppRights::edit_marketing() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.edit_marketing)
  return _internal_edit_marketing();
}
inline void CMsgAppRights::_internal_set_edit_marketing(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.edit_marketing_ = value;
}
inline void CMsgAppRights::set_edit_marketing(bool value) {
  _internal_set_edit_marketing(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.edit_marketing)
}

// optional bool economy_support = 12;
inline bool CMsgAppRights::_internal_has_economy_support() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgAppRights::has_economy_support() const {
  return _internal_has_economy_support();
}
inline void CMsgAppRights::clear_economy_support() {
  _impl_.economy_support_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgAppRights::_internal_economy_support() const {
  return _impl_.economy_support_;
}
inline bool CMsgAppRights::economy_support() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.economy_support)
  return _internal_economy_support();
}
inline void CMsgAppRights::_internal_set_economy_support(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.economy_support_ = value;
}
inline void CMsgAppRights::set_economy_support(bool value) {
  _internal_set_economy_support(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.economy_support)
}

// optional bool economy_support_supervisor = 13;
inline bool CMsgAppRights::_internal_has_economy_support_supervisor() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgAppRights::has_economy_support_supervisor() const {
  return _internal_has_economy_support_supervisor();
}
inline void CMsgAppRights::clear_economy_support_supervisor() {
  _impl_.economy_support_supervisor_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgAppRights::_internal_economy_support_supervisor() const {
  return _impl_.economy_support_supervisor_;
}
inline bool CMsgAppRights::economy_support_supervisor() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.economy_support_supervisor)
  return _internal_economy_support_supervisor();
}
inline void CMsgAppRights::_internal_set_economy_support_supervisor(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.economy_support_supervisor_ = value;
}
inline void CMsgAppRights::set_economy_support_supervisor(bool value) {
  _internal_set_economy_support_supervisor(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.economy_support_supervisor)
}

// optional bool manage_pricing = 14;
inline bool CMsgAppRights::_internal_has_manage_pricing() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgAppRights::has_manage_pricing() const {
  return _internal_has_manage_pricing();
}
inline void CMsgAppRights::clear_manage_pricing() {
  _impl_.manage_pricing_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgAppRights::_internal_manage_pricing() const {
  return _impl_.manage_pricing_;
}
inline bool CMsgAppRights::manage_pricing() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.manage_pricing)
  return _internal_manage_pricing();
}
inline void CMsgAppRights::_internal_set_manage_pricing(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.manage_pricing_ = value;
}
inline void CMsgAppRights::set_manage_pricing(bool value) {
  _internal_set_manage_pricing(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.manage_pricing)
}

// optional bool broadcast_live = 15;
inline bool CMsgAppRights::_internal_has_broadcast_live() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgAppRights::has_broadcast_live() const {
  return _internal_has_broadcast_live();
}
inline void CMsgAppRights::clear_broadcast_live() {
  _impl_.broadcast_live_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool CMsgAppRights::_internal_broadcast_live() const {
  return _impl_.broadcast_live_;
}
inline bool CMsgAppRights::broadcast_live() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.broadcast_live)
  return _internal_broadcast_live();
}
inline void CMsgAppRights::_internal_set_broadcast_live(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.broadcast_live_ = value;
}
inline void CMsgAppRights::set_broadcast_live(bool value) {
  _internal_set_broadcast_live(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.broadcast_live)
}

// optional bool view_marketing_traffic = 16;
inline bool CMsgAppRights::_internal_has_view_marketing_traffic() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgAppRights::has_view_marketing_traffic() const {
  return _internal_has_view_marketing_traffic();
}
inline void CMsgAppRights::clear_view_marketing_traffic() {
  _impl_.view_marketing_traffic_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool CMsgAppRights::_internal_view_marketing_traffic() const {
  return _impl_.view_marketing_traffic_;
}
inline bool CMsgAppRights::view_marketing_traffic() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.view_marketing_traffic)
  return _internal_view_marketing_traffic();
}
inline void CMsgAppRights::_internal_set_view_marketing_traffic(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.view_marketing_traffic_ = value;
}
inline void CMsgAppRights::set_view_marketing_traffic(bool value) {
  _internal_set_view_marketing_traffic(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.view_marketing_traffic)
}

// optional bool edit_store_display_content = 17;
inline bool CMsgAppRights::_internal_has_edit_store_display_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgAppRights::has_edit_store_display_content() const {
  return _internal_has_edit_store_display_content();
}
inline void CMsgAppRights::clear_edit_store_display_content() {
  _impl_.edit_store_display_content_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool CMsgAppRights::_internal_edit_store_display_content() const {
  return _impl_.edit_store_display_content_;
}
inline bool CMsgAppRights::edit_store_display_content() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.edit_store_display_content)
  return _internal_edit_store_display_content();
}
inline void CMsgAppRights::_internal_set_edit_store_display_content(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.edit_store_display_content_ = value;
}
inline void CMsgAppRights::set_edit_store_display_content(bool value) {
  _internal_set_edit_store_display_content(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.edit_store_display_content)
}

// -------------------------------------------------------------------

// CCuratorPreferences

// optional uint32 supported_languages = 1;
inline bool CCuratorPreferences::_internal_has_supported_languages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_supported_languages() const {
  return _internal_has_supported_languages();
}
inline void CCuratorPreferences::clear_supported_languages() {
  _impl_.supported_languages_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCuratorPreferences::_internal_supported_languages() const {
  return _impl_.supported_languages_;
}
inline uint32_t CCuratorPreferences::supported_languages() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.supported_languages)
  return _internal_supported_languages();
}
inline void CCuratorPreferences::_internal_set_supported_languages(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.supported_languages_ = value;
}
inline void CCuratorPreferences::set_supported_languages(uint32_t value) {
  _internal_set_supported_languages(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.supported_languages)
}

// optional bool platform_windows = 2;
inline bool CCuratorPreferences::_internal_has_platform_windows() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_platform_windows() const {
  return _internal_has_platform_windows();
}
inline void CCuratorPreferences::clear_platform_windows() {
  _impl_.platform_windows_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CCuratorPreferences::_internal_platform_windows() const {
  return _impl_.platform_windows_;
}
inline bool CCuratorPreferences::platform_windows() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.platform_windows)
  return _internal_platform_windows();
}
inline void CCuratorPreferences::_internal_set_platform_windows(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.platform_windows_ = value;
}
inline void CCuratorPreferences::set_platform_windows(bool value) {
  _internal_set_platform_windows(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.platform_windows)
}

// optional bool platform_mac = 3;
inline bool CCuratorPreferences::_internal_has_platform_mac() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_platform_mac() const {
  return _internal_has_platform_mac();
}
inline void CCuratorPreferences::clear_platform_mac() {
  _impl_.platform_mac_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CCuratorPreferences::_internal_platform_mac() const {
  return _impl_.platform_mac_;
}
inline bool CCuratorPreferences::platform_mac() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.platform_mac)
  return _internal_platform_mac();
}
inline void CCuratorPreferences::_internal_set_platform_mac(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.platform_mac_ = value;
}
inline void CCuratorPreferences::set_platform_mac(bool value) {
  _internal_set_platform_mac(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.platform_mac)
}

// optional bool platform_linux = 4;
inline bool CCuratorPreferences::_internal_has_platform_linux() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_platform_linux() const {
  return _internal_has_platform_linux();
}
inline void CCuratorPreferences::clear_platform_linux() {
  _impl_.platform_linux_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CCuratorPreferences::_internal_platform_linux() const {
  return _impl_.platform_linux_;
}
inline bool CCuratorPreferences::platform_linux() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.platform_linux)
  return _internal_platform_linux();
}
inline void CCuratorPreferences::_internal_set_platform_linux(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.platform_linux_ = value;
}
inline void CCuratorPreferences::set_platform_linux(bool value) {
  _internal_set_platform_linux(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.platform_linux)
}

// optional bool vr_content = 5;
inline bool CCuratorPreferences::_internal_has_vr_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_vr_content() const {
  return _internal_has_vr_content();
}
inline void CCuratorPreferences::clear_vr_content() {
  _impl_.vr_content_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CCuratorPreferences::_internal_vr_content() const {
  return _impl_.vr_content_;
}
inline bool CCuratorPreferences::vr_content() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.vr_content)
  return _internal_vr_content();
}
inline void CCuratorPreferences::_internal_set_vr_content(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.vr_content_ = value;
}
inline void CCuratorPreferences::set_vr_content(bool value) {
  _internal_set_vr_content(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.vr_content)
}

// optional bool adult_content_violence = 6;
inline bool CCuratorPreferences::_internal_has_adult_content_violence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_adult_content_violence() const {
  return _internal_has_adult_content_violence();
}
inline void CCuratorPreferences::clear_adult_content_violence() {
  _impl_.adult_content_violence_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool CCuratorPreferences::_internal_adult_content_violence() const {
  return _impl_.adult_content_violence_;
}
inline bool CCuratorPreferences::adult_content_violence() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.adult_content_violence)
  return _internal_adult_content_violence();
}
inline void CCuratorPreferences::_internal_set_adult_content_violence(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.adult_content_violence_ = value;
}
inline void CCuratorPreferences::set_adult_content_violence(bool value) {
  _internal_set_adult_content_violence(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.adult_content_violence)
}

// optional bool adult_content_sex = 7;
inline bool CCuratorPreferences::_internal_has_adult_content_sex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_adult_content_sex() const {
  return _internal_has_adult_content_sex();
}
inline void CCuratorPreferences::clear_adult_content_sex() {
  _impl_.adult_content_sex_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool CCuratorPreferences::_internal_adult_content_sex() const {
  return _impl_.adult_content_sex_;
}
inline bool CCuratorPreferences::adult_content_sex() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.adult_content_sex)
  return _internal_adult_content_sex();
}
inline void CCuratorPreferences::_internal_set_adult_content_sex(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.adult_content_sex_ = value;
}
inline void CCuratorPreferences::set_adult_content_sex(bool value) {
  _internal_set_adult_content_sex(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.adult_content_sex)
}

// optional uint32 timestamp_updated = 8;
inline bool CCuratorPreferences::_internal_has_timestamp_updated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_timestamp_updated() const {
  return _internal_has_timestamp_updated();
}
inline void CCuratorPreferences::clear_timestamp_updated() {
  _impl_.timestamp_updated_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CCuratorPreferences::_internal_timestamp_updated() const {
  return _impl_.timestamp_updated_;
}
inline uint32_t CCuratorPreferences::timestamp_updated() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.timestamp_updated)
  return _internal_timestamp_updated();
}
inline void CCuratorPreferences::_internal_set_timestamp_updated(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.timestamp_updated_ = value;
}
inline void CCuratorPreferences::set_timestamp_updated(uint32_t value) {
  _internal_set_timestamp_updated(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.timestamp_updated)
}

// repeated uint32 tagids_curated = 9;
inline int CCuratorPreferences::_internal_tagids_curated_size() const {
  return _impl_.tagids_curated_.size();
}
inline int CCuratorPreferences::tagids_curated_size() const {
  return _internal_tagids_curated_size();
}
inline void CCuratorPreferences::clear_tagids_curated() {
  _impl_.tagids_curated_.Clear();
}
inline uint32_t CCuratorPreferences::_internal_tagids_curated(int index) const {
  return _impl_.tagids_curated_.Get(index);
}
inline uint32_t CCuratorPreferences::tagids_curated(int index) const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.tagids_curated)
  return _internal_tagids_curated(index);
}
inline void CCuratorPreferences::set_tagids_curated(int index, uint32_t value) {
  _impl_.tagids_curated_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.tagids_curated)
}
inline void CCuratorPreferences::_internal_add_tagids_curated(uint32_t value) {
  _impl_.tagids_curated_.Add(value);
}
inline void CCuratorPreferences::add_tagids_curated(uint32_t value) {
  _internal_add_tagids_curated(value);
  // @@protoc_insertion_point(field_add:CCuratorPreferences.tagids_curated)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CCuratorPreferences::_internal_tagids_curated() const {
  return _impl_.tagids_curated_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CCuratorPreferences::tagids_curated() const {
  // @@protoc_insertion_point(field_list:CCuratorPreferences.tagids_curated)
  return _internal_tagids_curated();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CCuratorPreferences::_internal_mutable_tagids_curated() {
  return &_impl_.tagids_curated_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CCuratorPreferences::mutable_tagids_curated() {
  // @@protoc_insertion_point(field_mutable_list:CCuratorPreferences.tagids_curated)
  return _internal_mutable_tagids_curated();
}

// repeated uint32 tagids_filtered = 10;
inline int CCuratorPreferences::_internal_tagids_filtered_size() const {
  return _impl_.tagids_filtered_.size();
}
inline int CCuratorPreferences::tagids_filtered_size() const {
  return _internal_tagids_filtered_size();
}
inline void CCuratorPreferences::clear_tagids_filtered() {
  _impl_.tagids_filtered_.Clear();
}
inline uint32_t CCuratorPreferences::_internal_tagids_filtered(int index) const {
  return _impl_.tagids_filtered_.Get(index);
}
inline uint32_t CCuratorPreferences::tagids_filtered(int index) const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.tagids_filtered)
  return _internal_tagids_filtered(index);
}
inline void CCuratorPreferences::set_tagids_filtered(int index, uint32_t value) {
  _impl_.tagids_filtered_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.tagids_filtered)
}
inline void CCuratorPreferences::_internal_add_tagids_filtered(uint32_t value) {
  _impl_.tagids_filtered_.Add(value);
}
inline void CCuratorPreferences::add_tagids_filtered(uint32_t value) {
  _internal_add_tagids_filtered(value);
  // @@protoc_insertion_point(field_add:CCuratorPreferences.tagids_filtered)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CCuratorPreferences::_internal_tagids_filtered() const {
  return _impl_.tagids_filtered_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CCuratorPreferences::tagids_filtered() const {
  // @@protoc_insertion_point(field_list:CCuratorPreferences.tagids_filtered)
  return _internal_tagids_filtered();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CCuratorPreferences::_internal_mutable_tagids_filtered() {
  return &_impl_.tagids_filtered_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CCuratorPreferences::mutable_tagids_filtered() {
  // @@protoc_insertion_point(field_mutable_list:CCuratorPreferences.tagids_filtered)
  return _internal_mutable_tagids_filtered();
}

// optional string website_title = 11;
inline bool CCuratorPreferences::_internal_has_website_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_website_title() const {
  return _internal_has_website_title();
}
inline void CCuratorPreferences::clear_website_title() {
  _impl_.website_title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCuratorPreferences::website_title() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.website_title)
  return _internal_website_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCuratorPreferences::set_website_title(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.website_title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCuratorPreferences.website_title)
}
inline std::string* CCuratorPreferences::mutable_website_title() {
  std::string* _s = _internal_mutable_website_title();
  // @@protoc_insertion_point(field_mutable:CCuratorPreferences.website_title)
  return _s;
}
inline const std::string& CCuratorPreferences::_internal_website_title() const {
  return _impl_.website_title_.Get();
}
inline void CCuratorPreferences::_internal_set_website_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.website_title_.Set(value, GetArenaForAllocation());
}
inline std::string* CCuratorPreferences::_internal_mutable_website_title() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.website_title_.Mutable(GetArenaForAllocation());
}
inline std::string* CCuratorPreferences::release_website_title() {
  // @@protoc_insertion_point(field_release:CCuratorPreferences.website_title)
  if (!_internal_has_website_title()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.website_title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.website_title_.IsDefault()) {
    _impl_.website_title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCuratorPreferences::set_allocated_website_title(std::string* website_title) {
  if (website_title != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.website_title_.SetAllocated(website_title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.website_title_.IsDefault()) {
    _impl_.website_title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCuratorPreferences.website_title)
}

// optional string website_url = 12;
inline bool CCuratorPreferences::_internal_has_website_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_website_url() const {
  return _internal_has_website_url();
}
inline void CCuratorPreferences::clear_website_url() {
  _impl_.website_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCuratorPreferences::website_url() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.website_url)
  return _internal_website_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCuratorPreferences::set_website_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.website_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCuratorPreferences.website_url)
}
inline std::string* CCuratorPreferences::mutable_website_url() {
  std::string* _s = _internal_mutable_website_url();
  // @@protoc_insertion_point(field_mutable:CCuratorPreferences.website_url)
  return _s;
}
inline const std::string& CCuratorPreferences::_internal_website_url() const {
  return _impl_.website_url_.Get();
}
inline void CCuratorPreferences::_internal_set_website_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.website_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CCuratorPreferences::_internal_mutable_website_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.website_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CCuratorPreferences::release_website_url() {
  // @@protoc_insertion_point(field_release:CCuratorPreferences.website_url)
  if (!_internal_has_website_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.website_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.website_url_.IsDefault()) {
    _impl_.website_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCuratorPreferences::set_allocated_website_url(std::string* website_url) {
  if (website_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.website_url_.SetAllocated(website_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.website_url_.IsDefault()) {
    _impl_.website_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCuratorPreferences.website_url)
}

// optional string discussion_url = 13;
inline bool CCuratorPreferences::_internal_has_discussion_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_discussion_url() const {
  return _internal_has_discussion_url();
}
inline void CCuratorPreferences::clear_discussion_url() {
  _impl_.discussion_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCuratorPreferences::discussion_url() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.discussion_url)
  return _internal_discussion_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCuratorPreferences::set_discussion_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.discussion_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCuratorPreferences.discussion_url)
}
inline std::string* CCuratorPreferences::mutable_discussion_url() {
  std::string* _s = _internal_mutable_discussion_url();
  // @@protoc_insertion_point(field_mutable:CCuratorPreferences.discussion_url)
  return _s;
}
inline const std::string& CCuratorPreferences::_internal_discussion_url() const {
  return _impl_.discussion_url_.Get();
}
inline void CCuratorPreferences::_internal_set_discussion_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.discussion_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CCuratorPreferences::_internal_mutable_discussion_url() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.discussion_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CCuratorPreferences::release_discussion_url() {
  // @@protoc_insertion_point(field_release:CCuratorPreferences.discussion_url)
  if (!_internal_has_discussion_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.discussion_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.discussion_url_.IsDefault()) {
    _impl_.discussion_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCuratorPreferences::set_allocated_discussion_url(std::string* discussion_url) {
  if (discussion_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.discussion_url_.SetAllocated(discussion_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.discussion_url_.IsDefault()) {
    _impl_.discussion_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCuratorPreferences.discussion_url)
}

// optional bool show_broadcast = 14;
inline bool CCuratorPreferences::_internal_has_show_broadcast() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_show_broadcast() const {
  return _internal_has_show_broadcast();
}
inline void CCuratorPreferences::clear_show_broadcast() {
  _impl_.show_broadcast_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool CCuratorPreferences::_internal_show_broadcast() const {
  return _impl_.show_broadcast_;
}
inline bool CCuratorPreferences::show_broadcast() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.show_broadcast)
  return _internal_show_broadcast();
}
inline void CCuratorPreferences::_internal_set_show_broadcast(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.show_broadcast_ = value;
}
inline void CCuratorPreferences::set_show_broadcast(bool value) {
  _internal_set_show_broadcast(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.show_broadcast)
}

// -------------------------------------------------------------------

// CLocalizationToken

// optional uint32 language = 1;
inline bool CLocalizationToken::_internal_has_language() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLocalizationToken::has_language() const {
  return _internal_has_language();
}
inline void CLocalizationToken::clear_language() {
  _impl_.language_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CLocalizationToken::_internal_language() const {
  return _impl_.language_;
}
inline uint32_t CLocalizationToken::language() const {
  // @@protoc_insertion_point(field_get:CLocalizationToken.language)
  return _internal_language();
}
inline void CLocalizationToken::_internal_set_language(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.language_ = value;
}
inline void CLocalizationToken::set_language(uint32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CLocalizationToken.language)
}

// optional string localized_string = 2;
inline bool CLocalizationToken::_internal_has_localized_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLocalizationToken::has_localized_string() const {
  return _internal_has_localized_string();
}
inline void CLocalizationToken::clear_localized_string() {
  _impl_.localized_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CLocalizationToken::localized_string() const {
  // @@protoc_insertion_point(field_get:CLocalizationToken.localized_string)
  return _internal_localized_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CLocalizationToken::set_localized_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.localized_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CLocalizationToken.localized_string)
}
inline std::string* CLocalizationToken::mutable_localized_string() {
  std::string* _s = _internal_mutable_localized_string();
  // @@protoc_insertion_point(field_mutable:CLocalizationToken.localized_string)
  return _s;
}
inline const std::string& CLocalizationToken::_internal_localized_string() const {
  return _impl_.localized_string_.Get();
}
inline void CLocalizationToken::_internal_set_localized_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.localized_string_.Set(value, GetArenaForAllocation());
}
inline std::string* CLocalizationToken::_internal_mutable_localized_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.localized_string_.Mutable(GetArenaForAllocation());
}
inline std::string* CLocalizationToken::release_localized_string() {
  // @@protoc_insertion_point(field_release:CLocalizationToken.localized_string)
  if (!_internal_has_localized_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.localized_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localized_string_.IsDefault()) {
    _impl_.localized_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CLocalizationToken::set_allocated_localized_string(std::string* localized_string) {
  if (localized_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.localized_string_.SetAllocated(localized_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localized_string_.IsDefault()) {
    _impl_.localized_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CLocalizationToken.localized_string)
}

// -------------------------------------------------------------------

// CClanEventUserNewsTuple

// optional uint32 clanid = 1;
inline bool CClanEventUserNewsTuple::_internal_has_clanid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_clanid() const {
  return _internal_has_clanid();
}
inline void CClanEventUserNewsTuple::clear_clanid() {
  _impl_.clanid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClanEventUserNewsTuple::_internal_clanid() const {
  return _impl_.clanid_;
}
inline uint32_t CClanEventUserNewsTuple::clanid() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.clanid)
  return _internal_clanid();
}
inline void CClanEventUserNewsTuple::_internal_set_clanid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.clanid_ = value;
}
inline void CClanEventUserNewsTuple::set_clanid(uint32_t value) {
  _internal_set_clanid(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.clanid)
}

// optional fixed64 event_gid = 2;
inline bool CClanEventUserNewsTuple::_internal_has_event_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_event_gid() const {
  return _internal_has_event_gid();
}
inline void CClanEventUserNewsTuple::clear_event_gid() {
  _impl_.event_gid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CClanEventUserNewsTuple::_internal_event_gid() const {
  return _impl_.event_gid_;
}
inline uint64_t CClanEventUserNewsTuple::event_gid() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.event_gid)
  return _internal_event_gid();
}
inline void CClanEventUserNewsTuple::_internal_set_event_gid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_gid_ = value;
}
inline void CClanEventUserNewsTuple::set_event_gid(uint64_t value) {
  _internal_set_event_gid(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.event_gid)
}

// optional fixed64 announcement_gid = 3;
inline bool CClanEventUserNewsTuple::_internal_has_announcement_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_announcement_gid() const {
  return _internal_has_announcement_gid();
}
inline void CClanEventUserNewsTuple::clear_announcement_gid() {
  _impl_.announcement_gid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CClanEventUserNewsTuple::_internal_announcement_gid() const {
  return _impl_.announcement_gid_;
}
inline uint64_t CClanEventUserNewsTuple::announcement_gid() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.announcement_gid)
  return _internal_announcement_gid();
}
inline void CClanEventUserNewsTuple::_internal_set_announcement_gid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.announcement_gid_ = value;
}
inline void CClanEventUserNewsTuple::set_announcement_gid(uint64_t value) {
  _internal_set_announcement_gid(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.announcement_gid)
}

// optional uint32 rtime_start = 4;
inline bool CClanEventUserNewsTuple::_internal_has_rtime_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_rtime_start() const {
  return _internal_has_rtime_start();
}
inline void CClanEventUserNewsTuple::clear_rtime_start() {
  _impl_.rtime_start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CClanEventUserNewsTuple::_internal_rtime_start() const {
  return _impl_.rtime_start_;
}
inline uint32_t CClanEventUserNewsTuple::rtime_start() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.rtime_start)
  return _internal_rtime_start();
}
inline void CClanEventUserNewsTuple::_internal_set_rtime_start(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rtime_start_ = value;
}
inline void CClanEventUserNewsTuple::set_rtime_start(uint32_t value) {
  _internal_set_rtime_start(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.rtime_start)
}

// optional uint32 rtime_end = 5;
inline bool CClanEventUserNewsTuple::_internal_has_rtime_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_rtime_end() const {
  return _internal_has_rtime_end();
}
inline void CClanEventUserNewsTuple::clear_rtime_end() {
  _impl_.rtime_end_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CClanEventUserNewsTuple::_internal_rtime_end() const {
  return _impl_.rtime_end_;
}
inline uint32_t CClanEventUserNewsTuple::rtime_end() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.rtime_end)
  return _internal_rtime_end();
}
inline void CClanEventUserNewsTuple::_internal_set_rtime_end(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rtime_end_ = value;
}
inline void CClanEventUserNewsTuple::set_rtime_end(uint32_t value) {
  _internal_set_rtime_end(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.rtime_end)
}

// optional uint32 priority_score = 6;
inline bool CClanEventUserNewsTuple::_internal_has_priority_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_priority_score() const {
  return _internal_has_priority_score();
}
inline void CClanEventUserNewsTuple::clear_priority_score() {
  _impl_.priority_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CClanEventUserNewsTuple::_internal_priority_score() const {
  return _impl_.priority_score_;
}
inline uint32_t CClanEventUserNewsTuple::priority_score() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.priority_score)
  return _internal_priority_score();
}
inline void CClanEventUserNewsTuple::_internal_set_priority_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.priority_score_ = value;
}
inline void CClanEventUserNewsTuple::set_priority_score(uint32_t value) {
  _internal_set_priority_score(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.priority_score)
}

// optional uint32 type = 7;
inline bool CClanEventUserNewsTuple::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_type() const {
  return _internal_has_type();
}
inline void CClanEventUserNewsTuple::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CClanEventUserNewsTuple::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t CClanEventUserNewsTuple::type() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.type)
  return _internal_type();
}
inline void CClanEventUserNewsTuple::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.type_ = value;
}
inline void CClanEventUserNewsTuple::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.type)
}

// optional uint32 clamp_range_slot = 8;
inline bool CClanEventUserNewsTuple::_internal_has_clamp_range_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_clamp_range_slot() const {
  return _internal_has_clamp_range_slot();
}
inline void CClanEventUserNewsTuple::clear_clamp_range_slot() {
  _impl_.clamp_range_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CClanEventUserNewsTuple::_internal_clamp_range_slot() const {
  return _impl_.clamp_range_slot_;
}
inline uint32_t CClanEventUserNewsTuple::clamp_range_slot() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.clamp_range_slot)
  return _internal_clamp_range_slot();
}
inline void CClanEventUserNewsTuple::_internal_set_clamp_range_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.clamp_range_slot_ = value;
}
inline void CClanEventUserNewsTuple::set_clamp_range_slot(uint32_t value) {
  _internal_set_clamp_range_slot(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.clamp_range_slot)
}

// optional uint32 appid = 9;
inline bool CClanEventUserNewsTuple::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_appid() const {
  return _internal_has_appid();
}
inline void CClanEventUserNewsTuple::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CClanEventUserNewsTuple::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CClanEventUserNewsTuple::appid() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.appid)
  return _internal_appid();
}
inline void CClanEventUserNewsTuple::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.appid_ = value;
}
inline void CClanEventUserNewsTuple::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.appid)
}

// optional uint32 rtime32_last_modified = 10;
inline bool CClanEventUserNewsTuple::_internal_has_rtime32_last_modified() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_rtime32_last_modified() const {
  return _internal_has_rtime32_last_modified();
}
inline void CClanEventUserNewsTuple::clear_rtime32_last_modified() {
  _impl_.rtime32_last_modified_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CClanEventUserNewsTuple::_internal_rtime32_last_modified() const {
  return _impl_.rtime32_last_modified_;
}
inline uint32_t CClanEventUserNewsTuple::rtime32_last_modified() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.rtime32_last_modified)
  return _internal_rtime32_last_modified();
}
inline void CClanEventUserNewsTuple::_internal_set_rtime32_last_modified(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.rtime32_last_modified_ = value;
}
inline void CClanEventUserNewsTuple::set_rtime32_last_modified(uint32_t value) {
  _internal_set_rtime32_last_modified(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.rtime32_last_modified)
}

// -------------------------------------------------------------------

// CClanMatchEventByRange

// optional uint32 rtime_before = 1;
inline bool CClanMatchEventByRange::_internal_has_rtime_before() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClanMatchEventByRange::has_rtime_before() const {
  return _internal_has_rtime_before();
}
inline void CClanMatchEventByRange::clear_rtime_before() {
  _impl_.rtime_before_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CClanMatchEventByRange::_internal_rtime_before() const {
  return _impl_.rtime_before_;
}
inline uint32_t CClanMatchEventByRange::rtime_before() const {
  // @@protoc_insertion_point(field_get:CClanMatchEventByRange.rtime_before)
  return _internal_rtime_before();
}
inline void CClanMatchEventByRange::_internal_set_rtime_before(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rtime_before_ = value;
}
inline void CClanMatchEventByRange::set_rtime_before(uint32_t value) {
  _internal_set_rtime_before(value);
  // @@protoc_insertion_point(field_set:CClanMatchEventByRange.rtime_before)
}

// optional uint32 rtime_after = 2;
inline bool CClanMatchEventByRange::_internal_has_rtime_after() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClanMatchEventByRange::has_rtime_after() const {
  return _internal_has_rtime_after();
}
inline void CClanMatchEventByRange::clear_rtime_after() {
  _impl_.rtime_after_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClanMatchEventByRange::_internal_rtime_after() const {
  return _impl_.rtime_after_;
}
inline uint32_t CClanMatchEventByRange::rtime_after() const {
  // @@protoc_insertion_point(field_get:CClanMatchEventByRange.rtime_after)
  return _internal_rtime_after();
}
inline void CClanMatchEventByRange::_internal_set_rtime_after(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rtime_after_ = value;
}
inline void CClanMatchEventByRange::set_rtime_after(uint32_t value) {
  _internal_set_rtime_after(value);
  // @@protoc_insertion_point(field_set:CClanMatchEventByRange.rtime_after)
}

// optional uint32 qualified = 3;
inline bool CClanMatchEventByRange::_internal_has_qualified() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClanMatchEventByRange::has_qualified() const {
  return _internal_has_qualified();
}
inline void CClanMatchEventByRange::clear_qualified() {
  _impl_.qualified_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CClanMatchEventByRange::_internal_qualified() const {
  return _impl_.qualified_;
}
inline uint32_t CClanMatchEventByRange::qualified() const {
  // @@protoc_insertion_point(field_get:CClanMatchEventByRange.qualified)
  return _internal_qualified();
}
inline void CClanMatchEventByRange::_internal_set_qualified(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.qualified_ = value;
}
inline void CClanMatchEventByRange::set_qualified(uint32_t value) {
  _internal_set_qualified(value);
  // @@protoc_insertion_point(field_set:CClanMatchEventByRange.qualified)
}

// repeated .CClanEventUserNewsTuple events = 4;
inline int CClanMatchEventByRange::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int CClanMatchEventByRange::events_size() const {
  return _internal_events_size();
}
inline void CClanMatchEventByRange::clear_events() {
  _impl_.events_.Clear();
}
inline ::CClanEventUserNewsTuple* CClanMatchEventByRange::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:CClanMatchEventByRange.events)
  return _impl_.events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClanEventUserNewsTuple >*
CClanMatchEventByRange::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:CClanMatchEventByRange.events)
  return &_impl_.events_;
}
inline const ::CClanEventUserNewsTuple& CClanMatchEventByRange::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const ::CClanEventUserNewsTuple& CClanMatchEventByRange::events(int index) const {
  // @@protoc_insertion_point(field_get:CClanMatchEventByRange.events)
  return _internal_events(index);
}
inline ::CClanEventUserNewsTuple* CClanMatchEventByRange::_internal_add_events() {
  return _impl_.events_.Add();
}
inline ::CClanEventUserNewsTuple* CClanMatchEventByRange::add_events() {
  ::CClanEventUserNewsTuple* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:CClanMatchEventByRange.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClanEventUserNewsTuple >&
CClanMatchEventByRange::events() const {
  // @@protoc_insertion_point(field_list:CClanMatchEventByRange.events)
  return _impl_.events_;
}

// -------------------------------------------------------------------

// CCommunity_ClanAnnouncementInfo

// optional uint64 gid = 1;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_gid() const {
  return _internal_has_gid();
}
inline void CCommunity_ClanAnnouncementInfo::clear_gid() {
  _impl_.gid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CCommunity_ClanAnnouncementInfo::_internal_gid() const {
  return _impl_.gid_;
}
inline uint64_t CCommunity_ClanAnnouncementInfo::gid() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.gid)
  return _internal_gid();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_gid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gid_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.gid)
}

// optional uint64 clanid = 2;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_clanid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_clanid() const {
  return _internal_has_clanid();
}
inline void CCommunity_ClanAnnouncementInfo::clear_clanid() {
  _impl_.clanid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CCommunity_ClanAnnouncementInfo::_internal_clanid() const {
  return _impl_.clanid_;
}
inline uint64_t CCommunity_ClanAnnouncementInfo::clanid() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.clanid)
  return _internal_clanid();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_clanid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.clanid_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_clanid(uint64_t value) {
  _internal_set_clanid(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.clanid)
}

// optional uint64 posterid = 3;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_posterid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_posterid() const {
  return _internal_has_posterid();
}
inline void CCommunity_ClanAnnouncementInfo::clear_posterid() {
  _impl_.posterid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CCommunity_ClanAnnouncementInfo::_internal_posterid() const {
  return _impl_.posterid_;
}
inline uint64_t CCommunity_ClanAnnouncementInfo::posterid() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.posterid)
  return _internal_posterid();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_posterid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.posterid_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_posterid(uint64_t value) {
  _internal_set_posterid(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.posterid)
}

// optional string headline = 4;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_headline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_headline() const {
  return _internal_has_headline();
}
inline void CCommunity_ClanAnnouncementInfo::clear_headline() {
  _impl_.headline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCommunity_ClanAnnouncementInfo::headline() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.headline)
  return _internal_headline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_ClanAnnouncementInfo::set_headline(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.headline_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.headline)
}
inline std::string* CCommunity_ClanAnnouncementInfo::mutable_headline() {
  std::string* _s = _internal_mutable_headline();
  // @@protoc_insertion_point(field_mutable:CCommunity_ClanAnnouncementInfo.headline)
  return _s;
}
inline const std::string& CCommunity_ClanAnnouncementInfo::_internal_headline() const {
  return _impl_.headline_.Get();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_headline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.headline_.Set(value, GetArenaForAllocation());
}
inline std::string* CCommunity_ClanAnnouncementInfo::_internal_mutable_headline() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.headline_.Mutable(GetArenaForAllocation());
}
inline std::string* CCommunity_ClanAnnouncementInfo::release_headline() {
  // @@protoc_insertion_point(field_release:CCommunity_ClanAnnouncementInfo.headline)
  if (!_internal_has_headline()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.headline_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.headline_.IsDefault()) {
    _impl_.headline_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCommunity_ClanAnnouncementInfo::set_allocated_headline(std::string* headline) {
  if (headline != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.headline_.SetAllocated(headline, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.headline_.IsDefault()) {
    _impl_.headline_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCommunity_ClanAnnouncementInfo.headline)
}

// optional uint32 posttime = 5;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_posttime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_posttime() const {
  return _internal_has_posttime();
}
inline void CCommunity_ClanAnnouncementInfo::clear_posttime() {
  _impl_.posttime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CCommunity_ClanAnnouncementInfo::_internal_posttime() const {
  return _impl_.posttime_;
}
inline uint32_t CCommunity_ClanAnnouncementInfo::posttime() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.posttime)
  return _internal_posttime();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_posttime(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.posttime_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_posttime(uint32_t value) {
  _internal_set_posttime(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.posttime)
}

// optional uint32 updatetime = 6;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_updatetime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_updatetime() const {
  return _internal_has_updatetime();
}
inline void CCommunity_ClanAnnouncementInfo::clear_updatetime() {
  _impl_.updatetime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CCommunity_ClanAnnouncementInfo::_internal_updatetime() const {
  return _impl_.updatetime_;
}
inline uint32_t CCommunity_ClanAnnouncementInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.updatetime)
  return _internal_updatetime();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_updatetime(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.updatetime_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_updatetime(uint32_t value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.updatetime)
}

// optional string body = 7;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_body() const {
  return _internal_has_body();
}
inline void CCommunity_ClanAnnouncementInfo::clear_body() {
  _impl_.body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCommunity_ClanAnnouncementInfo::body() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_ClanAnnouncementInfo::set_body(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.body)
}
inline std::string* CCommunity_ClanAnnouncementInfo::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:CCommunity_ClanAnnouncementInfo.body)
  return _s;
}
inline const std::string& CCommunity_ClanAnnouncementInfo::_internal_body() const {
  return _impl_.body_.Get();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_body(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* CCommunity_ClanAnnouncementInfo::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* CCommunity_ClanAnnouncementInfo::release_body() {
  // @@protoc_insertion_point(field_release:CCommunity_ClanAnnouncementInfo.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCommunity_ClanAnnouncementInfo::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCommunity_ClanAnnouncementInfo.body)
}

// optional int32 commentcount = 8;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_commentcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_commentcount() const {
  return _internal_has_commentcount();
}
inline void CCommunity_ClanAnnouncementInfo::clear_commentcount() {
  _impl_.commentcount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t CCommunity_ClanAnnouncementInfo::_internal_commentcount() const {
  return _impl_.commentcount_;
}
inline int32_t CCommunity_ClanAnnouncementInfo::commentcount() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.commentcount)
  return _internal_commentcount();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_commentcount(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.commentcount_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_commentcount(int32_t value) {
  _internal_set_commentcount(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.commentcount)
}

// repeated string tags = 9;
inline int CCommunity_ClanAnnouncementInfo::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int CCommunity_ClanAnnouncementInfo::tags_size() const {
  return _internal_tags_size();
}
inline void CCommunity_ClanAnnouncementInfo::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* CCommunity_ClanAnnouncementInfo::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:CCommunity_ClanAnnouncementInfo.tags)
  return _s;
}
inline const std::string& CCommunity_ClanAnnouncementInfo::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& CCommunity_ClanAnnouncementInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.tags)
  return _internal_tags(index);
}
inline std::string* CCommunity_ClanAnnouncementInfo::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CCommunity_ClanAnnouncementInfo.tags)
  return _impl_.tags_.Mutable(index);
}
inline void CCommunity_ClanAnnouncementInfo::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.tags)
}
inline void CCommunity_ClanAnnouncementInfo::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.tags)
}
inline void CCommunity_ClanAnnouncementInfo::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCommunity_ClanAnnouncementInfo.tags)
}
inline void CCommunity_ClanAnnouncementInfo::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCommunity_ClanAnnouncementInfo.tags)
}
inline std::string* CCommunity_ClanAnnouncementInfo::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void CCommunity_ClanAnnouncementInfo::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCommunity_ClanAnnouncementInfo.tags)
}
inline void CCommunity_ClanAnnouncementInfo::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCommunity_ClanAnnouncementInfo.tags)
}
inline void CCommunity_ClanAnnouncementInfo::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCommunity_ClanAnnouncementInfo.tags)
}
inline void CCommunity_ClanAnnouncementInfo::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCommunity_ClanAnnouncementInfo.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCommunity_ClanAnnouncementInfo::tags() const {
  // @@protoc_insertion_point(field_list:CCommunity_ClanAnnouncementInfo.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCommunity_ClanAnnouncementInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CCommunity_ClanAnnouncementInfo.tags)
  return &_impl_.tags_;
}

// optional int32 language = 10;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_language() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_language() const {
  return _internal_has_language();
}
inline void CCommunity_ClanAnnouncementInfo::clear_language() {
  _impl_.language_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t CCommunity_ClanAnnouncementInfo::_internal_language() const {
  return _impl_.language_;
}
inline int32_t CCommunity_ClanAnnouncementInfo::language() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.language)
  return _internal_language();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_language(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.language_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.language)
}

// optional bool hidden = 11;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_hidden() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_hidden() const {
  return _internal_has_hidden();
}
inline void CCommunity_ClanAnnouncementInfo::clear_hidden() {
  _impl_.hidden_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool CCommunity_ClanAnnouncementInfo::_internal_hidden() const {
  return _impl_.hidden_;
}
inline bool CCommunity_ClanAnnouncementInfo::hidden() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.hidden)
  return _internal_hidden();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_hidden(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.hidden_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.hidden)
}

// optional fixed64 forum_topic_id = 12;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_forum_topic_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_forum_topic_id() const {
  return _internal_has_forum_topic_id();
}
inline void CCommunity_ClanAnnouncementInfo::clear_forum_topic_id() {
  _impl_.forum_topic_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CCommunity_ClanAnnouncementInfo::_internal_forum_topic_id() const {
  return _impl_.forum_topic_id_;
}
inline uint64_t CCommunity_ClanAnnouncementInfo::forum_topic_id() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.forum_topic_id)
  return _internal_forum_topic_id();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_forum_topic_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.forum_topic_id_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_forum_topic_id(uint64_t value) {
  _internal_set_forum_topic_id(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.forum_topic_id)
}

// optional fixed64 event_gid = 13;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_event_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_event_gid() const {
  return _internal_has_event_gid();
}
inline void CCommunity_ClanAnnouncementInfo::clear_event_gid() {
  _impl_.event_gid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CCommunity_ClanAnnouncementInfo::_internal_event_gid() const {
  return _impl_.event_gid_;
}
inline uint64_t CCommunity_ClanAnnouncementInfo::event_gid() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.event_gid)
  return _internal_event_gid();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_event_gid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.event_gid_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_event_gid(uint64_t value) {
  _internal_set_event_gid(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.event_gid)
}

// optional int32 voteupcount = 14;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_voteupcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_voteupcount() const {
  return _internal_has_voteupcount();
}
inline void CCommunity_ClanAnnouncementInfo::clear_voteupcount() {
  _impl_.voteupcount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t CCommunity_ClanAnnouncementInfo::_internal_voteupcount() const {
  return _impl_.voteupcount_;
}
inline int32_t CCommunity_ClanAnnouncementInfo::voteupcount() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.voteupcount)
  return _internal_voteupcount();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_voteupcount(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.voteupcount_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_voteupcount(int32_t value) {
  _internal_set_voteupcount(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.voteupcount)
}

// optional int32 votedowncount = 15;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_votedowncount() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_votedowncount() const {
  return _internal_has_votedowncount();
}
inline void CCommunity_ClanAnnouncementInfo::clear_votedowncount() {
  _impl_.votedowncount_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t CCommunity_ClanAnnouncementInfo::_internal_votedowncount() const {
  return _impl_.votedowncount_;
}
inline int32_t CCommunity_ClanAnnouncementInfo::votedowncount() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.votedowncount)
  return _internal_votedowncount();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_votedowncount(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.votedowncount_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_votedowncount(int32_t value) {
  _internal_set_votedowncount(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.votedowncount)
}

// optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_ban_check_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_ban_check_result() const {
  return _internal_has_ban_check_result();
}
inline void CCommunity_ClanAnnouncementInfo::clear_ban_check_result() {
  _impl_.ban_check_result_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::EBanContentCheckResult CCommunity_ClanAnnouncementInfo::_internal_ban_check_result() const {
  return static_cast< ::EBanContentCheckResult >(_impl_.ban_check_result_);
}
inline ::EBanContentCheckResult CCommunity_ClanAnnouncementInfo::ban_check_result() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.ban_check_result)
  return _internal_ban_check_result();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_ban_check_result(::EBanContentCheckResult value) {
  assert(::EBanContentCheckResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.ban_check_result_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_ban_check_result(::EBanContentCheckResult value) {
  _internal_set_ban_check_result(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.ban_check_result)
}

// optional bool banned = 17;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_banned() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_banned() const {
  return _internal_has_banned();
}
inline void CCommunity_ClanAnnouncementInfo::clear_banned() {
  _impl_.banned_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool CCommunity_ClanAnnouncementInfo::_internal_banned() const {
  return _impl_.banned_;
}
inline bool CCommunity_ClanAnnouncementInfo::banned() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.banned)
  return _internal_banned();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_banned(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.banned_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_banned(bool value) {
  _internal_set_banned(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.banned)
}

// -------------------------------------------------------------------

// CClanEventData

// optional fixed64 gid = 1;
inline bool CClanEventData::_internal_has_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CClanEventData::has_gid() const {
  return _internal_has_gid();
}
inline void CClanEventData::clear_gid() {
  _impl_.gid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CClanEventData::_internal_gid() const {
  return _impl_.gid_;
}
inline uint64_t CClanEventData::gid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.gid)
  return _internal_gid();
}
inline void CClanEventData::_internal_set_gid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.gid_ = value;
}
inline void CClanEventData::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.gid)
}

// optional fixed64 clan_steamid = 2;
inline bool CClanEventData::_internal_has_clan_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CClanEventData::has_clan_steamid() const {
  return _internal_has_clan_steamid();
}
inline void CClanEventData::clear_clan_steamid() {
  _impl_.clan_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CClanEventData::_internal_clan_steamid() const {
  return _impl_.clan_steamid_;
}
inline uint64_t CClanEventData::clan_steamid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.clan_steamid)
  return _internal_clan_steamid();
}
inline void CClanEventData::_internal_set_clan_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.clan_steamid_ = value;
}
inline void CClanEventData::set_clan_steamid(uint64_t value) {
  _internal_set_clan_steamid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.clan_steamid)
}

// optional string event_name = 3;
inline bool CClanEventData::_internal_has_event_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClanEventData::has_event_name() const {
  return _internal_has_event_name();
}
inline void CClanEventData::clear_event_name() {
  _impl_.event_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClanEventData::event_name() const {
  // @@protoc_insertion_point(field_get:CClanEventData.event_name)
  return _internal_event_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClanEventData::set_event_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.event_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClanEventData.event_name)
}
inline std::string* CClanEventData::mutable_event_name() {
  std::string* _s = _internal_mutable_event_name();
  // @@protoc_insertion_point(field_mutable:CClanEventData.event_name)
  return _s;
}
inline const std::string& CClanEventData::_internal_event_name() const {
  return _impl_.event_name_.Get();
}
inline void CClanEventData::_internal_set_event_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CClanEventData::_internal_mutable_event_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.event_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CClanEventData::release_event_name() {
  // @@protoc_insertion_point(field_release:CClanEventData.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.event_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_name_.IsDefault()) {
    _impl_.event_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClanEventData::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.event_name_.SetAllocated(event_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_name_.IsDefault()) {
    _impl_.event_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.event_name)
}

// optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
inline bool CClanEventData::_internal_has_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CClanEventData::has_event_type() const {
  return _internal_has_event_type();
}
inline void CClanEventData::clear_event_type() {
  _impl_.event_type_ = 1;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::EProtoClanEventType CClanEventData::_internal_event_type() const {
  return static_cast< ::EProtoClanEventType >(_impl_.event_type_);
}
inline ::EProtoClanEventType CClanEventData::event_type() const {
  // @@protoc_insertion_point(field_get:CClanEventData.event_type)
  return _internal_event_type();
}
inline void CClanEventData::_internal_set_event_type(::EProtoClanEventType value) {
  assert(::EProtoClanEventType_IsValid(value));
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.event_type_ = value;
}
inline void CClanEventData::set_event_type(::EProtoClanEventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:CClanEventData.event_type)
}

// optional uint32 appid = 5;
inline bool CClanEventData::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CClanEventData::has_appid() const {
  return _internal_has_appid();
}
inline void CClanEventData::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CClanEventData::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CClanEventData::appid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.appid)
  return _internal_appid();
}
inline void CClanEventData::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.appid_ = value;
}
inline void CClanEventData::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.appid)
}

// optional string server_address = 6;
inline bool CClanEventData::_internal_has_server_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClanEventData::has_server_address() const {
  return _internal_has_server_address();
}
inline void CClanEventData::clear_server_address() {
  _impl_.server_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CClanEventData::server_address() const {
  // @@protoc_insertion_point(field_get:CClanEventData.server_address)
  return _internal_server_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClanEventData::set_server_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.server_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClanEventData.server_address)
}
inline std::string* CClanEventData::mutable_server_address() {
  std::string* _s = _internal_mutable_server_address();
  // @@protoc_insertion_point(field_mutable:CClanEventData.server_address)
  return _s;
}
inline const std::string& CClanEventData::_internal_server_address() const {
  return _impl_.server_address_.Get();
}
inline void CClanEventData::_internal_set_server_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.server_address_.Set(value, GetArenaForAllocation());
}
inline std::string* CClanEventData::_internal_mutable_server_address() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.server_address_.Mutable(GetArenaForAllocation());
}
inline std::string* CClanEventData::release_server_address() {
  // @@protoc_insertion_point(field_release:CClanEventData.server_address)
  if (!_internal_has_server_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.server_address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_address_.IsDefault()) {
    _impl_.server_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClanEventData::set_allocated_server_address(std::string* server_address) {
  if (server_address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.server_address_.SetAllocated(server_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_address_.IsDefault()) {
    _impl_.server_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.server_address)
}

// optional string server_password = 7;
inline bool CClanEventData::_internal_has_server_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClanEventData::has_server_password() const {
  return _internal_has_server_password();
}
inline void CClanEventData::clear_server_password() {
  _impl_.server_password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CClanEventData::server_password() const {
  // @@protoc_insertion_point(field_get:CClanEventData.server_password)
  return _internal_server_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClanEventData::set_server_password(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.server_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClanEventData.server_password)
}
inline std::string* CClanEventData::mutable_server_password() {
  std::string* _s = _internal_mutable_server_password();
  // @@protoc_insertion_point(field_mutable:CClanEventData.server_password)
  return _s;
}
inline const std::string& CClanEventData::_internal_server_password() const {
  return _impl_.server_password_.Get();
}
inline void CClanEventData::_internal_set_server_password(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.server_password_.Set(value, GetArenaForAllocation());
}
inline std::string* CClanEventData::_internal_mutable_server_password() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.server_password_.Mutable(GetArenaForAllocation());
}
inline std::string* CClanEventData::release_server_password() {
  // @@protoc_insertion_point(field_release:CClanEventData.server_password)
  if (!_internal_has_server_password()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.server_password_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_password_.IsDefault()) {
    _impl_.server_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClanEventData::set_allocated_server_password(std::string* server_password) {
  if (server_password != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.server_password_.SetAllocated(server_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_password_.IsDefault()) {
    _impl_.server_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.server_password)
}

// optional uint32 rtime32_start_time = 8;
inline bool CClanEventData::_internal_has_rtime32_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CClanEventData::has_rtime32_start_time() const {
  return _internal_has_rtime32_start_time();
}
inline void CClanEventData::clear_rtime32_start_time() {
  _impl_.rtime32_start_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CClanEventData::_internal_rtime32_start_time() const {
  return _impl_.rtime32_start_time_;
}
inline uint32_t CClanEventData::rtime32_start_time() const {
  // @@protoc_insertion_point(field_get:CClanEventData.rtime32_start_time)
  return _internal_rtime32_start_time();
}
inline void CClanEventData::_internal_set_rtime32_start_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.rtime32_start_time_ = value;
}
inline void CClanEventData::set_rtime32_start_time(uint32_t value) {
  _internal_set_rtime32_start_time(value);
  // @@protoc_insertion_point(field_set:CClanEventData.rtime32_start_time)
}

// optional uint32 rtime32_end_time = 9;
inline bool CClanEventData::_internal_has_rtime32_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CClanEventData::has_rtime32_end_time() const {
  return _internal_has_rtime32_end_time();
}
inline void CClanEventData::clear_rtime32_end_time() {
  _impl_.rtime32_end_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CClanEventData::_internal_rtime32_end_time() const {
  return _impl_.rtime32_end_time_;
}
inline uint32_t CClanEventData::rtime32_end_time() const {
  // @@protoc_insertion_point(field_get:CClanEventData.rtime32_end_time)
  return _internal_rtime32_end_time();
}
inline void CClanEventData::_internal_set_rtime32_end_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.rtime32_end_time_ = value;
}
inline void CClanEventData::set_rtime32_end_time(uint32_t value) {
  _internal_set_rtime32_end_time(value);
  // @@protoc_insertion_point(field_set:CClanEventData.rtime32_end_time)
}

// optional int32 comment_count = 10;
inline bool CClanEventData::_internal_has_comment_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CClanEventData::has_comment_count() const {
  return _internal_has_comment_count();
}
inline void CClanEventData::clear_comment_count() {
  _impl_.comment_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t CClanEventData::_internal_comment_count() const {
  return _impl_.comment_count_;
}
inline int32_t CClanEventData::comment_count() const {
  // @@protoc_insertion_point(field_get:CClanEventData.comment_count)
  return _internal_comment_count();
}
inline void CClanEventData::_internal_set_comment_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.comment_count_ = value;
}
inline void CClanEventData::set_comment_count(int32_t value) {
  _internal_set_comment_count(value);
  // @@protoc_insertion_point(field_set:CClanEventData.comment_count)
}

// optional fixed64 creator_steamid = 11;
inline bool CClanEventData::_internal_has_creator_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CClanEventData::has_creator_steamid() const {
  return _internal_has_creator_steamid();
}
inline void CClanEventData::clear_creator_steamid() {
  _impl_.creator_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint64_t CClanEventData::_internal_creator_steamid() const {
  return _impl_.creator_steamid_;
}
inline uint64_t CClanEventData::creator_steamid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.creator_steamid)
  return _internal_creator_steamid();
}
inline void CClanEventData::_internal_set_creator_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.creator_steamid_ = value;
}
inline void CClanEventData::set_creator_steamid(uint64_t value) {
  _internal_set_creator_steamid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.creator_steamid)
}

// optional fixed64 last_update_steamid = 12;
inline bool CClanEventData::_internal_has_last_update_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CClanEventData::has_last_update_steamid() const {
  return _internal_has_last_update_steamid();
}
inline void CClanEventData::clear_last_update_steamid() {
  _impl_.last_update_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint64_t CClanEventData::_internal_last_update_steamid() const {
  return _impl_.last_update_steamid_;
}
inline uint64_t CClanEventData::last_update_steamid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.last_update_steamid)
  return _internal_last_update_steamid();
}
inline void CClanEventData::_internal_set_last_update_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.last_update_steamid_ = value;
}
inline void CClanEventData::set_last_update_steamid(uint64_t value) {
  _internal_set_last_update_steamid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.last_update_steamid)
}

// optional string event_notes = 13;
inline bool CClanEventData::_internal_has_event_notes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CClanEventData::has_event_notes() const {
  return _internal_has_event_notes();
}
inline void CClanEventData::clear_event_notes() {
  _impl_.event_notes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CClanEventData::event_notes() const {
  // @@protoc_insertion_point(field_get:CClanEventData.event_notes)
  return _internal_event_notes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClanEventData::set_event_notes(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.event_notes_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClanEventData.event_notes)
}
inline std::string* CClanEventData::mutable_event_notes() {
  std::string* _s = _internal_mutable_event_notes();
  // @@protoc_insertion_point(field_mutable:CClanEventData.event_notes)
  return _s;
}
inline const std::string& CClanEventData::_internal_event_notes() const {
  return _impl_.event_notes_.Get();
}
inline void CClanEventData::_internal_set_event_notes(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.event_notes_.Set(value, GetArenaForAllocation());
}
inline std::string* CClanEventData::_internal_mutable_event_notes() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.event_notes_.Mutable(GetArenaForAllocation());
}
inline std::string* CClanEventData::release_event_notes() {
  // @@protoc_insertion_point(field_release:CClanEventData.event_notes)
  if (!_internal_has_event_notes()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.event_notes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_notes_.IsDefault()) {
    _impl_.event_notes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClanEventData::set_allocated_event_notes(std::string* event_notes) {
  if (event_notes != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.event_notes_.SetAllocated(event_notes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_notes_.IsDefault()) {
    _impl_.event_notes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.event_notes)
}

// optional string jsondata = 14;
inline bool CClanEventData::_internal_has_jsondata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CClanEventData::has_jsondata() const {
  return _internal_has_jsondata();
}
inline void CClanEventData::clear_jsondata() {
  _impl_.jsondata_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CClanEventData::jsondata() const {
  // @@protoc_insertion_point(field_get:CClanEventData.jsondata)
  return _internal_jsondata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClanEventData::set_jsondata(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.jsondata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClanEventData.jsondata)
}
inline std::string* CClanEventData::mutable_jsondata() {
  std::string* _s = _internal_mutable_jsondata();
  // @@protoc_insertion_point(field_mutable:CClanEventData.jsondata)
  return _s;
}
inline const std::string& CClanEventData::_internal_jsondata() const {
  return _impl_.jsondata_.Get();
}
inline void CClanEventData::_internal_set_jsondata(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.jsondata_.Set(value, GetArenaForAllocation());
}
inline std::string* CClanEventData::_internal_mutable_jsondata() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.jsondata_.Mutable(GetArenaForAllocation());
}
inline std::string* CClanEventData::release_jsondata() {
  // @@protoc_insertion_point(field_release:CClanEventData.jsondata)
  if (!_internal_has_jsondata()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.jsondata_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jsondata_.IsDefault()) {
    _impl_.jsondata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClanEventData::set_allocated_jsondata(std::string* jsondata) {
  if (jsondata != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.jsondata_.SetAllocated(jsondata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jsondata_.IsDefault()) {
    _impl_.jsondata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.jsondata)
}

// optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
inline bool CClanEventData::_internal_has_announcement_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.announcement_body_ != nullptr);
  return value;
}
inline bool CClanEventData::has_announcement_body() const {
  return _internal_has_announcement_body();
}
inline void CClanEventData::clear_announcement_body() {
  if (_impl_.announcement_body_ != nullptr) _impl_.announcement_body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::CCommunity_ClanAnnouncementInfo& CClanEventData::_internal_announcement_body() const {
  const ::CCommunity_ClanAnnouncementInfo* p = _impl_.announcement_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::CCommunity_ClanAnnouncementInfo&>(
      ::_CCommunity_ClanAnnouncementInfo_default_instance_);
}
inline const ::CCommunity_ClanAnnouncementInfo& CClanEventData::announcement_body() const {
  // @@protoc_insertion_point(field_get:CClanEventData.announcement_body)
  return _internal_announcement_body();
}
inline void CClanEventData::unsafe_arena_set_allocated_announcement_body(
    ::CCommunity_ClanAnnouncementInfo* announcement_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.announcement_body_);
  }
  _impl_.announcement_body_ = announcement_body;
  if (announcement_body) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CClanEventData.announcement_body)
}
inline ::CCommunity_ClanAnnouncementInfo* CClanEventData::release_announcement_body() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CCommunity_ClanAnnouncementInfo* temp = _impl_.announcement_body_;
  _impl_.announcement_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CCommunity_ClanAnnouncementInfo* CClanEventData::unsafe_arena_release_announcement_body() {
  // @@protoc_insertion_point(field_release:CClanEventData.announcement_body)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CCommunity_ClanAnnouncementInfo* temp = _impl_.announcement_body_;
  _impl_.announcement_body_ = nullptr;
  return temp;
}
inline ::CCommunity_ClanAnnouncementInfo* CClanEventData::_internal_mutable_announcement_body() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.announcement_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::CCommunity_ClanAnnouncementInfo>(GetArenaForAllocation());
    _impl_.announcement_body_ = p;
  }
  return _impl_.announcement_body_;
}
inline ::CCommunity_ClanAnnouncementInfo* CClanEventData::mutable_announcement_body() {
  ::CCommunity_ClanAnnouncementInfo* _msg = _internal_mutable_announcement_body();
  // @@protoc_insertion_point(field_mutable:CClanEventData.announcement_body)
  return _msg;
}
inline void CClanEventData::set_allocated_announcement_body(::CCommunity_ClanAnnouncementInfo* announcement_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.announcement_body_;
  }
  if (announcement_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(announcement_body);
    if (message_arena != submessage_arena) {
      announcement_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, announcement_body, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.announcement_body_ = announcement_body;
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.announcement_body)
}

// optional bool published = 16;
inline bool CClanEventData::_internal_has_published() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CClanEventData::has_published() const {
  return _internal_has_published();
}
inline void CClanEventData::clear_published() {
  _impl_.published_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool CClanEventData::_internal_published() const {
  return _impl_.published_;
}
inline bool CClanEventData::published() const {
  // @@protoc_insertion_point(field_get:CClanEventData.published)
  return _internal_published();
}
inline void CClanEventData::_internal_set_published(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.published_ = value;
}
inline void CClanEventData::set_published(bool value) {
  _internal_set_published(value);
  // @@protoc_insertion_point(field_set:CClanEventData.published)
}

// optional bool hidden = 17;
inline bool CClanEventData::_internal_has_hidden() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CClanEventData::has_hidden() const {
  return _internal_has_hidden();
}
inline void CClanEventData::clear_hidden() {
  _impl_.hidden_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool CClanEventData::_internal_hidden() const {
  return _impl_.hidden_;
}
inline bool CClanEventData::hidden() const {
  // @@protoc_insertion_point(field_get:CClanEventData.hidden)
  return _internal_hidden();
}
inline void CClanEventData::_internal_set_hidden(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.hidden_ = value;
}
inline void CClanEventData::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:CClanEventData.hidden)
}

// optional uint32 rtime32_visibility_start = 18;
inline bool CClanEventData::_internal_has_rtime32_visibility_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CClanEventData::has_rtime32_visibility_start() const {
  return _internal_has_rtime32_visibility_start();
}
inline void CClanEventData::clear_rtime32_visibility_start() {
  _impl_.rtime32_visibility_start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CClanEventData::_internal_rtime32_visibility_start() const {
  return _impl_.rtime32_visibility_start_;
}
inline uint32_t CClanEventData::rtime32_visibility_start() const {
  // @@protoc_insertion_point(field_get:CClanEventData.rtime32_visibility_start)
  return _internal_rtime32_visibility_start();
}
inline void CClanEventData::_internal_set_rtime32_visibility_start(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.rtime32_visibility_start_ = value;
}
inline void CClanEventData::set_rtime32_visibility_start(uint32_t value) {
  _internal_set_rtime32_visibility_start(value);
  // @@protoc_insertion_point(field_set:CClanEventData.rtime32_visibility_start)
}

// optional uint32 rtime32_visibility_end = 19;
inline bool CClanEventData::_internal_has_rtime32_visibility_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CClanEventData::has_rtime32_visibility_end() const {
  return _internal_has_rtime32_visibility_end();
}
inline void CClanEventData::clear_rtime32_visibility_end() {
  _impl_.rtime32_visibility_end_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CClanEventData::_internal_rtime32_visibility_end() const {
  return _impl_.rtime32_visibility_end_;
}
inline uint32_t CClanEventData::rtime32_visibility_end() const {
  // @@protoc_insertion_point(field_get:CClanEventData.rtime32_visibility_end)
  return _internal_rtime32_visibility_end();
}
inline void CClanEventData::_internal_set_rtime32_visibility_end(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.rtime32_visibility_end_ = value;
}
inline void CClanEventData::set_rtime32_visibility_end(uint32_t value) {
  _internal_set_rtime32_visibility_end(value);
  // @@protoc_insertion_point(field_set:CClanEventData.rtime32_visibility_end)
}

// optional uint32 broadcaster_accountid = 20;
inline bool CClanEventData::_internal_has_broadcaster_accountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CClanEventData::has_broadcaster_accountid() const {
  return _internal_has_broadcaster_accountid();
}
inline void CClanEventData::clear_broadcaster_accountid() {
  _impl_.broadcaster_accountid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CClanEventData::_internal_broadcaster_accountid() const {
  return _impl_.broadcaster_accountid_;
}
inline uint32_t CClanEventData::broadcaster_accountid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.broadcaster_accountid)
  return _internal_broadcaster_accountid();
}
inline void CClanEventData::_internal_set_broadcaster_accountid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.broadcaster_accountid_ = value;
}
inline void CClanEventData::set_broadcaster_accountid(uint32_t value) {
  _internal_set_broadcaster_accountid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.broadcaster_accountid)
}

// optional uint32 follower_count = 21;
inline bool CClanEventData::_internal_has_follower_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CClanEventData::has_follower_count() const {
  return _internal_has_follower_count();
}
inline void CClanEventData::clear_follower_count() {
  _impl_.follower_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CClanEventData::_internal_follower_count() const {
  return _impl_.follower_count_;
}
inline uint32_t CClanEventData::follower_count() const {
  // @@protoc_insertion_point(field_get:CClanEventData.follower_count)
  return _internal_follower_count();
}
inline void CClanEventData::_internal_set_follower_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.follower_count_ = value;
}
inline void CClanEventData::set_follower_count(uint32_t value) {
  _internal_set_follower_count(value);
  // @@protoc_insertion_point(field_set:CClanEventData.follower_count)
}

// optional uint32 ignore_count = 22;
inline bool CClanEventData::_internal_has_ignore_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CClanEventData::has_ignore_count() const {
  return _internal_has_ignore_count();
}
inline void CClanEventData::clear_ignore_count() {
  _impl_.ignore_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CClanEventData::_internal_ignore_count() const {
  return _impl_.ignore_count_;
}
inline uint32_t CClanEventData::ignore_count() const {
  // @@protoc_insertion_point(field_get:CClanEventData.ignore_count)
  return _internal_ignore_count();
}
inline void CClanEventData::_internal_set_ignore_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.ignore_count_ = value;
}
inline void CClanEventData::set_ignore_count(uint32_t value) {
  _internal_set_ignore_count(value);
  // @@protoc_insertion_point(field_set:CClanEventData.ignore_count)
}

// optional fixed64 forum_topic_id = 23;
inline bool CClanEventData::_internal_has_forum_topic_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CClanEventData::has_forum_topic_id() const {
  return _internal_has_forum_topic_id();
}
inline void CClanEventData::clear_forum_topic_id() {
  _impl_.forum_topic_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint64_t CClanEventData::_internal_forum_topic_id() const {
  return _impl_.forum_topic_id_;
}
inline uint64_t CClanEventData::forum_topic_id() const {
  // @@protoc_insertion_point(field_get:CClanEventData.forum_topic_id)
  return _internal_forum_topic_id();
}
inline void CClanEventData::_internal_set_forum_topic_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.forum_topic_id_ = value;
}
inline void CClanEventData::set_forum_topic_id(uint64_t value) {
  _internal_set_forum_topic_id(value);
  // @@protoc_insertion_point(field_set:CClanEventData.forum_topic_id)
}

// optional uint32 rtime32_last_modified = 24;
inline bool CClanEventData::_internal_has_rtime32_last_modified() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CClanEventData::has_rtime32_last_modified() const {
  return _internal_has_rtime32_last_modified();
}
inline void CClanEventData::clear_rtime32_last_modified() {
  _impl_.rtime32_last_modified_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CClanEventData::_internal_rtime32_last_modified() const {
  return _impl_.rtime32_last_modified_;
}
inline uint32_t CClanEventData::rtime32_last_modified() const {
  // @@protoc_insertion_point(field_get:CClanEventData.rtime32_last_modified)
  return _internal_rtime32_last_modified();
}
inline void CClanEventData::_internal_set_rtime32_last_modified(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.rtime32_last_modified_ = value;
}
inline void CClanEventData::set_rtime32_last_modified(uint32_t value) {
  _internal_set_rtime32_last_modified(value);
  // @@protoc_insertion_point(field_set:CClanEventData.rtime32_last_modified)
}

// optional fixed64 news_post_gid = 25;
inline bool CClanEventData::_internal_has_news_post_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CClanEventData::has_news_post_gid() const {
  return _internal_has_news_post_gid();
}
inline void CClanEventData::clear_news_post_gid() {
  _impl_.news_post_gid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint64_t CClanEventData::_internal_news_post_gid() const {
  return _impl_.news_post_gid_;
}
inline uint64_t CClanEventData::news_post_gid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.news_post_gid)
  return _internal_news_post_gid();
}
inline void CClanEventData::_internal_set_news_post_gid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.news_post_gid_ = value;
}
inline void CClanEventData::set_news_post_gid(uint64_t value) {
  _internal_set_news_post_gid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.news_post_gid)
}

// optional uint32 rtime_mod_reviewed = 26;
inline bool CClanEventData::_internal_has_rtime_mod_reviewed() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CClanEventData::has_rtime_mod_reviewed() const {
  return _internal_has_rtime_mod_reviewed();
}
inline void CClanEventData::clear_rtime_mod_reviewed() {
  _impl_.rtime_mod_reviewed_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CClanEventData::_internal_rtime_mod_reviewed() const {
  return _impl_.rtime_mod_reviewed_;
}
inline uint32_t CClanEventData::rtime_mod_reviewed() const {
  // @@protoc_insertion_point(field_get:CClanEventData.rtime_mod_reviewed)
  return _internal_rtime_mod_reviewed();
}
inline void CClanEventData::_internal_set_rtime_mod_reviewed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.rtime_mod_reviewed_ = value;
}
inline void CClanEventData::set_rtime_mod_reviewed(uint32_t value) {
  _internal_set_rtime_mod_reviewed(value);
  // @@protoc_insertion_point(field_set:CClanEventData.rtime_mod_reviewed)
}

// optional uint32 featured_app_tagid = 27;
inline bool CClanEventData::_internal_has_featured_app_tagid() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CClanEventData::has_featured_app_tagid() const {
  return _internal_has_featured_app_tagid();
}
inline void CClanEventData::clear_featured_app_tagid() {
  _impl_.featured_app_tagid_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CClanEventData::_internal_featured_app_tagid() const {
  return _impl_.featured_app_tagid_;
}
inline uint32_t CClanEventData::featured_app_tagid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.featured_app_tagid)
  return _internal_featured_app_tagid();
}
inline void CClanEventData::_internal_set_featured_app_tagid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.featured_app_tagid_ = value;
}
inline void CClanEventData::set_featured_app_tagid(uint32_t value) {
  _internal_set_featured_app_tagid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.featured_app_tagid)
}

// repeated uint32 referenced_appids = 28;
inline int CClanEventData::_internal_referenced_appids_size() const {
  return _impl_.referenced_appids_.size();
}
inline int CClanEventData::referenced_appids_size() const {
  return _internal_referenced_appids_size();
}
inline void CClanEventData::clear_referenced_appids() {
  _impl_.referenced_appids_.Clear();
}
inline uint32_t CClanEventData::_internal_referenced_appids(int index) const {
  return _impl_.referenced_appids_.Get(index);
}
inline uint32_t CClanEventData::referenced_appids(int index) const {
  // @@protoc_insertion_point(field_get:CClanEventData.referenced_appids)
  return _internal_referenced_appids(index);
}
inline void CClanEventData::set_referenced_appids(int index, uint32_t value) {
  _impl_.referenced_appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CClanEventData.referenced_appids)
}
inline void CClanEventData::_internal_add_referenced_appids(uint32_t value) {
  _impl_.referenced_appids_.Add(value);
}
inline void CClanEventData::add_referenced_appids(uint32_t value) {
  _internal_add_referenced_appids(value);
  // @@protoc_insertion_point(field_add:CClanEventData.referenced_appids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CClanEventData::_internal_referenced_appids() const {
  return _impl_.referenced_appids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CClanEventData::referenced_appids() const {
  // @@protoc_insertion_point(field_list:CClanEventData.referenced_appids)
  return _internal_referenced_appids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CClanEventData::_internal_mutable_referenced_appids() {
  return &_impl_.referenced_appids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CClanEventData::mutable_referenced_appids() {
  // @@protoc_insertion_point(field_mutable_list:CClanEventData.referenced_appids)
  return _internal_mutable_referenced_appids();
}

// optional uint32 build_id = 29;
inline bool CClanEventData::_internal_has_build_id() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CClanEventData::has_build_id() const {
  return _internal_has_build_id();
}
inline void CClanEventData::clear_build_id() {
  _impl_.build_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CClanEventData::_internal_build_id() const {
  return _impl_.build_id_;
}
inline uint32_t CClanEventData::build_id() const {
  // @@protoc_insertion_point(field_get:CClanEventData.build_id)
  return _internal_build_id();
}
inline void CClanEventData::_internal_set_build_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.build_id_ = value;
}
inline void CClanEventData::set_build_id(uint32_t value) {
  _internal_set_build_id(value);
  // @@protoc_insertion_point(field_set:CClanEventData.build_id)
}

// optional string build_branch = 30;
inline bool CClanEventData::_internal_has_build_branch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CClanEventData::has_build_branch() const {
  return _internal_has_build_branch();
}
inline void CClanEventData::clear_build_branch() {
  _impl_.build_branch_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CClanEventData::build_branch() const {
  // @@protoc_insertion_point(field_get:CClanEventData.build_branch)
  return _internal_build_branch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CClanEventData::set_build_branch(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.build_branch_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CClanEventData.build_branch)
}
inline std::string* CClanEventData::mutable_build_branch() {
  std::string* _s = _internal_mutable_build_branch();
  // @@protoc_insertion_point(field_mutable:CClanEventData.build_branch)
  return _s;
}
inline const std::string& CClanEventData::_internal_build_branch() const {
  return _impl_.build_branch_.Get();
}
inline void CClanEventData::_internal_set_build_branch(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.build_branch_.Set(value, GetArenaForAllocation());
}
inline std::string* CClanEventData::_internal_mutable_build_branch() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.build_branch_.Mutable(GetArenaForAllocation());
}
inline std::string* CClanEventData::release_build_branch() {
  // @@protoc_insertion_point(field_release:CClanEventData.build_branch)
  if (!_internal_has_build_branch()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.build_branch_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.build_branch_.IsDefault()) {
    _impl_.build_branch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CClanEventData::set_allocated_build_branch(std::string* build_branch) {
  if (build_branch != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.build_branch_.SetAllocated(build_branch, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.build_branch_.IsDefault()) {
    _impl_.build_branch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.build_branch)
}

// -------------------------------------------------------------------

// CBilling_Address

// optional string first_name = 1;
inline bool CBilling_Address::_internal_has_first_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBilling_Address::has_first_name() const {
  return _internal_has_first_name();
}
inline void CBilling_Address::clear_first_name() {
  _impl_.first_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBilling_Address::first_name() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBilling_Address::set_first_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.first_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBilling_Address.first_name)
}
inline std::string* CBilling_Address::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:CBilling_Address.first_name)
  return _s;
}
inline const std::string& CBilling_Address::_internal_first_name() const {
  return _impl_.first_name_.Get();
}
inline void CBilling_Address::_internal_set_first_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.first_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CBilling_Address::_internal_mutable_first_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.first_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CBilling_Address::release_first_name() {
  // @@protoc_insertion_point(field_release:CBilling_Address.first_name)
  if (!_internal_has_first_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.first_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.first_name_.IsDefault()) {
    _impl_.first_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBilling_Address::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.first_name_.SetAllocated(first_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.first_name_.IsDefault()) {
    _impl_.first_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.first_name)
}

// optional string last_name = 2;
inline bool CBilling_Address::_internal_has_last_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBilling_Address::has_last_name() const {
  return _internal_has_last_name();
}
inline void CBilling_Address::clear_last_name() {
  _impl_.last_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBilling_Address::last_name() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBilling_Address::set_last_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.last_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBilling_Address.last_name)
}
inline std::string* CBilling_Address::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:CBilling_Address.last_name)
  return _s;
}
inline const std::string& CBilling_Address::_internal_last_name() const {
  return _impl_.last_name_.Get();
}
inline void CBilling_Address::_internal_set_last_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.last_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CBilling_Address::_internal_mutable_last_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.last_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CBilling_Address::release_last_name() {
  // @@protoc_insertion_point(field_release:CBilling_Address.last_name)
  if (!_internal_has_last_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.last_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_name_.IsDefault()) {
    _impl_.last_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBilling_Address::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.last_name_.SetAllocated(last_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_name_.IsDefault()) {
    _impl_.last_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.last_name)
}

// optional string address1 = 3;
inline bool CBilling_Address::_internal_has_address1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBilling_Address::has_address1() const {
  return _internal_has_address1();
}
inline void CBilling_Address::clear_address1() {
  _impl_.address1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CBilling_Address::address1() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.address1)
  return _internal_address1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBilling_Address::set_address1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.address1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBilling_Address.address1)
}
inline std::string* CBilling_Address::mutable_address1() {
  std::string* _s = _internal_mutable_address1();
  // @@protoc_insertion_point(field_mutable:CBilling_Address.address1)
  return _s;
}
inline const std::string& CBilling_Address::_internal_address1() const {
  return _impl_.address1_.Get();
}
inline void CBilling_Address::_internal_set_address1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.address1_.Set(value, GetArenaForAllocation());
}
inline std::string* CBilling_Address::_internal_mutable_address1() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.address1_.Mutable(GetArenaForAllocation());
}
inline std::string* CBilling_Address::release_address1() {
  // @@protoc_insertion_point(field_release:CBilling_Address.address1)
  if (!_internal_has_address1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.address1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address1_.IsDefault()) {
    _impl_.address1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBilling_Address::set_allocated_address1(std::string* address1) {
  if (address1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.address1_.SetAllocated(address1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address1_.IsDefault()) {
    _impl_.address1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.address1)
}

// optional string address2 = 4;
inline bool CBilling_Address::_internal_has_address2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBilling_Address::has_address2() const {
  return _internal_has_address2();
}
inline void CBilling_Address::clear_address2() {
  _impl_.address2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CBilling_Address::address2() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.address2)
  return _internal_address2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBilling_Address::set_address2(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.address2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBilling_Address.address2)
}
inline std::string* CBilling_Address::mutable_address2() {
  std::string* _s = _internal_mutable_address2();
  // @@protoc_insertion_point(field_mutable:CBilling_Address.address2)
  return _s;
}
inline const std::string& CBilling_Address::_internal_address2() const {
  return _impl_.address2_.Get();
}
inline void CBilling_Address::_internal_set_address2(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.address2_.Set(value, GetArenaForAllocation());
}
inline std::string* CBilling_Address::_internal_mutable_address2() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.address2_.Mutable(GetArenaForAllocation());
}
inline std::string* CBilling_Address::release_address2() {
  // @@protoc_insertion_point(field_release:CBilling_Address.address2)
  if (!_internal_has_address2()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.address2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address2_.IsDefault()) {
    _impl_.address2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBilling_Address::set_allocated_address2(std::string* address2) {
  if (address2 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.address2_.SetAllocated(address2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address2_.IsDefault()) {
    _impl_.address2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.address2)
}

// optional string city = 5;
inline bool CBilling_Address::_internal_has_city() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBilling_Address::has_city() const {
  return _internal_has_city();
}
inline void CBilling_Address::clear_city() {
  _impl_.city_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CBilling_Address::city() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.city)
  return _internal_city();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBilling_Address::set_city(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.city_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBilling_Address.city)
}
inline std::string* CBilling_Address::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:CBilling_Address.city)
  return _s;
}
inline const std::string& CBilling_Address::_internal_city() const {
  return _impl_.city_.Get();
}
inline void CBilling_Address::_internal_set_city(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.city_.Set(value, GetArenaForAllocation());
}
inline std::string* CBilling_Address::_internal_mutable_city() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.city_.Mutable(GetArenaForAllocation());
}
inline std::string* CBilling_Address::release_city() {
  // @@protoc_insertion_point(field_release:CBilling_Address.city)
  if (!_internal_has_city()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.city_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.city_.IsDefault()) {
    _impl_.city_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBilling_Address::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.city_.SetAllocated(city, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.city_.IsDefault()) {
    _impl_.city_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.city)
}

// optional string us_state = 6;
inline bool CBilling_Address::_internal_has_us_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBilling_Address::has_us_state() const {
  return _internal_has_us_state();
}
inline void CBilling_Address::clear_us_state() {
  _impl_.us_state_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CBilling_Address::us_state() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.us_state)
  return _internal_us_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBilling_Address::set_us_state(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.us_state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBilling_Address.us_state)
}
inline std::string* CBilling_Address::mutable_us_state() {
  std::string* _s = _internal_mutable_us_state();
  // @@protoc_insertion_point(field_mutable:CBilling_Address.us_state)
  return _s;
}
inline const std::string& CBilling_Address::_internal_us_state() const {
  return _impl_.us_state_.Get();
}
inline void CBilling_Address::_internal_set_us_state(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.us_state_.Set(value, GetArenaForAllocation());
}
inline std::string* CBilling_Address::_internal_mutable_us_state() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.us_state_.Mutable(GetArenaForAllocation());
}
inline std::string* CBilling_Address::release_us_state() {
  // @@protoc_insertion_point(field_release:CBilling_Address.us_state)
  if (!_internal_has_us_state()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.us_state_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.us_state_.IsDefault()) {
    _impl_.us_state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBilling_Address::set_allocated_us_state(std::string* us_state) {
  if (us_state != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.us_state_.SetAllocated(us_state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.us_state_.IsDefault()) {
    _impl_.us_state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.us_state)
}

// optional string country_code = 7;
inline bool CBilling_Address::_internal_has_country_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CBilling_Address::has_country_code() const {
  return _internal_has_country_code();
}
inline void CBilling_Address::clear_country_code() {
  _impl_.country_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CBilling_Address::country_code() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBilling_Address::set_country_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBilling_Address.country_code)
}
inline std::string* CBilling_Address::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CBilling_Address.country_code)
  return _s;
}
inline const std::string& CBilling_Address::_internal_country_code() const {
  return _impl_.country_code_.Get();
}
inline void CBilling_Address::_internal_set_country_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CBilling_Address::_internal_mutable_country_code() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CBilling_Address::release_country_code() {
  // @@protoc_insertion_point(field_release:CBilling_Address.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.country_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_code_.IsDefault()) {
    _impl_.country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBilling_Address::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.country_code_.SetAllocated(country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_code_.IsDefault()) {
    _impl_.country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.country_code)
}

// optional string postcode = 8;
inline bool CBilling_Address::_internal_has_postcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CBilling_Address::has_postcode() const {
  return _internal_has_postcode();
}
inline void CBilling_Address::clear_postcode() {
  _impl_.postcode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CBilling_Address::postcode() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.postcode)
  return _internal_postcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBilling_Address::set_postcode(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.postcode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBilling_Address.postcode)
}
inline std::string* CBilling_Address::mutable_postcode() {
  std::string* _s = _internal_mutable_postcode();
  // @@protoc_insertion_point(field_mutable:CBilling_Address.postcode)
  return _s;
}
inline const std::string& CBilling_Address::_internal_postcode() const {
  return _impl_.postcode_.Get();
}
inline void CBilling_Address::_internal_set_postcode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.postcode_.Set(value, GetArenaForAllocation());
}
inline std::string* CBilling_Address::_internal_mutable_postcode() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.postcode_.Mutable(GetArenaForAllocation());
}
inline std::string* CBilling_Address::release_postcode() {
  // @@protoc_insertion_point(field_release:CBilling_Address.postcode)
  if (!_internal_has_postcode()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.postcode_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.postcode_.IsDefault()) {
    _impl_.postcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBilling_Address::set_allocated_postcode(std::string* postcode) {
  if (postcode != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.postcode_.SetAllocated(postcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.postcode_.IsDefault()) {
    _impl_.postcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.postcode)
}

// optional int32 zip_plus4 = 9;
inline bool CBilling_Address::_internal_has_zip_plus4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CBilling_Address::has_zip_plus4() const {
  return _internal_has_zip_plus4();
}
inline void CBilling_Address::clear_zip_plus4() {
  _impl_.zip_plus4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t CBilling_Address::_internal_zip_plus4() const {
  return _impl_.zip_plus4_;
}
inline int32_t CBilling_Address::zip_plus4() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.zip_plus4)
  return _internal_zip_plus4();
}
inline void CBilling_Address::_internal_set_zip_plus4(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.zip_plus4_ = value;
}
inline void CBilling_Address::set_zip_plus4(int32_t value) {
  _internal_set_zip_plus4(value);
  // @@protoc_insertion_point(field_set:CBilling_Address.zip_plus4)
}

// optional string phone = 10;
inline bool CBilling_Address::_internal_has_phone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CBilling_Address::has_phone() const {
  return _internal_has_phone();
}
inline void CBilling_Address::clear_phone() {
  _impl_.phone_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& CBilling_Address::phone() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.phone)
  return _internal_phone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBilling_Address::set_phone(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000100u;
 _impl_.phone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBilling_Address.phone)
}
inline std::string* CBilling_Address::mutable_phone() {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:CBilling_Address.phone)
  return _s;
}
inline const std::string& CBilling_Address::_internal_phone() const {
  return _impl_.phone_.Get();
}
inline void CBilling_Address::_internal_set_phone(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.phone_.Set(value, GetArenaForAllocation());
}
inline std::string* CBilling_Address::_internal_mutable_phone() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.phone_.Mutable(GetArenaForAllocation());
}
inline std::string* CBilling_Address::release_phone() {
  // @@protoc_insertion_point(field_release:CBilling_Address.phone)
  if (!_internal_has_phone()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* p = _impl_.phone_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.phone_.IsDefault()) {
    _impl_.phone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBilling_Address::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.phone_.SetAllocated(phone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.phone_.IsDefault()) {
    _impl_.phone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.phone)
}

// -------------------------------------------------------------------

// CPackageReservationStatus

// optional uint32 packageid = 1;
inline bool CPackageReservationStatus::_internal_has_packageid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_packageid() const {
  return _internal_has_packageid();
}
inline void CPackageReservationStatus::clear_packageid() {
  _impl_.packageid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPackageReservationStatus::_internal_packageid() const {
  return _impl_.packageid_;
}
inline uint32_t CPackageReservationStatus::packageid() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.packageid)
  return _internal_packageid();
}
inline void CPackageReservationStatus::_internal_set_packageid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.packageid_ = value;
}
inline void CPackageReservationStatus::set_packageid(uint32_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.packageid)
}

// optional int32 reservation_state = 2;
inline bool CPackageReservationStatus::_internal_has_reservation_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_reservation_state() const {
  return _internal_has_reservation_state();
}
inline void CPackageReservationStatus::clear_reservation_state() {
  _impl_.reservation_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CPackageReservationStatus::_internal_reservation_state() const {
  return _impl_.reservation_state_;
}
inline int32_t CPackageReservationStatus::reservation_state() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.reservation_state)
  return _internal_reservation_state();
}
inline void CPackageReservationStatus::_internal_set_reservation_state(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.reservation_state_ = value;
}
inline void CPackageReservationStatus::set_reservation_state(int32_t value) {
  _internal_set_reservation_state(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.reservation_state)
}

// optional int32 queue_position = 3;
inline bool CPackageReservationStatus::_internal_has_queue_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_queue_position() const {
  return _internal_has_queue_position();
}
inline void CPackageReservationStatus::clear_queue_position() {
  _impl_.queue_position_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CPackageReservationStatus::_internal_queue_position() const {
  return _impl_.queue_position_;
}
inline int32_t CPackageReservationStatus::queue_position() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.queue_position)
  return _internal_queue_position();
}
inline void CPackageReservationStatus::_internal_set_queue_position(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.queue_position_ = value;
}
inline void CPackageReservationStatus::set_queue_position(int32_t value) {
  _internal_set_queue_position(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.queue_position)
}

// optional int32 total_queue_size = 4;
inline bool CPackageReservationStatus::_internal_has_total_queue_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_total_queue_size() const {
  return _internal_has_total_queue_size();
}
inline void CPackageReservationStatus::clear_total_queue_size() {
  _impl_.total_queue_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CPackageReservationStatus::_internal_total_queue_size() const {
  return _impl_.total_queue_size_;
}
inline int32_t CPackageReservationStatus::total_queue_size() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.total_queue_size)
  return _internal_total_queue_size();
}
inline void CPackageReservationStatus::_internal_set_total_queue_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.total_queue_size_ = value;
}
inline void CPackageReservationStatus::set_total_queue_size(int32_t value) {
  _internal_set_total_queue_size(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.total_queue_size)
}

// optional string reservation_country_code = 5;
inline bool CPackageReservationStatus::_internal_has_reservation_country_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_reservation_country_code() const {
  return _internal_has_reservation_country_code();
}
inline void CPackageReservationStatus::clear_reservation_country_code() {
  _impl_.reservation_country_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPackageReservationStatus::reservation_country_code() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.reservation_country_code)
  return _internal_reservation_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPackageReservationStatus::set_reservation_country_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reservation_country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.reservation_country_code)
}
inline std::string* CPackageReservationStatus::mutable_reservation_country_code() {
  std::string* _s = _internal_mutable_reservation_country_code();
  // @@protoc_insertion_point(field_mutable:CPackageReservationStatus.reservation_country_code)
  return _s;
}
inline const std::string& CPackageReservationStatus::_internal_reservation_country_code() const {
  return _impl_.reservation_country_code_.Get();
}
inline void CPackageReservationStatus::_internal_set_reservation_country_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reservation_country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CPackageReservationStatus::_internal_mutable_reservation_country_code() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reservation_country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CPackageReservationStatus::release_reservation_country_code() {
  // @@protoc_insertion_point(field_release:CPackageReservationStatus.reservation_country_code)
  if (!_internal_has_reservation_country_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reservation_country_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reservation_country_code_.IsDefault()) {
    _impl_.reservation_country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPackageReservationStatus::set_allocated_reservation_country_code(std::string* reservation_country_code) {
  if (reservation_country_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reservation_country_code_.SetAllocated(reservation_country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reservation_country_code_.IsDefault()) {
    _impl_.reservation_country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPackageReservationStatus.reservation_country_code)
}

// optional bool expired = 6;
inline bool CPackageReservationStatus::_internal_has_expired() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_expired() const {
  return _internal_has_expired();
}
inline void CPackageReservationStatus::clear_expired() {
  _impl_.expired_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CPackageReservationStatus::_internal_expired() const {
  return _impl_.expired_;
}
inline bool CPackageReservationStatus::expired() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.expired)
  return _internal_expired();
}
inline void CPackageReservationStatus::_internal_set_expired(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.expired_ = value;
}
inline void CPackageReservationStatus::set_expired(bool value) {
  _internal_set_expired(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.expired)
}

// optional uint32 time_expires = 7;
inline bool CPackageReservationStatus::_internal_has_time_expires() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_time_expires() const {
  return _internal_has_time_expires();
}
inline void CPackageReservationStatus::clear_time_expires() {
  _impl_.time_expires_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CPackageReservationStatus::_internal_time_expires() const {
  return _impl_.time_expires_;
}
inline uint32_t CPackageReservationStatus::time_expires() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.time_expires)
  return _internal_time_expires();
}
inline void CPackageReservationStatus::_internal_set_time_expires(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.time_expires_ = value;
}
inline void CPackageReservationStatus::set_time_expires(uint32_t value) {
  _internal_set_time_expires(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.time_expires)
}

// optional uint32 time_reserved = 8;
inline bool CPackageReservationStatus::_internal_has_time_reserved() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_time_reserved() const {
  return _internal_has_time_reserved();
}
inline void CPackageReservationStatus::clear_time_reserved() {
  _impl_.time_reserved_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CPackageReservationStatus::_internal_time_reserved() const {
  return _impl_.time_reserved_;
}
inline uint32_t CPackageReservationStatus::time_reserved() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.time_reserved)
  return _internal_time_reserved();
}
inline void CPackageReservationStatus::_internal_set_time_reserved(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.time_reserved_ = value;
}
inline void CPackageReservationStatus::set_time_reserved(uint32_t value) {
  _internal_set_time_reserved(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.time_reserved)
}

// -------------------------------------------------------------------

// CMsgKeyValuePair

// optional string name = 1;
inline bool CMsgKeyValuePair::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgKeyValuePair::has_name() const {
  return _internal_has_name();
}
inline void CMsgKeyValuePair::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgKeyValuePair::name() const {
  // @@protoc_insertion_point(field_get:CMsgKeyValuePair.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgKeyValuePair::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgKeyValuePair.name)
}
inline std::string* CMsgKeyValuePair::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgKeyValuePair.name)
  return _s;
}
inline const std::string& CMsgKeyValuePair::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgKeyValuePair::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgKeyValuePair::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgKeyValuePair::release_name() {
  // @@protoc_insertion_point(field_release:CMsgKeyValuePair.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgKeyValuePair::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgKeyValuePair.name)
}

// optional string value = 2;
inline bool CMsgKeyValuePair::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgKeyValuePair::has_value() const {
  return _internal_has_value();
}
inline void CMsgKeyValuePair::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgKeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:CMsgKeyValuePair.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgKeyValuePair::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgKeyValuePair.value)
}
inline std::string* CMsgKeyValuePair::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgKeyValuePair.value)
  return _s;
}
inline const std::string& CMsgKeyValuePair::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CMsgKeyValuePair::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgKeyValuePair::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgKeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:CMsgKeyValuePair.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgKeyValuePair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgKeyValuePair.value)
}

// -------------------------------------------------------------------

// CMsgKeyValueSet

// repeated .CMsgKeyValuePair pairs = 1;
inline int CMsgKeyValueSet::_internal_pairs_size() const {
  return _impl_.pairs_.size();
}
inline int CMsgKeyValueSet::pairs_size() const {
  return _internal_pairs_size();
}
inline void CMsgKeyValueSet::clear_pairs() {
  _impl_.pairs_.Clear();
}
inline ::CMsgKeyValuePair* CMsgKeyValueSet::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgKeyValueSet.pairs)
  return _impl_.pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgKeyValuePair >*
CMsgKeyValueSet::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgKeyValueSet.pairs)
  return &_impl_.pairs_;
}
inline const ::CMsgKeyValuePair& CMsgKeyValueSet::_internal_pairs(int index) const {
  return _impl_.pairs_.Get(index);
}
inline const ::CMsgKeyValuePair& CMsgKeyValueSet::pairs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgKeyValueSet.pairs)
  return _internal_pairs(index);
}
inline ::CMsgKeyValuePair* CMsgKeyValueSet::_internal_add_pairs() {
  return _impl_.pairs_.Add();
}
inline ::CMsgKeyValuePair* CMsgKeyValueSet::add_pairs() {
  ::CMsgKeyValuePair* _add = _internal_add_pairs();
  // @@protoc_insertion_point(field_add:CMsgKeyValueSet.pairs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgKeyValuePair >&
CMsgKeyValueSet::pairs() const {
  // @@protoc_insertion_point(field_list:CMsgKeyValueSet.pairs)
  return _impl_.pairs_;
}

// -------------------------------------------------------------------

// UserContentDescriptorPreferences_ContentDescriptor

// optional uint32 content_descriptorid = 1;
inline bool UserContentDescriptorPreferences_ContentDescriptor::_internal_has_content_descriptorid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserContentDescriptorPreferences_ContentDescriptor::has_content_descriptorid() const {
  return _internal_has_content_descriptorid();
}
inline void UserContentDescriptorPreferences_ContentDescriptor::clear_content_descriptorid() {
  _impl_.content_descriptorid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t UserContentDescriptorPreferences_ContentDescriptor::_internal_content_descriptorid() const {
  return _impl_.content_descriptorid_;
}
inline uint32_t UserContentDescriptorPreferences_ContentDescriptor::content_descriptorid() const {
  // @@protoc_insertion_point(field_get:UserContentDescriptorPreferences.ContentDescriptor.content_descriptorid)
  return _internal_content_descriptorid();
}
inline void UserContentDescriptorPreferences_ContentDescriptor::_internal_set_content_descriptorid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_descriptorid_ = value;
}
inline void UserContentDescriptorPreferences_ContentDescriptor::set_content_descriptorid(uint32_t value) {
  _internal_set_content_descriptorid(value);
  // @@protoc_insertion_point(field_set:UserContentDescriptorPreferences.ContentDescriptor.content_descriptorid)
}

// optional uint32 timestamp_added = 2;
inline bool UserContentDescriptorPreferences_ContentDescriptor::_internal_has_timestamp_added() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserContentDescriptorPreferences_ContentDescriptor::has_timestamp_added() const {
  return _internal_has_timestamp_added();
}
inline void UserContentDescriptorPreferences_ContentDescriptor::clear_timestamp_added() {
  _impl_.timestamp_added_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t UserContentDescriptorPreferences_ContentDescriptor::_internal_timestamp_added() const {
  return _impl_.timestamp_added_;
}
inline uint32_t UserContentDescriptorPreferences_ContentDescriptor::timestamp_added() const {
  // @@protoc_insertion_point(field_get:UserContentDescriptorPreferences.ContentDescriptor.timestamp_added)
  return _internal_timestamp_added();
}
inline void UserContentDescriptorPreferences_ContentDescriptor::_internal_set_timestamp_added(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_added_ = value;
}
inline void UserContentDescriptorPreferences_ContentDescriptor::set_timestamp_added(uint32_t value) {
  _internal_set_timestamp_added(value);
  // @@protoc_insertion_point(field_set:UserContentDescriptorPreferences.ContentDescriptor.timestamp_added)
}

// -------------------------------------------------------------------

// UserContentDescriptorPreferences

// repeated .UserContentDescriptorPreferences.ContentDescriptor content_descriptors_to_exclude = 1;
inline int UserContentDescriptorPreferences::_internal_content_descriptors_to_exclude_size() const {
  return _impl_.content_descriptors_to_exclude_.size();
}
inline int UserContentDescriptorPreferences::content_descriptors_to_exclude_size() const {
  return _internal_content_descriptors_to_exclude_size();
}
inline void UserContentDescriptorPreferences::clear_content_descriptors_to_exclude() {
  _impl_.content_descriptors_to_exclude_.Clear();
}
inline ::UserContentDescriptorPreferences_ContentDescriptor* UserContentDescriptorPreferences::mutable_content_descriptors_to_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:UserContentDescriptorPreferences.content_descriptors_to_exclude)
  return _impl_.content_descriptors_to_exclude_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserContentDescriptorPreferences_ContentDescriptor >*
UserContentDescriptorPreferences::mutable_content_descriptors_to_exclude() {
  // @@protoc_insertion_point(field_mutable_list:UserContentDescriptorPreferences.content_descriptors_to_exclude)
  return &_impl_.content_descriptors_to_exclude_;
}
inline const ::UserContentDescriptorPreferences_ContentDescriptor& UserContentDescriptorPreferences::_internal_content_descriptors_to_exclude(int index) const {
  return _impl_.content_descriptors_to_exclude_.Get(index);
}
inline const ::UserContentDescriptorPreferences_ContentDescriptor& UserContentDescriptorPreferences::content_descriptors_to_exclude(int index) const {
  // @@protoc_insertion_point(field_get:UserContentDescriptorPreferences.content_descriptors_to_exclude)
  return _internal_content_descriptors_to_exclude(index);
}
inline ::UserContentDescriptorPreferences_ContentDescriptor* UserContentDescriptorPreferences::_internal_add_content_descriptors_to_exclude() {
  return _impl_.content_descriptors_to_exclude_.Add();
}
inline ::UserContentDescriptorPreferences_ContentDescriptor* UserContentDescriptorPreferences::add_content_descriptors_to_exclude() {
  ::UserContentDescriptorPreferences_ContentDescriptor* _add = _internal_add_content_descriptors_to_exclude();
  // @@protoc_insertion_point(field_add:UserContentDescriptorPreferences.content_descriptors_to_exclude)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserContentDescriptorPreferences_ContentDescriptor >&
UserContentDescriptorPreferences::content_descriptors_to_exclude() const {
  // @@protoc_insertion_point(field_list:UserContentDescriptorPreferences.content_descriptors_to_exclude)
  return _impl_.content_descriptors_to_exclude_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgProtoBufHeader_ESessionDisposition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgProtoBufHeader_ESessionDisposition>() {
  return ::CMsgProtoBufHeader_ESessionDisposition_descriptor();
}
template <> struct is_proto_enum< ::EBanContentCheckResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EBanContentCheckResult>() {
  return ::EBanContentCheckResult_descriptor();
}
template <> struct is_proto_enum< ::EProtoClanEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EProtoClanEventType>() {
  return ::EProtoClanEventType_descriptor();
}
template <> struct is_proto_enum< ::PartnerEventNotificationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PartnerEventNotificationType>() {
  return ::PartnerEventNotificationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fbase_2eproto
