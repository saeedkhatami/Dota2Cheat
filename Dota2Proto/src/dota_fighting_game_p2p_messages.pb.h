// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_fighting_game_p2p_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "netmessages.pb.h"
#include "networkbasetypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto;
class CMsgFightingGame_GameData_CharacterSelect;
struct CMsgFightingGame_GameData_CharacterSelectDefaultTypeInternal;
extern CMsgFightingGame_GameData_CharacterSelectDefaultTypeInternal _CMsgFightingGame_GameData_CharacterSelect_default_instance_;
class CMsgFightingGame_GameData_CharacterSelect_Item;
struct CMsgFightingGame_GameData_CharacterSelect_ItemDefaultTypeInternal;
extern CMsgFightingGame_GameData_CharacterSelect_ItemDefaultTypeInternal _CMsgFightingGame_GameData_CharacterSelect_Item_default_instance_;
class CMsgFightingGame_GameData_Fighting;
struct CMsgFightingGame_GameData_FightingDefaultTypeInternal;
extern CMsgFightingGame_GameData_FightingDefaultTypeInternal _CMsgFightingGame_GameData_Fighting_default_instance_;
class CMsgFightingGame_GameData_Fighting_InputSample;
struct CMsgFightingGame_GameData_Fighting_InputSampleDefaultTypeInternal;
extern CMsgFightingGame_GameData_Fighting_InputSampleDefaultTypeInternal _CMsgFightingGame_GameData_Fighting_InputSample_default_instance_;
class CMsgFightingGame_GameData_Loaded;
struct CMsgFightingGame_GameData_LoadedDefaultTypeInternal;
extern CMsgFightingGame_GameData_LoadedDefaultTypeInternal _CMsgFightingGame_GameData_Loaded_default_instance_;
class CP2P_FightingGame_GameData;
struct CP2P_FightingGame_GameDataDefaultTypeInternal;
extern CP2P_FightingGame_GameDataDefaultTypeInternal _CP2P_FightingGame_GameData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgFightingGame_GameData_CharacterSelect* Arena::CreateMaybeMessage<::CMsgFightingGame_GameData_CharacterSelect>(Arena*);
template<> ::CMsgFightingGame_GameData_CharacterSelect_Item* Arena::CreateMaybeMessage<::CMsgFightingGame_GameData_CharacterSelect_Item>(Arena*);
template<> ::CMsgFightingGame_GameData_Fighting* Arena::CreateMaybeMessage<::CMsgFightingGame_GameData_Fighting>(Arena*);
template<> ::CMsgFightingGame_GameData_Fighting_InputSample* Arena::CreateMaybeMessage<::CMsgFightingGame_GameData_Fighting_InputSample>(Arena*);
template<> ::CMsgFightingGame_GameData_Loaded* Arena::CreateMaybeMessage<::CMsgFightingGame_GameData_Loaded>(Arena*);
template<> ::CP2P_FightingGame_GameData* Arena::CreateMaybeMessage<::CP2P_FightingGame_GameData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CP2P_FightingGame_GameData_EState : int {
  CP2P_FightingGame_GameData_EState_k_ChoosingCharacter = 1,
  CP2P_FightingGame_GameData_EState_k_Loaded = 2,
  CP2P_FightingGame_GameData_EState_k_Fighting = 3
};
bool CP2P_FightingGame_GameData_EState_IsValid(int value);
constexpr CP2P_FightingGame_GameData_EState CP2P_FightingGame_GameData_EState_EState_MIN = CP2P_FightingGame_GameData_EState_k_ChoosingCharacter;
constexpr CP2P_FightingGame_GameData_EState CP2P_FightingGame_GameData_EState_EState_MAX = CP2P_FightingGame_GameData_EState_k_Fighting;
constexpr int CP2P_FightingGame_GameData_EState_EState_ARRAYSIZE = CP2P_FightingGame_GameData_EState_EState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CP2P_FightingGame_GameData_EState_descriptor();
template<typename T>
inline const std::string& CP2P_FightingGame_GameData_EState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CP2P_FightingGame_GameData_EState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CP2P_FightingGame_GameData_EState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CP2P_FightingGame_GameData_EState_descriptor(), enum_t_value);
}
inline bool CP2P_FightingGame_GameData_EState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CP2P_FightingGame_GameData_EState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CP2P_FightingGame_GameData_EState>(
    CP2P_FightingGame_GameData_EState_descriptor(), name, value);
}
// ===================================================================

class CMsgFightingGame_GameData_Fighting_InputSample final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFightingGame_GameData_Fighting.InputSample) */ {
 public:
  inline CMsgFightingGame_GameData_Fighting_InputSample() : CMsgFightingGame_GameData_Fighting_InputSample(nullptr) {}
  ~CMsgFightingGame_GameData_Fighting_InputSample() override;
  explicit PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_Fighting_InputSample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFightingGame_GameData_Fighting_InputSample(const CMsgFightingGame_GameData_Fighting_InputSample& from);
  CMsgFightingGame_GameData_Fighting_InputSample(CMsgFightingGame_GameData_Fighting_InputSample&& from) noexcept
    : CMsgFightingGame_GameData_Fighting_InputSample() {
    *this = ::std::move(from);
  }

  inline CMsgFightingGame_GameData_Fighting_InputSample& operator=(const CMsgFightingGame_GameData_Fighting_InputSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFightingGame_GameData_Fighting_InputSample& operator=(CMsgFightingGame_GameData_Fighting_InputSample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFightingGame_GameData_Fighting_InputSample& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFightingGame_GameData_Fighting_InputSample* internal_default_instance() {
    return reinterpret_cast<const CMsgFightingGame_GameData_Fighting_InputSample*>(
               &_CMsgFightingGame_GameData_Fighting_InputSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgFightingGame_GameData_Fighting_InputSample& a, CMsgFightingGame_GameData_Fighting_InputSample& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFightingGame_GameData_Fighting_InputSample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFightingGame_GameData_Fighting_InputSample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFightingGame_GameData_Fighting_InputSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFightingGame_GameData_Fighting_InputSample>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFightingGame_GameData_Fighting_InputSample& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgFightingGame_GameData_Fighting_InputSample& from) {
    CMsgFightingGame_GameData_Fighting_InputSample::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFightingGame_GameData_Fighting_InputSample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFightingGame_GameData_Fighting.InputSample";
  }
  protected:
  explicit CMsgFightingGame_GameData_Fighting_InputSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kButtonMaskFieldNumber = 1,
  };
  // optional uint32 button_mask = 1;
  bool has_button_mask() const;
  private:
  bool _internal_has_button_mask() const;
  public:
  void clear_button_mask();
  uint32_t button_mask() const;
  void set_button_mask(uint32_t value);
  private:
  uint32_t _internal_button_mask() const;
  void _internal_set_button_mask(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFightingGame_GameData_Fighting.InputSample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t button_mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFightingGame_GameData_Fighting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFightingGame_GameData_Fighting) */ {
 public:
  inline CMsgFightingGame_GameData_Fighting() : CMsgFightingGame_GameData_Fighting(nullptr) {}
  ~CMsgFightingGame_GameData_Fighting() override;
  explicit PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_Fighting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFightingGame_GameData_Fighting(const CMsgFightingGame_GameData_Fighting& from);
  CMsgFightingGame_GameData_Fighting(CMsgFightingGame_GameData_Fighting&& from) noexcept
    : CMsgFightingGame_GameData_Fighting() {
    *this = ::std::move(from);
  }

  inline CMsgFightingGame_GameData_Fighting& operator=(const CMsgFightingGame_GameData_Fighting& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFightingGame_GameData_Fighting& operator=(CMsgFightingGame_GameData_Fighting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFightingGame_GameData_Fighting& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFightingGame_GameData_Fighting* internal_default_instance() {
    return reinterpret_cast<const CMsgFightingGame_GameData_Fighting*>(
               &_CMsgFightingGame_GameData_Fighting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgFightingGame_GameData_Fighting& a, CMsgFightingGame_GameData_Fighting& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFightingGame_GameData_Fighting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFightingGame_GameData_Fighting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFightingGame_GameData_Fighting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFightingGame_GameData_Fighting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFightingGame_GameData_Fighting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgFightingGame_GameData_Fighting& from) {
    CMsgFightingGame_GameData_Fighting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFightingGame_GameData_Fighting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFightingGame_GameData_Fighting";
  }
  protected:
  explicit CMsgFightingGame_GameData_Fighting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgFightingGame_GameData_Fighting_InputSample InputSample;

  // accessors -------------------------------------------------------

  enum : int {
    kInputSampleFieldNumber = 8,
    kLastAckedFrameFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kLastCrcFrameFieldNumber = 3,
    kLastCrcValueFieldNumber = 4,
    kNowFieldNumber = 5,
    kPeerAckTimeFieldNumber = 6,
    kInputStartFrameFieldNumber = 7,
  };
  // repeated .CMsgFightingGame_GameData_Fighting.InputSample input_sample = 8;
  int input_sample_size() const;
  private:
  int _internal_input_sample_size() const;
  public:
  void clear_input_sample();
  ::CMsgFightingGame_GameData_Fighting_InputSample* mutable_input_sample(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFightingGame_GameData_Fighting_InputSample >*
      mutable_input_sample();
  private:
  const ::CMsgFightingGame_GameData_Fighting_InputSample& _internal_input_sample(int index) const;
  ::CMsgFightingGame_GameData_Fighting_InputSample* _internal_add_input_sample();
  public:
  const ::CMsgFightingGame_GameData_Fighting_InputSample& input_sample(int index) const;
  ::CMsgFightingGame_GameData_Fighting_InputSample* add_input_sample();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFightingGame_GameData_Fighting_InputSample >&
      input_sample() const;

  // optional int32 last_acked_frame = 1;
  bool has_last_acked_frame() const;
  private:
  bool _internal_has_last_acked_frame() const;
  public:
  void clear_last_acked_frame();
  int32_t last_acked_frame() const;
  void set_last_acked_frame(int32_t value);
  private:
  int32_t _internal_last_acked_frame() const;
  void _internal_set_last_acked_frame(int32_t value);
  public:

  // optional uint32 player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // optional int32 last_crc_frame = 3;
  bool has_last_crc_frame() const;
  private:
  bool _internal_has_last_crc_frame() const;
  public:
  void clear_last_crc_frame();
  int32_t last_crc_frame() const;
  void set_last_crc_frame(int32_t value);
  private:
  int32_t _internal_last_crc_frame() const;
  void _internal_set_last_crc_frame(int32_t value);
  public:

  // optional uint32 last_crc_value = 4;
  bool has_last_crc_value() const;
  private:
  bool _internal_has_last_crc_value() const;
  public:
  void clear_last_crc_value();
  uint32_t last_crc_value() const;
  void set_last_crc_value(uint32_t value);
  private:
  uint32_t _internal_last_crc_value() const;
  void _internal_set_last_crc_value(uint32_t value);
  public:

  // optional float now = 5;
  bool has_now() const;
  private:
  bool _internal_has_now() const;
  public:
  void clear_now();
  float now() const;
  void set_now(float value);
  private:
  float _internal_now() const;
  void _internal_set_now(float value);
  public:

  // optional float peer_ack_time = 6;
  bool has_peer_ack_time() const;
  private:
  bool _internal_has_peer_ack_time() const;
  public:
  void clear_peer_ack_time();
  float peer_ack_time() const;
  void set_peer_ack_time(float value);
  private:
  float _internal_peer_ack_time() const;
  void _internal_set_peer_ack_time(float value);
  public:

  // optional int32 input_start_frame = 7;
  bool has_input_start_frame() const;
  private:
  bool _internal_has_input_start_frame() const;
  public:
  void clear_input_start_frame();
  int32_t input_start_frame() const;
  void set_input_start_frame(int32_t value);
  private:
  int32_t _internal_input_start_frame() const;
  void _internal_set_input_start_frame(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFightingGame_GameData_Fighting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFightingGame_GameData_Fighting_InputSample > input_sample_;
    int32_t last_acked_frame_;
    uint32_t player_id_;
    int32_t last_crc_frame_;
    uint32_t last_crc_value_;
    float now_;
    float peer_ack_time_;
    int32_t input_start_frame_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFightingGame_GameData_CharacterSelect_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFightingGame_GameData_CharacterSelect.Item) */ {
 public:
  inline CMsgFightingGame_GameData_CharacterSelect_Item() : CMsgFightingGame_GameData_CharacterSelect_Item(nullptr) {}
  ~CMsgFightingGame_GameData_CharacterSelect_Item() override;
  explicit PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_CharacterSelect_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFightingGame_GameData_CharacterSelect_Item(const CMsgFightingGame_GameData_CharacterSelect_Item& from);
  CMsgFightingGame_GameData_CharacterSelect_Item(CMsgFightingGame_GameData_CharacterSelect_Item&& from) noexcept
    : CMsgFightingGame_GameData_CharacterSelect_Item() {
    *this = ::std::move(from);
  }

  inline CMsgFightingGame_GameData_CharacterSelect_Item& operator=(const CMsgFightingGame_GameData_CharacterSelect_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFightingGame_GameData_CharacterSelect_Item& operator=(CMsgFightingGame_GameData_CharacterSelect_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFightingGame_GameData_CharacterSelect_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFightingGame_GameData_CharacterSelect_Item* internal_default_instance() {
    return reinterpret_cast<const CMsgFightingGame_GameData_CharacterSelect_Item*>(
               &_CMsgFightingGame_GameData_CharacterSelect_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgFightingGame_GameData_CharacterSelect_Item& a, CMsgFightingGame_GameData_CharacterSelect_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFightingGame_GameData_CharacterSelect_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFightingGame_GameData_CharacterSelect_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFightingGame_GameData_CharacterSelect_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFightingGame_GameData_CharacterSelect_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFightingGame_GameData_CharacterSelect_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgFightingGame_GameData_CharacterSelect_Item& from) {
    CMsgFightingGame_GameData_CharacterSelect_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFightingGame_GameData_CharacterSelect_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFightingGame_GameData_CharacterSelect.Item";
  }
  protected:
  explicit CMsgFightingGame_GameData_CharacterSelect_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDefFieldNumber = 1,
    kStyleIndexFieldNumber = 2,
  };
  // optional uint32 item_def = 1;
  bool has_item_def() const;
  private:
  bool _internal_has_item_def() const;
  public:
  void clear_item_def();
  uint32_t item_def() const;
  void set_item_def(uint32_t value);
  private:
  uint32_t _internal_item_def() const;
  void _internal_set_item_def(uint32_t value);
  public:

  // optional uint32 style_index = 2 [default = 255];
  bool has_style_index() const;
  private:
  bool _internal_has_style_index() const;
  public:
  void clear_style_index();
  uint32_t style_index() const;
  void set_style_index(uint32_t value);
  private:
  uint32_t _internal_style_index() const;
  void _internal_set_style_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFightingGame_GameData_CharacterSelect.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t item_def_;
    uint32_t style_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFightingGame_GameData_CharacterSelect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFightingGame_GameData_CharacterSelect) */ {
 public:
  inline CMsgFightingGame_GameData_CharacterSelect() : CMsgFightingGame_GameData_CharacterSelect(nullptr) {}
  ~CMsgFightingGame_GameData_CharacterSelect() override;
  explicit PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_CharacterSelect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFightingGame_GameData_CharacterSelect(const CMsgFightingGame_GameData_CharacterSelect& from);
  CMsgFightingGame_GameData_CharacterSelect(CMsgFightingGame_GameData_CharacterSelect&& from) noexcept
    : CMsgFightingGame_GameData_CharacterSelect() {
    *this = ::std::move(from);
  }

  inline CMsgFightingGame_GameData_CharacterSelect& operator=(const CMsgFightingGame_GameData_CharacterSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFightingGame_GameData_CharacterSelect& operator=(CMsgFightingGame_GameData_CharacterSelect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFightingGame_GameData_CharacterSelect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFightingGame_GameData_CharacterSelect* internal_default_instance() {
    return reinterpret_cast<const CMsgFightingGame_GameData_CharacterSelect*>(
               &_CMsgFightingGame_GameData_CharacterSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgFightingGame_GameData_CharacterSelect& a, CMsgFightingGame_GameData_CharacterSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFightingGame_GameData_CharacterSelect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFightingGame_GameData_CharacterSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFightingGame_GameData_CharacterSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFightingGame_GameData_CharacterSelect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFightingGame_GameData_CharacterSelect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgFightingGame_GameData_CharacterSelect& from) {
    CMsgFightingGame_GameData_CharacterSelect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFightingGame_GameData_CharacterSelect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFightingGame_GameData_CharacterSelect";
  }
  protected:
  explicit CMsgFightingGame_GameData_CharacterSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgFightingGame_GameData_CharacterSelect_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kEconItemRefsFieldNumber = 4,
    kCursorIndexFieldNumber = 1,
    kSelectedHeroIdFieldNumber = 2,
    kSelectedStyleFieldNumber = 3,
    kConfirmedStyleFieldNumber = 6,
    kMessageAckFieldNumber = 5,
  };
  // repeated .CMsgFightingGame_GameData_CharacterSelect.Item econ_item_refs = 4;
  int econ_item_refs_size() const;
  private:
  int _internal_econ_item_refs_size() const;
  public:
  void clear_econ_item_refs();
  ::CMsgFightingGame_GameData_CharacterSelect_Item* mutable_econ_item_refs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFightingGame_GameData_CharacterSelect_Item >*
      mutable_econ_item_refs();
  private:
  const ::CMsgFightingGame_GameData_CharacterSelect_Item& _internal_econ_item_refs(int index) const;
  ::CMsgFightingGame_GameData_CharacterSelect_Item* _internal_add_econ_item_refs();
  public:
  const ::CMsgFightingGame_GameData_CharacterSelect_Item& econ_item_refs(int index) const;
  ::CMsgFightingGame_GameData_CharacterSelect_Item* add_econ_item_refs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFightingGame_GameData_CharacterSelect_Item >&
      econ_item_refs() const;

  // optional uint32 cursor_index = 1;
  bool has_cursor_index() const;
  private:
  bool _internal_has_cursor_index() const;
  public:
  void clear_cursor_index();
  uint32_t cursor_index() const;
  void set_cursor_index(uint32_t value);
  private:
  uint32_t _internal_cursor_index() const;
  void _internal_set_cursor_index(uint32_t value);
  public:

  // optional int32 selected_hero_id = 2;
  bool has_selected_hero_id() const;
  private:
  bool _internal_has_selected_hero_id() const;
  public:
  void clear_selected_hero_id();
  int32_t selected_hero_id() const;
  void set_selected_hero_id(int32_t value);
  private:
  int32_t _internal_selected_hero_id() const;
  void _internal_set_selected_hero_id(int32_t value);
  public:

  // optional uint32 selected_style = 3;
  bool has_selected_style() const;
  private:
  bool _internal_has_selected_style() const;
  public:
  void clear_selected_style();
  uint32_t selected_style() const;
  void set_selected_style(uint32_t value);
  private:
  uint32_t _internal_selected_style() const;
  void _internal_set_selected_style(uint32_t value);
  public:

  // optional bool confirmed_style = 6;
  bool has_confirmed_style() const;
  private:
  bool _internal_has_confirmed_style() const;
  public:
  void clear_confirmed_style();
  bool confirmed_style() const;
  void set_confirmed_style(bool value);
  private:
  bool _internal_confirmed_style() const;
  void _internal_set_confirmed_style(bool value);
  public:

  // optional int64 message_ack = 5;
  bool has_message_ack() const;
  private:
  bool _internal_has_message_ack() const;
  public:
  void clear_message_ack();
  int64_t message_ack() const;
  void set_message_ack(int64_t value);
  private:
  int64_t _internal_message_ack() const;
  void _internal_set_message_ack(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFightingGame_GameData_CharacterSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFightingGame_GameData_CharacterSelect_Item > econ_item_refs_;
    uint32_t cursor_index_;
    int32_t selected_hero_id_;
    uint32_t selected_style_;
    bool confirmed_style_;
    int64_t message_ack_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFightingGame_GameData_Loaded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFightingGame_GameData_Loaded) */ {
 public:
  inline CMsgFightingGame_GameData_Loaded() : CMsgFightingGame_GameData_Loaded(nullptr) {}
  ~CMsgFightingGame_GameData_Loaded() override;
  explicit PROTOBUF_CONSTEXPR CMsgFightingGame_GameData_Loaded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFightingGame_GameData_Loaded(const CMsgFightingGame_GameData_Loaded& from);
  CMsgFightingGame_GameData_Loaded(CMsgFightingGame_GameData_Loaded&& from) noexcept
    : CMsgFightingGame_GameData_Loaded() {
    *this = ::std::move(from);
  }

  inline CMsgFightingGame_GameData_Loaded& operator=(const CMsgFightingGame_GameData_Loaded& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFightingGame_GameData_Loaded& operator=(CMsgFightingGame_GameData_Loaded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFightingGame_GameData_Loaded& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFightingGame_GameData_Loaded* internal_default_instance() {
    return reinterpret_cast<const CMsgFightingGame_GameData_Loaded*>(
               &_CMsgFightingGame_GameData_Loaded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgFightingGame_GameData_Loaded& a, CMsgFightingGame_GameData_Loaded& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFightingGame_GameData_Loaded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFightingGame_GameData_Loaded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFightingGame_GameData_Loaded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFightingGame_GameData_Loaded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFightingGame_GameData_Loaded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgFightingGame_GameData_Loaded& from) {
    CMsgFightingGame_GameData_Loaded::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFightingGame_GameData_Loaded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFightingGame_GameData_Loaded";
  }
  protected:
  explicit CMsgFightingGame_GameData_Loaded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNowFieldNumber = 1,
    kPeerAckTimeFieldNumber = 2,
    kProposedStartTimeFieldNumber = 3,
    kAcceptedStartTimeFieldNumber = 4,
  };
  // optional float now = 1;
  bool has_now() const;
  private:
  bool _internal_has_now() const;
  public:
  void clear_now();
  float now() const;
  void set_now(float value);
  private:
  float _internal_now() const;
  void _internal_set_now(float value);
  public:

  // optional float peer_ack_time = 2;
  bool has_peer_ack_time() const;
  private:
  bool _internal_has_peer_ack_time() const;
  public:
  void clear_peer_ack_time();
  float peer_ack_time() const;
  void set_peer_ack_time(float value);
  private:
  float _internal_peer_ack_time() const;
  void _internal_set_peer_ack_time(float value);
  public:

  // optional float proposed_start_time = 3;
  bool has_proposed_start_time() const;
  private:
  bool _internal_has_proposed_start_time() const;
  public:
  void clear_proposed_start_time();
  float proposed_start_time() const;
  void set_proposed_start_time(float value);
  private:
  float _internal_proposed_start_time() const;
  void _internal_set_proposed_start_time(float value);
  public:

  // optional float accepted_start_time = 4;
  bool has_accepted_start_time() const;
  private:
  bool _internal_has_accepted_start_time() const;
  public:
  void clear_accepted_start_time();
  float accepted_start_time() const;
  void set_accepted_start_time(float value);
  private:
  float _internal_accepted_start_time() const;
  void _internal_set_accepted_start_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFightingGame_GameData_Loaded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float now_;
    float peer_ack_time_;
    float proposed_start_time_;
    float accepted_start_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CP2P_FightingGame_GameData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CP2P_FightingGame_GameData) */ {
 public:
  inline CP2P_FightingGame_GameData() : CP2P_FightingGame_GameData(nullptr) {}
  ~CP2P_FightingGame_GameData() override;
  explicit PROTOBUF_CONSTEXPR CP2P_FightingGame_GameData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CP2P_FightingGame_GameData(const CP2P_FightingGame_GameData& from);
  CP2P_FightingGame_GameData(CP2P_FightingGame_GameData&& from) noexcept
    : CP2P_FightingGame_GameData() {
    *this = ::std::move(from);
  }

  inline CP2P_FightingGame_GameData& operator=(const CP2P_FightingGame_GameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CP2P_FightingGame_GameData& operator=(CP2P_FightingGame_GameData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CP2P_FightingGame_GameData& default_instance() {
    return *internal_default_instance();
  }
  enum StateDataCase {
    kFight = 2,
    kCharacterSelect = 3,
    kLoaded = 4,
    STATE_DATA_NOT_SET = 0,
  };

  static inline const CP2P_FightingGame_GameData* internal_default_instance() {
    return reinterpret_cast<const CP2P_FightingGame_GameData*>(
               &_CP2P_FightingGame_GameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CP2P_FightingGame_GameData& a, CP2P_FightingGame_GameData& b) {
    a.Swap(&b);
  }
  inline void Swap(CP2P_FightingGame_GameData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CP2P_FightingGame_GameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CP2P_FightingGame_GameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CP2P_FightingGame_GameData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CP2P_FightingGame_GameData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CP2P_FightingGame_GameData& from) {
    CP2P_FightingGame_GameData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CP2P_FightingGame_GameData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CP2P_FightingGame_GameData";
  }
  protected:
  explicit CP2P_FightingGame_GameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CP2P_FightingGame_GameData_EState EState;
  static constexpr EState k_ChoosingCharacter =
    CP2P_FightingGame_GameData_EState_k_ChoosingCharacter;
  static constexpr EState k_Loaded =
    CP2P_FightingGame_GameData_EState_k_Loaded;
  static constexpr EState k_Fighting =
    CP2P_FightingGame_GameData_EState_k_Fighting;
  static inline bool EState_IsValid(int value) {
    return CP2P_FightingGame_GameData_EState_IsValid(value);
  }
  static constexpr EState EState_MIN =
    CP2P_FightingGame_GameData_EState_EState_MIN;
  static constexpr EState EState_MAX =
    CP2P_FightingGame_GameData_EState_EState_MAX;
  static constexpr int EState_ARRAYSIZE =
    CP2P_FightingGame_GameData_EState_EState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EState_descriptor() {
    return CP2P_FightingGame_GameData_EState_descriptor();
  }
  template<typename T>
  static inline const std::string& EState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EState_Name.");
    return CP2P_FightingGame_GameData_EState_Name(enum_t_value);
  }
  static inline bool EState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EState* value) {
    return CP2P_FightingGame_GameData_EState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kFightFieldNumber = 2,
    kCharacterSelectFieldNumber = 3,
    kLoadedFieldNumber = 4,
  };
  // optional .CP2P_FightingGame_GameData.EState state = 1 [default = k_ChoosingCharacter];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::CP2P_FightingGame_GameData_EState state() const;
  void set_state(::CP2P_FightingGame_GameData_EState value);
  private:
  ::CP2P_FightingGame_GameData_EState _internal_state() const;
  void _internal_set_state(::CP2P_FightingGame_GameData_EState value);
  public:

  // .CMsgFightingGame_GameData_Fighting fight = 2;
  bool has_fight() const;
  private:
  bool _internal_has_fight() const;
  public:
  void clear_fight();
  const ::CMsgFightingGame_GameData_Fighting& fight() const;
  PROTOBUF_NODISCARD ::CMsgFightingGame_GameData_Fighting* release_fight();
  ::CMsgFightingGame_GameData_Fighting* mutable_fight();
  void set_allocated_fight(::CMsgFightingGame_GameData_Fighting* fight);
  private:
  const ::CMsgFightingGame_GameData_Fighting& _internal_fight() const;
  ::CMsgFightingGame_GameData_Fighting* _internal_mutable_fight();
  public:
  void unsafe_arena_set_allocated_fight(
      ::CMsgFightingGame_GameData_Fighting* fight);
  ::CMsgFightingGame_GameData_Fighting* unsafe_arena_release_fight();

  // .CMsgFightingGame_GameData_CharacterSelect character_select = 3;
  bool has_character_select() const;
  private:
  bool _internal_has_character_select() const;
  public:
  void clear_character_select();
  const ::CMsgFightingGame_GameData_CharacterSelect& character_select() const;
  PROTOBUF_NODISCARD ::CMsgFightingGame_GameData_CharacterSelect* release_character_select();
  ::CMsgFightingGame_GameData_CharacterSelect* mutable_character_select();
  void set_allocated_character_select(::CMsgFightingGame_GameData_CharacterSelect* character_select);
  private:
  const ::CMsgFightingGame_GameData_CharacterSelect& _internal_character_select() const;
  ::CMsgFightingGame_GameData_CharacterSelect* _internal_mutable_character_select();
  public:
  void unsafe_arena_set_allocated_character_select(
      ::CMsgFightingGame_GameData_CharacterSelect* character_select);
  ::CMsgFightingGame_GameData_CharacterSelect* unsafe_arena_release_character_select();

  // .CMsgFightingGame_GameData_Loaded loaded = 4;
  bool has_loaded() const;
  private:
  bool _internal_has_loaded() const;
  public:
  void clear_loaded();
  const ::CMsgFightingGame_GameData_Loaded& loaded() const;
  PROTOBUF_NODISCARD ::CMsgFightingGame_GameData_Loaded* release_loaded();
  ::CMsgFightingGame_GameData_Loaded* mutable_loaded();
  void set_allocated_loaded(::CMsgFightingGame_GameData_Loaded* loaded);
  private:
  const ::CMsgFightingGame_GameData_Loaded& _internal_loaded() const;
  ::CMsgFightingGame_GameData_Loaded* _internal_mutable_loaded();
  public:
  void unsafe_arena_set_allocated_loaded(
      ::CMsgFightingGame_GameData_Loaded* loaded);
  ::CMsgFightingGame_GameData_Loaded* unsafe_arena_release_loaded();

  void clear_state_data();
  StateDataCase state_data_case() const;
  // @@protoc_insertion_point(class_scope:CP2P_FightingGame_GameData)
 private:
  class _Internal;
  void set_has_fight();
  void set_has_character_select();
  void set_has_loaded();

  inline bool has_state_data() const;
  inline void clear_has_state_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int state_;
    union StateDataUnion {
      constexpr StateDataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::CMsgFightingGame_GameData_Fighting* fight_;
      ::CMsgFightingGame_GameData_CharacterSelect* character_select_;
      ::CMsgFightingGame_GameData_Loaded* loaded_;
    } state_data_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgFightingGame_GameData_Fighting_InputSample

// optional uint32 button_mask = 1;
inline bool CMsgFightingGame_GameData_Fighting_InputSample::_internal_has_button_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_Fighting_InputSample::has_button_mask() const {
  return _internal_has_button_mask();
}
inline void CMsgFightingGame_GameData_Fighting_InputSample::clear_button_mask() {
  _impl_.button_mask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgFightingGame_GameData_Fighting_InputSample::_internal_button_mask() const {
  return _impl_.button_mask_;
}
inline uint32_t CMsgFightingGame_GameData_Fighting_InputSample::button_mask() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Fighting.InputSample.button_mask)
  return _internal_button_mask();
}
inline void CMsgFightingGame_GameData_Fighting_InputSample::_internal_set_button_mask(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.button_mask_ = value;
}
inline void CMsgFightingGame_GameData_Fighting_InputSample::set_button_mask(uint32_t value) {
  _internal_set_button_mask(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_Fighting.InputSample.button_mask)
}

// -------------------------------------------------------------------

// CMsgFightingGame_GameData_Fighting

// optional int32 last_acked_frame = 1;
inline bool CMsgFightingGame_GameData_Fighting::_internal_has_last_acked_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_Fighting::has_last_acked_frame() const {
  return _internal_has_last_acked_frame();
}
inline void CMsgFightingGame_GameData_Fighting::clear_last_acked_frame() {
  _impl_.last_acked_frame_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgFightingGame_GameData_Fighting::_internal_last_acked_frame() const {
  return _impl_.last_acked_frame_;
}
inline int32_t CMsgFightingGame_GameData_Fighting::last_acked_frame() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Fighting.last_acked_frame)
  return _internal_last_acked_frame();
}
inline void CMsgFightingGame_GameData_Fighting::_internal_set_last_acked_frame(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.last_acked_frame_ = value;
}
inline void CMsgFightingGame_GameData_Fighting::set_last_acked_frame(int32_t value) {
  _internal_set_last_acked_frame(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_Fighting.last_acked_frame)
}

// optional uint32 player_id = 2;
inline bool CMsgFightingGame_GameData_Fighting::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_Fighting::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMsgFightingGame_GameData_Fighting::clear_player_id() {
  _impl_.player_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgFightingGame_GameData_Fighting::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t CMsgFightingGame_GameData_Fighting::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Fighting.player_id)
  return _internal_player_id();
}
inline void CMsgFightingGame_GameData_Fighting::_internal_set_player_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.player_id_ = value;
}
inline void CMsgFightingGame_GameData_Fighting::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_Fighting.player_id)
}

// optional int32 last_crc_frame = 3;
inline bool CMsgFightingGame_GameData_Fighting::_internal_has_last_crc_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_Fighting::has_last_crc_frame() const {
  return _internal_has_last_crc_frame();
}
inline void CMsgFightingGame_GameData_Fighting::clear_last_crc_frame() {
  _impl_.last_crc_frame_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgFightingGame_GameData_Fighting::_internal_last_crc_frame() const {
  return _impl_.last_crc_frame_;
}
inline int32_t CMsgFightingGame_GameData_Fighting::last_crc_frame() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Fighting.last_crc_frame)
  return _internal_last_crc_frame();
}
inline void CMsgFightingGame_GameData_Fighting::_internal_set_last_crc_frame(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.last_crc_frame_ = value;
}
inline void CMsgFightingGame_GameData_Fighting::set_last_crc_frame(int32_t value) {
  _internal_set_last_crc_frame(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_Fighting.last_crc_frame)
}

// optional uint32 last_crc_value = 4;
inline bool CMsgFightingGame_GameData_Fighting::_internal_has_last_crc_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_Fighting::has_last_crc_value() const {
  return _internal_has_last_crc_value();
}
inline void CMsgFightingGame_GameData_Fighting::clear_last_crc_value() {
  _impl_.last_crc_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgFightingGame_GameData_Fighting::_internal_last_crc_value() const {
  return _impl_.last_crc_value_;
}
inline uint32_t CMsgFightingGame_GameData_Fighting::last_crc_value() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Fighting.last_crc_value)
  return _internal_last_crc_value();
}
inline void CMsgFightingGame_GameData_Fighting::_internal_set_last_crc_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.last_crc_value_ = value;
}
inline void CMsgFightingGame_GameData_Fighting::set_last_crc_value(uint32_t value) {
  _internal_set_last_crc_value(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_Fighting.last_crc_value)
}

// optional float now = 5;
inline bool CMsgFightingGame_GameData_Fighting::_internal_has_now() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_Fighting::has_now() const {
  return _internal_has_now();
}
inline void CMsgFightingGame_GameData_Fighting::clear_now() {
  _impl_.now_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CMsgFightingGame_GameData_Fighting::_internal_now() const {
  return _impl_.now_;
}
inline float CMsgFightingGame_GameData_Fighting::now() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Fighting.now)
  return _internal_now();
}
inline void CMsgFightingGame_GameData_Fighting::_internal_set_now(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.now_ = value;
}
inline void CMsgFightingGame_GameData_Fighting::set_now(float value) {
  _internal_set_now(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_Fighting.now)
}

// optional float peer_ack_time = 6;
inline bool CMsgFightingGame_GameData_Fighting::_internal_has_peer_ack_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_Fighting::has_peer_ack_time() const {
  return _internal_has_peer_ack_time();
}
inline void CMsgFightingGame_GameData_Fighting::clear_peer_ack_time() {
  _impl_.peer_ack_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CMsgFightingGame_GameData_Fighting::_internal_peer_ack_time() const {
  return _impl_.peer_ack_time_;
}
inline float CMsgFightingGame_GameData_Fighting::peer_ack_time() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Fighting.peer_ack_time)
  return _internal_peer_ack_time();
}
inline void CMsgFightingGame_GameData_Fighting::_internal_set_peer_ack_time(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.peer_ack_time_ = value;
}
inline void CMsgFightingGame_GameData_Fighting::set_peer_ack_time(float value) {
  _internal_set_peer_ack_time(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_Fighting.peer_ack_time)
}

// optional int32 input_start_frame = 7;
inline bool CMsgFightingGame_GameData_Fighting::_internal_has_input_start_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_Fighting::has_input_start_frame() const {
  return _internal_has_input_start_frame();
}
inline void CMsgFightingGame_GameData_Fighting::clear_input_start_frame() {
  _impl_.input_start_frame_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t CMsgFightingGame_GameData_Fighting::_internal_input_start_frame() const {
  return _impl_.input_start_frame_;
}
inline int32_t CMsgFightingGame_GameData_Fighting::input_start_frame() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Fighting.input_start_frame)
  return _internal_input_start_frame();
}
inline void CMsgFightingGame_GameData_Fighting::_internal_set_input_start_frame(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.input_start_frame_ = value;
}
inline void CMsgFightingGame_GameData_Fighting::set_input_start_frame(int32_t value) {
  _internal_set_input_start_frame(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_Fighting.input_start_frame)
}

// repeated .CMsgFightingGame_GameData_Fighting.InputSample input_sample = 8;
inline int CMsgFightingGame_GameData_Fighting::_internal_input_sample_size() const {
  return _impl_.input_sample_.size();
}
inline int CMsgFightingGame_GameData_Fighting::input_sample_size() const {
  return _internal_input_sample_size();
}
inline void CMsgFightingGame_GameData_Fighting::clear_input_sample() {
  _impl_.input_sample_.Clear();
}
inline ::CMsgFightingGame_GameData_Fighting_InputSample* CMsgFightingGame_GameData_Fighting::mutable_input_sample(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgFightingGame_GameData_Fighting.input_sample)
  return _impl_.input_sample_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFightingGame_GameData_Fighting_InputSample >*
CMsgFightingGame_GameData_Fighting::mutable_input_sample() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFightingGame_GameData_Fighting.input_sample)
  return &_impl_.input_sample_;
}
inline const ::CMsgFightingGame_GameData_Fighting_InputSample& CMsgFightingGame_GameData_Fighting::_internal_input_sample(int index) const {
  return _impl_.input_sample_.Get(index);
}
inline const ::CMsgFightingGame_GameData_Fighting_InputSample& CMsgFightingGame_GameData_Fighting::input_sample(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Fighting.input_sample)
  return _internal_input_sample(index);
}
inline ::CMsgFightingGame_GameData_Fighting_InputSample* CMsgFightingGame_GameData_Fighting::_internal_add_input_sample() {
  return _impl_.input_sample_.Add();
}
inline ::CMsgFightingGame_GameData_Fighting_InputSample* CMsgFightingGame_GameData_Fighting::add_input_sample() {
  ::CMsgFightingGame_GameData_Fighting_InputSample* _add = _internal_add_input_sample();
  // @@protoc_insertion_point(field_add:CMsgFightingGame_GameData_Fighting.input_sample)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFightingGame_GameData_Fighting_InputSample >&
CMsgFightingGame_GameData_Fighting::input_sample() const {
  // @@protoc_insertion_point(field_list:CMsgFightingGame_GameData_Fighting.input_sample)
  return _impl_.input_sample_;
}

// -------------------------------------------------------------------

// CMsgFightingGame_GameData_CharacterSelect_Item

// optional uint32 item_def = 1;
inline bool CMsgFightingGame_GameData_CharacterSelect_Item::_internal_has_item_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_CharacterSelect_Item::has_item_def() const {
  return _internal_has_item_def();
}
inline void CMsgFightingGame_GameData_CharacterSelect_Item::clear_item_def() {
  _impl_.item_def_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgFightingGame_GameData_CharacterSelect_Item::_internal_item_def() const {
  return _impl_.item_def_;
}
inline uint32_t CMsgFightingGame_GameData_CharacterSelect_Item::item_def() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_CharacterSelect.Item.item_def)
  return _internal_item_def();
}
inline void CMsgFightingGame_GameData_CharacterSelect_Item::_internal_set_item_def(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.item_def_ = value;
}
inline void CMsgFightingGame_GameData_CharacterSelect_Item::set_item_def(uint32_t value) {
  _internal_set_item_def(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_CharacterSelect.Item.item_def)
}

// optional uint32 style_index = 2 [default = 255];
inline bool CMsgFightingGame_GameData_CharacterSelect_Item::_internal_has_style_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_CharacterSelect_Item::has_style_index() const {
  return _internal_has_style_index();
}
inline void CMsgFightingGame_GameData_CharacterSelect_Item::clear_style_index() {
  _impl_.style_index_ = 255u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgFightingGame_GameData_CharacterSelect_Item::_internal_style_index() const {
  return _impl_.style_index_;
}
inline uint32_t CMsgFightingGame_GameData_CharacterSelect_Item::style_index() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_CharacterSelect.Item.style_index)
  return _internal_style_index();
}
inline void CMsgFightingGame_GameData_CharacterSelect_Item::_internal_set_style_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.style_index_ = value;
}
inline void CMsgFightingGame_GameData_CharacterSelect_Item::set_style_index(uint32_t value) {
  _internal_set_style_index(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_CharacterSelect.Item.style_index)
}

// -------------------------------------------------------------------

// CMsgFightingGame_GameData_CharacterSelect

// optional uint32 cursor_index = 1;
inline bool CMsgFightingGame_GameData_CharacterSelect::_internal_has_cursor_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_CharacterSelect::has_cursor_index() const {
  return _internal_has_cursor_index();
}
inline void CMsgFightingGame_GameData_CharacterSelect::clear_cursor_index() {
  _impl_.cursor_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgFightingGame_GameData_CharacterSelect::_internal_cursor_index() const {
  return _impl_.cursor_index_;
}
inline uint32_t CMsgFightingGame_GameData_CharacterSelect::cursor_index() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_CharacterSelect.cursor_index)
  return _internal_cursor_index();
}
inline void CMsgFightingGame_GameData_CharacterSelect::_internal_set_cursor_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cursor_index_ = value;
}
inline void CMsgFightingGame_GameData_CharacterSelect::set_cursor_index(uint32_t value) {
  _internal_set_cursor_index(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_CharacterSelect.cursor_index)
}

// optional int32 selected_hero_id = 2;
inline bool CMsgFightingGame_GameData_CharacterSelect::_internal_has_selected_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_CharacterSelect::has_selected_hero_id() const {
  return _internal_has_selected_hero_id();
}
inline void CMsgFightingGame_GameData_CharacterSelect::clear_selected_hero_id() {
  _impl_.selected_hero_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgFightingGame_GameData_CharacterSelect::_internal_selected_hero_id() const {
  return _impl_.selected_hero_id_;
}
inline int32_t CMsgFightingGame_GameData_CharacterSelect::selected_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_CharacterSelect.selected_hero_id)
  return _internal_selected_hero_id();
}
inline void CMsgFightingGame_GameData_CharacterSelect::_internal_set_selected_hero_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.selected_hero_id_ = value;
}
inline void CMsgFightingGame_GameData_CharacterSelect::set_selected_hero_id(int32_t value) {
  _internal_set_selected_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_CharacterSelect.selected_hero_id)
}

// optional uint32 selected_style = 3;
inline bool CMsgFightingGame_GameData_CharacterSelect::_internal_has_selected_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_CharacterSelect::has_selected_style() const {
  return _internal_has_selected_style();
}
inline void CMsgFightingGame_GameData_CharacterSelect::clear_selected_style() {
  _impl_.selected_style_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgFightingGame_GameData_CharacterSelect::_internal_selected_style() const {
  return _impl_.selected_style_;
}
inline uint32_t CMsgFightingGame_GameData_CharacterSelect::selected_style() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_CharacterSelect.selected_style)
  return _internal_selected_style();
}
inline void CMsgFightingGame_GameData_CharacterSelect::_internal_set_selected_style(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.selected_style_ = value;
}
inline void CMsgFightingGame_GameData_CharacterSelect::set_selected_style(uint32_t value) {
  _internal_set_selected_style(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_CharacterSelect.selected_style)
}

// repeated .CMsgFightingGame_GameData_CharacterSelect.Item econ_item_refs = 4;
inline int CMsgFightingGame_GameData_CharacterSelect::_internal_econ_item_refs_size() const {
  return _impl_.econ_item_refs_.size();
}
inline int CMsgFightingGame_GameData_CharacterSelect::econ_item_refs_size() const {
  return _internal_econ_item_refs_size();
}
inline void CMsgFightingGame_GameData_CharacterSelect::clear_econ_item_refs() {
  _impl_.econ_item_refs_.Clear();
}
inline ::CMsgFightingGame_GameData_CharacterSelect_Item* CMsgFightingGame_GameData_CharacterSelect::mutable_econ_item_refs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgFightingGame_GameData_CharacterSelect.econ_item_refs)
  return _impl_.econ_item_refs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFightingGame_GameData_CharacterSelect_Item >*
CMsgFightingGame_GameData_CharacterSelect::mutable_econ_item_refs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFightingGame_GameData_CharacterSelect.econ_item_refs)
  return &_impl_.econ_item_refs_;
}
inline const ::CMsgFightingGame_GameData_CharacterSelect_Item& CMsgFightingGame_GameData_CharacterSelect::_internal_econ_item_refs(int index) const {
  return _impl_.econ_item_refs_.Get(index);
}
inline const ::CMsgFightingGame_GameData_CharacterSelect_Item& CMsgFightingGame_GameData_CharacterSelect::econ_item_refs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_CharacterSelect.econ_item_refs)
  return _internal_econ_item_refs(index);
}
inline ::CMsgFightingGame_GameData_CharacterSelect_Item* CMsgFightingGame_GameData_CharacterSelect::_internal_add_econ_item_refs() {
  return _impl_.econ_item_refs_.Add();
}
inline ::CMsgFightingGame_GameData_CharacterSelect_Item* CMsgFightingGame_GameData_CharacterSelect::add_econ_item_refs() {
  ::CMsgFightingGame_GameData_CharacterSelect_Item* _add = _internal_add_econ_item_refs();
  // @@protoc_insertion_point(field_add:CMsgFightingGame_GameData_CharacterSelect.econ_item_refs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFightingGame_GameData_CharacterSelect_Item >&
CMsgFightingGame_GameData_CharacterSelect::econ_item_refs() const {
  // @@protoc_insertion_point(field_list:CMsgFightingGame_GameData_CharacterSelect.econ_item_refs)
  return _impl_.econ_item_refs_;
}

// optional int64 message_ack = 5;
inline bool CMsgFightingGame_GameData_CharacterSelect::_internal_has_message_ack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_CharacterSelect::has_message_ack() const {
  return _internal_has_message_ack();
}
inline void CMsgFightingGame_GameData_CharacterSelect::clear_message_ack() {
  _impl_.message_ack_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t CMsgFightingGame_GameData_CharacterSelect::_internal_message_ack() const {
  return _impl_.message_ack_;
}
inline int64_t CMsgFightingGame_GameData_CharacterSelect::message_ack() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_CharacterSelect.message_ack)
  return _internal_message_ack();
}
inline void CMsgFightingGame_GameData_CharacterSelect::_internal_set_message_ack(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.message_ack_ = value;
}
inline void CMsgFightingGame_GameData_CharacterSelect::set_message_ack(int64_t value) {
  _internal_set_message_ack(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_CharacterSelect.message_ack)
}

// optional bool confirmed_style = 6;
inline bool CMsgFightingGame_GameData_CharacterSelect::_internal_has_confirmed_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_CharacterSelect::has_confirmed_style() const {
  return _internal_has_confirmed_style();
}
inline void CMsgFightingGame_GameData_CharacterSelect::clear_confirmed_style() {
  _impl_.confirmed_style_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgFightingGame_GameData_CharacterSelect::_internal_confirmed_style() const {
  return _impl_.confirmed_style_;
}
inline bool CMsgFightingGame_GameData_CharacterSelect::confirmed_style() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_CharacterSelect.confirmed_style)
  return _internal_confirmed_style();
}
inline void CMsgFightingGame_GameData_CharacterSelect::_internal_set_confirmed_style(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.confirmed_style_ = value;
}
inline void CMsgFightingGame_GameData_CharacterSelect::set_confirmed_style(bool value) {
  _internal_set_confirmed_style(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_CharacterSelect.confirmed_style)
}

// -------------------------------------------------------------------

// CMsgFightingGame_GameData_Loaded

// optional float now = 1;
inline bool CMsgFightingGame_GameData_Loaded::_internal_has_now() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_Loaded::has_now() const {
  return _internal_has_now();
}
inline void CMsgFightingGame_GameData_Loaded::clear_now() {
  _impl_.now_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CMsgFightingGame_GameData_Loaded::_internal_now() const {
  return _impl_.now_;
}
inline float CMsgFightingGame_GameData_Loaded::now() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Loaded.now)
  return _internal_now();
}
inline void CMsgFightingGame_GameData_Loaded::_internal_set_now(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.now_ = value;
}
inline void CMsgFightingGame_GameData_Loaded::set_now(float value) {
  _internal_set_now(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_Loaded.now)
}

// optional float peer_ack_time = 2;
inline bool CMsgFightingGame_GameData_Loaded::_internal_has_peer_ack_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_Loaded::has_peer_ack_time() const {
  return _internal_has_peer_ack_time();
}
inline void CMsgFightingGame_GameData_Loaded::clear_peer_ack_time() {
  _impl_.peer_ack_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgFightingGame_GameData_Loaded::_internal_peer_ack_time() const {
  return _impl_.peer_ack_time_;
}
inline float CMsgFightingGame_GameData_Loaded::peer_ack_time() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Loaded.peer_ack_time)
  return _internal_peer_ack_time();
}
inline void CMsgFightingGame_GameData_Loaded::_internal_set_peer_ack_time(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.peer_ack_time_ = value;
}
inline void CMsgFightingGame_GameData_Loaded::set_peer_ack_time(float value) {
  _internal_set_peer_ack_time(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_Loaded.peer_ack_time)
}

// optional float proposed_start_time = 3;
inline bool CMsgFightingGame_GameData_Loaded::_internal_has_proposed_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_Loaded::has_proposed_start_time() const {
  return _internal_has_proposed_start_time();
}
inline void CMsgFightingGame_GameData_Loaded::clear_proposed_start_time() {
  _impl_.proposed_start_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgFightingGame_GameData_Loaded::_internal_proposed_start_time() const {
  return _impl_.proposed_start_time_;
}
inline float CMsgFightingGame_GameData_Loaded::proposed_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Loaded.proposed_start_time)
  return _internal_proposed_start_time();
}
inline void CMsgFightingGame_GameData_Loaded::_internal_set_proposed_start_time(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.proposed_start_time_ = value;
}
inline void CMsgFightingGame_GameData_Loaded::set_proposed_start_time(float value) {
  _internal_set_proposed_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_Loaded.proposed_start_time)
}

// optional float accepted_start_time = 4;
inline bool CMsgFightingGame_GameData_Loaded::_internal_has_accepted_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgFightingGame_GameData_Loaded::has_accepted_start_time() const {
  return _internal_has_accepted_start_time();
}
inline void CMsgFightingGame_GameData_Loaded::clear_accepted_start_time() {
  _impl_.accepted_start_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgFightingGame_GameData_Loaded::_internal_accepted_start_time() const {
  return _impl_.accepted_start_time_;
}
inline float CMsgFightingGame_GameData_Loaded::accepted_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgFightingGame_GameData_Loaded.accepted_start_time)
  return _internal_accepted_start_time();
}
inline void CMsgFightingGame_GameData_Loaded::_internal_set_accepted_start_time(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.accepted_start_time_ = value;
}
inline void CMsgFightingGame_GameData_Loaded::set_accepted_start_time(float value) {
  _internal_set_accepted_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgFightingGame_GameData_Loaded.accepted_start_time)
}

// -------------------------------------------------------------------

// CP2P_FightingGame_GameData

// optional .CP2P_FightingGame_GameData.EState state = 1 [default = k_ChoosingCharacter];
inline bool CP2P_FightingGame_GameData::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CP2P_FightingGame_GameData::has_state() const {
  return _internal_has_state();
}
inline void CP2P_FightingGame_GameData::clear_state() {
  _impl_.state_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CP2P_FightingGame_GameData_EState CP2P_FightingGame_GameData::_internal_state() const {
  return static_cast< ::CP2P_FightingGame_GameData_EState >(_impl_.state_);
}
inline ::CP2P_FightingGame_GameData_EState CP2P_FightingGame_GameData::state() const {
  // @@protoc_insertion_point(field_get:CP2P_FightingGame_GameData.state)
  return _internal_state();
}
inline void CP2P_FightingGame_GameData::_internal_set_state(::CP2P_FightingGame_GameData_EState value) {
  assert(::CP2P_FightingGame_GameData_EState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.state_ = value;
}
inline void CP2P_FightingGame_GameData::set_state(::CP2P_FightingGame_GameData_EState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CP2P_FightingGame_GameData.state)
}

// .CMsgFightingGame_GameData_Fighting fight = 2;
inline bool CP2P_FightingGame_GameData::_internal_has_fight() const {
  return state_data_case() == kFight;
}
inline bool CP2P_FightingGame_GameData::has_fight() const {
  return _internal_has_fight();
}
inline void CP2P_FightingGame_GameData::set_has_fight() {
  _impl_._oneof_case_[0] = kFight;
}
inline void CP2P_FightingGame_GameData::clear_fight() {
  if (_internal_has_fight()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.state_data_.fight_;
    }
    clear_has_state_data();
  }
}
inline ::CMsgFightingGame_GameData_Fighting* CP2P_FightingGame_GameData::release_fight() {
  // @@protoc_insertion_point(field_release:CP2P_FightingGame_GameData.fight)
  if (_internal_has_fight()) {
    clear_has_state_data();
    ::CMsgFightingGame_GameData_Fighting* temp = _impl_.state_data_.fight_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.state_data_.fight_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgFightingGame_GameData_Fighting& CP2P_FightingGame_GameData::_internal_fight() const {
  return _internal_has_fight()
      ? *_impl_.state_data_.fight_
      : reinterpret_cast< ::CMsgFightingGame_GameData_Fighting&>(::_CMsgFightingGame_GameData_Fighting_default_instance_);
}
inline const ::CMsgFightingGame_GameData_Fighting& CP2P_FightingGame_GameData::fight() const {
  // @@protoc_insertion_point(field_get:CP2P_FightingGame_GameData.fight)
  return _internal_fight();
}
inline ::CMsgFightingGame_GameData_Fighting* CP2P_FightingGame_GameData::unsafe_arena_release_fight() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CP2P_FightingGame_GameData.fight)
  if (_internal_has_fight()) {
    clear_has_state_data();
    ::CMsgFightingGame_GameData_Fighting* temp = _impl_.state_data_.fight_;
    _impl_.state_data_.fight_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CP2P_FightingGame_GameData::unsafe_arena_set_allocated_fight(::CMsgFightingGame_GameData_Fighting* fight) {
  clear_state_data();
  if (fight) {
    set_has_fight();
    _impl_.state_data_.fight_ = fight;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CP2P_FightingGame_GameData.fight)
}
inline ::CMsgFightingGame_GameData_Fighting* CP2P_FightingGame_GameData::_internal_mutable_fight() {
  if (!_internal_has_fight()) {
    clear_state_data();
    set_has_fight();
    _impl_.state_data_.fight_ = CreateMaybeMessage< ::CMsgFightingGame_GameData_Fighting >(GetArenaForAllocation());
  }
  return _impl_.state_data_.fight_;
}
inline ::CMsgFightingGame_GameData_Fighting* CP2P_FightingGame_GameData::mutable_fight() {
  ::CMsgFightingGame_GameData_Fighting* _msg = _internal_mutable_fight();
  // @@protoc_insertion_point(field_mutable:CP2P_FightingGame_GameData.fight)
  return _msg;
}

// .CMsgFightingGame_GameData_CharacterSelect character_select = 3;
inline bool CP2P_FightingGame_GameData::_internal_has_character_select() const {
  return state_data_case() == kCharacterSelect;
}
inline bool CP2P_FightingGame_GameData::has_character_select() const {
  return _internal_has_character_select();
}
inline void CP2P_FightingGame_GameData::set_has_character_select() {
  _impl_._oneof_case_[0] = kCharacterSelect;
}
inline void CP2P_FightingGame_GameData::clear_character_select() {
  if (_internal_has_character_select()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.state_data_.character_select_;
    }
    clear_has_state_data();
  }
}
inline ::CMsgFightingGame_GameData_CharacterSelect* CP2P_FightingGame_GameData::release_character_select() {
  // @@protoc_insertion_point(field_release:CP2P_FightingGame_GameData.character_select)
  if (_internal_has_character_select()) {
    clear_has_state_data();
    ::CMsgFightingGame_GameData_CharacterSelect* temp = _impl_.state_data_.character_select_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.state_data_.character_select_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgFightingGame_GameData_CharacterSelect& CP2P_FightingGame_GameData::_internal_character_select() const {
  return _internal_has_character_select()
      ? *_impl_.state_data_.character_select_
      : reinterpret_cast< ::CMsgFightingGame_GameData_CharacterSelect&>(::_CMsgFightingGame_GameData_CharacterSelect_default_instance_);
}
inline const ::CMsgFightingGame_GameData_CharacterSelect& CP2P_FightingGame_GameData::character_select() const {
  // @@protoc_insertion_point(field_get:CP2P_FightingGame_GameData.character_select)
  return _internal_character_select();
}
inline ::CMsgFightingGame_GameData_CharacterSelect* CP2P_FightingGame_GameData::unsafe_arena_release_character_select() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CP2P_FightingGame_GameData.character_select)
  if (_internal_has_character_select()) {
    clear_has_state_data();
    ::CMsgFightingGame_GameData_CharacterSelect* temp = _impl_.state_data_.character_select_;
    _impl_.state_data_.character_select_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CP2P_FightingGame_GameData::unsafe_arena_set_allocated_character_select(::CMsgFightingGame_GameData_CharacterSelect* character_select) {
  clear_state_data();
  if (character_select) {
    set_has_character_select();
    _impl_.state_data_.character_select_ = character_select;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CP2P_FightingGame_GameData.character_select)
}
inline ::CMsgFightingGame_GameData_CharacterSelect* CP2P_FightingGame_GameData::_internal_mutable_character_select() {
  if (!_internal_has_character_select()) {
    clear_state_data();
    set_has_character_select();
    _impl_.state_data_.character_select_ = CreateMaybeMessage< ::CMsgFightingGame_GameData_CharacterSelect >(GetArenaForAllocation());
  }
  return _impl_.state_data_.character_select_;
}
inline ::CMsgFightingGame_GameData_CharacterSelect* CP2P_FightingGame_GameData::mutable_character_select() {
  ::CMsgFightingGame_GameData_CharacterSelect* _msg = _internal_mutable_character_select();
  // @@protoc_insertion_point(field_mutable:CP2P_FightingGame_GameData.character_select)
  return _msg;
}

// .CMsgFightingGame_GameData_Loaded loaded = 4;
inline bool CP2P_FightingGame_GameData::_internal_has_loaded() const {
  return state_data_case() == kLoaded;
}
inline bool CP2P_FightingGame_GameData::has_loaded() const {
  return _internal_has_loaded();
}
inline void CP2P_FightingGame_GameData::set_has_loaded() {
  _impl_._oneof_case_[0] = kLoaded;
}
inline void CP2P_FightingGame_GameData::clear_loaded() {
  if (_internal_has_loaded()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.state_data_.loaded_;
    }
    clear_has_state_data();
  }
}
inline ::CMsgFightingGame_GameData_Loaded* CP2P_FightingGame_GameData::release_loaded() {
  // @@protoc_insertion_point(field_release:CP2P_FightingGame_GameData.loaded)
  if (_internal_has_loaded()) {
    clear_has_state_data();
    ::CMsgFightingGame_GameData_Loaded* temp = _impl_.state_data_.loaded_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.state_data_.loaded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgFightingGame_GameData_Loaded& CP2P_FightingGame_GameData::_internal_loaded() const {
  return _internal_has_loaded()
      ? *_impl_.state_data_.loaded_
      : reinterpret_cast< ::CMsgFightingGame_GameData_Loaded&>(::_CMsgFightingGame_GameData_Loaded_default_instance_);
}
inline const ::CMsgFightingGame_GameData_Loaded& CP2P_FightingGame_GameData::loaded() const {
  // @@protoc_insertion_point(field_get:CP2P_FightingGame_GameData.loaded)
  return _internal_loaded();
}
inline ::CMsgFightingGame_GameData_Loaded* CP2P_FightingGame_GameData::unsafe_arena_release_loaded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CP2P_FightingGame_GameData.loaded)
  if (_internal_has_loaded()) {
    clear_has_state_data();
    ::CMsgFightingGame_GameData_Loaded* temp = _impl_.state_data_.loaded_;
    _impl_.state_data_.loaded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CP2P_FightingGame_GameData::unsafe_arena_set_allocated_loaded(::CMsgFightingGame_GameData_Loaded* loaded) {
  clear_state_data();
  if (loaded) {
    set_has_loaded();
    _impl_.state_data_.loaded_ = loaded;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CP2P_FightingGame_GameData.loaded)
}
inline ::CMsgFightingGame_GameData_Loaded* CP2P_FightingGame_GameData::_internal_mutable_loaded() {
  if (!_internal_has_loaded()) {
    clear_state_data();
    set_has_loaded();
    _impl_.state_data_.loaded_ = CreateMaybeMessage< ::CMsgFightingGame_GameData_Loaded >(GetArenaForAllocation());
  }
  return _impl_.state_data_.loaded_;
}
inline ::CMsgFightingGame_GameData_Loaded* CP2P_FightingGame_GameData::mutable_loaded() {
  ::CMsgFightingGame_GameData_Loaded* _msg = _internal_mutable_loaded();
  // @@protoc_insertion_point(field_mutable:CP2P_FightingGame_GameData.loaded)
  return _msg;
}

inline bool CP2P_FightingGame_GameData::has_state_data() const {
  return state_data_case() != STATE_DATA_NOT_SET;
}
inline void CP2P_FightingGame_GameData::clear_has_state_data() {
  _impl_._oneof_case_[0] = STATE_DATA_NOT_SET;
}
inline CP2P_FightingGame_GameData::StateDataCase CP2P_FightingGame_GameData::state_data_case() const {
  return CP2P_FightingGame_GameData::StateDataCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CP2P_FightingGame_GameData_EState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CP2P_FightingGame_GameData_EState>() {
  return ::CP2P_FightingGame_GameData_EState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5ffighting_5fgame_5fp2p_5fmessages_2eproto
