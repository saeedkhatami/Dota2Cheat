// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_fighting_game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "dota_shared_enums.pb.h"
#include "dota_gcmessages_common.pb.h"
#include "gcsdk_gcmessages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto;
class CMsgClientToGCFightingGameAnswerChallenge;
struct CMsgClientToGCFightingGameAnswerChallengeDefaultTypeInternal;
extern CMsgClientToGCFightingGameAnswerChallengeDefaultTypeInternal _CMsgClientToGCFightingGameAnswerChallenge_default_instance_;
class CMsgClientToGCFightingGameAnswerChallengeResponse;
struct CMsgClientToGCFightingGameAnswerChallengeResponseDefaultTypeInternal;
extern CMsgClientToGCFightingGameAnswerChallengeResponseDefaultTypeInternal _CMsgClientToGCFightingGameAnswerChallengeResponse_default_instance_;
class CMsgClientToGCFightingGameCancelChallengeFriend;
struct CMsgClientToGCFightingGameCancelChallengeFriendDefaultTypeInternal;
extern CMsgClientToGCFightingGameCancelChallengeFriendDefaultTypeInternal _CMsgClientToGCFightingGameCancelChallengeFriend_default_instance_;
class CMsgClientToGCFightingGameChallengeFriend;
struct CMsgClientToGCFightingGameChallengeFriendDefaultTypeInternal;
extern CMsgClientToGCFightingGameChallengeFriendDefaultTypeInternal _CMsgClientToGCFightingGameChallengeFriend_default_instance_;
class CMsgClientToGCFightingGameChallengeFriendResponse;
struct CMsgClientToGCFightingGameChallengeFriendResponseDefaultTypeInternal;
extern CMsgClientToGCFightingGameChallengeFriendResponseDefaultTypeInternal _CMsgClientToGCFightingGameChallengeFriendResponse_default_instance_;
class CMsgGCToClientFightingGameChallenge;
struct CMsgGCToClientFightingGameChallengeDefaultTypeInternal;
extern CMsgGCToClientFightingGameChallengeDefaultTypeInternal _CMsgGCToClientFightingGameChallenge_default_instance_;
class CMsgGCToClientFightingGameChallengeCanceled;
struct CMsgGCToClientFightingGameChallengeCanceledDefaultTypeInternal;
extern CMsgGCToClientFightingGameChallengeCanceledDefaultTypeInternal _CMsgGCToClientFightingGameChallengeCanceled_default_instance_;
class CMsgGCToClientFightingGameStartMatch;
struct CMsgGCToClientFightingGameStartMatchDefaultTypeInternal;
extern CMsgGCToClientFightingGameStartMatchDefaultTypeInternal _CMsgGCToClientFightingGameStartMatch_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientToGCFightingGameAnswerChallenge* Arena::CreateMaybeMessage<::CMsgClientToGCFightingGameAnswerChallenge>(Arena*);
template<> ::CMsgClientToGCFightingGameAnswerChallengeResponse* Arena::CreateMaybeMessage<::CMsgClientToGCFightingGameAnswerChallengeResponse>(Arena*);
template<> ::CMsgClientToGCFightingGameCancelChallengeFriend* Arena::CreateMaybeMessage<::CMsgClientToGCFightingGameCancelChallengeFriend>(Arena*);
template<> ::CMsgClientToGCFightingGameChallengeFriend* Arena::CreateMaybeMessage<::CMsgClientToGCFightingGameChallengeFriend>(Arena*);
template<> ::CMsgClientToGCFightingGameChallengeFriendResponse* Arena::CreateMaybeMessage<::CMsgClientToGCFightingGameChallengeFriendResponse>(Arena*);
template<> ::CMsgGCToClientFightingGameChallenge* Arena::CreateMaybeMessage<::CMsgGCToClientFightingGameChallenge>(Arena*);
template<> ::CMsgGCToClientFightingGameChallengeCanceled* Arena::CreateMaybeMessage<::CMsgGCToClientFightingGameChallengeCanceled>(Arena*);
template<> ::CMsgGCToClientFightingGameStartMatch* Arena::CreateMaybeMessage<::CMsgGCToClientFightingGameStartMatch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgClientToGCFightingGameChallengeFriendResponse_EResponse : int {
  CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eInvalidAccountID = 5,
  CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eStillWaitingOnAnotherChallenge = 6
};
bool CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_EResponse_MIN = CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_EResponse_MAX = CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eStillWaitingOnAnotherChallenge;
constexpr int CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCFightingGameChallengeFriendResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCFightingGameChallengeFriendResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCFightingGameChallengeFriendResponse_EResponse>(
    CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse : int {
  CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eInvalidChallenge = 5
};
bool CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_EResponse_MIN = CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_EResponse_MAX = CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eInvalidChallenge;
constexpr int CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse>(
    CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_descriptor(), name, value);
}
// ===================================================================

class CMsgClientToGCFightingGameChallengeFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFightingGameChallengeFriend) */ {
 public:
  inline CMsgClientToGCFightingGameChallengeFriend() : CMsgClientToGCFightingGameChallengeFriend(nullptr) {}
  ~CMsgClientToGCFightingGameChallengeFriend() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameChallengeFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFightingGameChallengeFriend(const CMsgClientToGCFightingGameChallengeFriend& from);
  CMsgClientToGCFightingGameChallengeFriend(CMsgClientToGCFightingGameChallengeFriend&& from) noexcept
    : CMsgClientToGCFightingGameChallengeFriend() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFightingGameChallengeFriend& operator=(const CMsgClientToGCFightingGameChallengeFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFightingGameChallengeFriend& operator=(CMsgClientToGCFightingGameChallengeFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFightingGameChallengeFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFightingGameChallengeFriend* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFightingGameChallengeFriend*>(
               &_CMsgClientToGCFightingGameChallengeFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgClientToGCFightingGameChallengeFriend& a, CMsgClientToGCFightingGameChallengeFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFightingGameChallengeFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFightingGameChallengeFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFightingGameChallengeFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFightingGameChallengeFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFightingGameChallengeFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFightingGameChallengeFriend& from) {
    CMsgClientToGCFightingGameChallengeFriend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFightingGameChallengeFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFightingGameChallengeFriend";
  }
  protected:
  explicit CMsgClientToGCFightingGameChallengeFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendAccountIdFieldNumber = 1,
  };
  // optional uint32 friend_account_id = 1;
  bool has_friend_account_id() const;
  private:
  bool _internal_has_friend_account_id() const;
  public:
  void clear_friend_account_id();
  uint32_t friend_account_id() const;
  void set_friend_account_id(uint32_t value);
  private:
  uint32_t _internal_friend_account_id() const;
  void _internal_set_friend_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFightingGameChallengeFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t friend_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFightingGameChallengeFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFightingGameChallengeFriendResponse) */ {
 public:
  inline CMsgClientToGCFightingGameChallengeFriendResponse() : CMsgClientToGCFightingGameChallengeFriendResponse(nullptr) {}
  ~CMsgClientToGCFightingGameChallengeFriendResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameChallengeFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFightingGameChallengeFriendResponse(const CMsgClientToGCFightingGameChallengeFriendResponse& from);
  CMsgClientToGCFightingGameChallengeFriendResponse(CMsgClientToGCFightingGameChallengeFriendResponse&& from) noexcept
    : CMsgClientToGCFightingGameChallengeFriendResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFightingGameChallengeFriendResponse& operator=(const CMsgClientToGCFightingGameChallengeFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFightingGameChallengeFriendResponse& operator=(CMsgClientToGCFightingGameChallengeFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFightingGameChallengeFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFightingGameChallengeFriendResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFightingGameChallengeFriendResponse*>(
               &_CMsgClientToGCFightingGameChallengeFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgClientToGCFightingGameChallengeFriendResponse& a, CMsgClientToGCFightingGameChallengeFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFightingGameChallengeFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFightingGameChallengeFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFightingGameChallengeFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFightingGameChallengeFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFightingGameChallengeFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFightingGameChallengeFriendResponse& from) {
    CMsgClientToGCFightingGameChallengeFriendResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFightingGameChallengeFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFightingGameChallengeFriendResponse";
  }
  protected:
  explicit CMsgClientToGCFightingGameChallengeFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCFightingGameChallengeFriendResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eInvalidAccountID =
    CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eInvalidAccountID;
  static constexpr EResponse k_eStillWaitingOnAnotherChallenge =
    CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_k_eStillWaitingOnAnotherChallenge;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // optional .CMsgClientToGCFightingGameChallengeFriendResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse response() const;
  void set_response(::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse value);
  private:
  ::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFightingGameChallengeFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFightingGameCancelChallengeFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFightingGameCancelChallengeFriend) */ {
 public:
  inline CMsgClientToGCFightingGameCancelChallengeFriend() : CMsgClientToGCFightingGameCancelChallengeFriend(nullptr) {}
  ~CMsgClientToGCFightingGameCancelChallengeFriend() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameCancelChallengeFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFightingGameCancelChallengeFriend(const CMsgClientToGCFightingGameCancelChallengeFriend& from);
  CMsgClientToGCFightingGameCancelChallengeFriend(CMsgClientToGCFightingGameCancelChallengeFriend&& from) noexcept
    : CMsgClientToGCFightingGameCancelChallengeFriend() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFightingGameCancelChallengeFriend& operator=(const CMsgClientToGCFightingGameCancelChallengeFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFightingGameCancelChallengeFriend& operator=(CMsgClientToGCFightingGameCancelChallengeFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFightingGameCancelChallengeFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFightingGameCancelChallengeFriend* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFightingGameCancelChallengeFriend*>(
               &_CMsgClientToGCFightingGameCancelChallengeFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgClientToGCFightingGameCancelChallengeFriend& a, CMsgClientToGCFightingGameCancelChallengeFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFightingGameCancelChallengeFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFightingGameCancelChallengeFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFightingGameCancelChallengeFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFightingGameCancelChallengeFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFightingGameCancelChallengeFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFightingGameCancelChallengeFriend& from) {
    CMsgClientToGCFightingGameCancelChallengeFriend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFightingGameCancelChallengeFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFightingGameCancelChallengeFriend";
  }
  protected:
  explicit CMsgClientToGCFightingGameCancelChallengeFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendAccountIdFieldNumber = 1,
  };
  // optional uint32 friend_account_id = 1;
  bool has_friend_account_id() const;
  private:
  bool _internal_has_friend_account_id() const;
  public:
  void clear_friend_account_id();
  uint32_t friend_account_id() const;
  void set_friend_account_id(uint32_t value);
  private:
  uint32_t _internal_friend_account_id() const;
  void _internal_set_friend_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFightingGameCancelChallengeFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t friend_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFightingGameAnswerChallenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFightingGameAnswerChallenge) */ {
 public:
  inline CMsgClientToGCFightingGameAnswerChallenge() : CMsgClientToGCFightingGameAnswerChallenge(nullptr) {}
  ~CMsgClientToGCFightingGameAnswerChallenge() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameAnswerChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFightingGameAnswerChallenge(const CMsgClientToGCFightingGameAnswerChallenge& from);
  CMsgClientToGCFightingGameAnswerChallenge(CMsgClientToGCFightingGameAnswerChallenge&& from) noexcept
    : CMsgClientToGCFightingGameAnswerChallenge() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFightingGameAnswerChallenge& operator=(const CMsgClientToGCFightingGameAnswerChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFightingGameAnswerChallenge& operator=(CMsgClientToGCFightingGameAnswerChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFightingGameAnswerChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFightingGameAnswerChallenge* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFightingGameAnswerChallenge*>(
               &_CMsgClientToGCFightingGameAnswerChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgClientToGCFightingGameAnswerChallenge& a, CMsgClientToGCFightingGameAnswerChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFightingGameAnswerChallenge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFightingGameAnswerChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFightingGameAnswerChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFightingGameAnswerChallenge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFightingGameAnswerChallenge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFightingGameAnswerChallenge& from) {
    CMsgClientToGCFightingGameAnswerChallenge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFightingGameAnswerChallenge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFightingGameAnswerChallenge";
  }
  protected:
  explicit CMsgClientToGCFightingGameAnswerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengerAccountIdFieldNumber = 1,
    kAcceptFieldNumber = 2,
  };
  // optional uint32 challenger_account_id = 1;
  bool has_challenger_account_id() const;
  private:
  bool _internal_has_challenger_account_id() const;
  public:
  void clear_challenger_account_id();
  uint32_t challenger_account_id() const;
  void set_challenger_account_id(uint32_t value);
  private:
  uint32_t _internal_challenger_account_id() const;
  void _internal_set_challenger_account_id(uint32_t value);
  public:

  // optional bool accept = 2;
  bool has_accept() const;
  private:
  bool _internal_has_accept() const;
  public:
  void clear_accept();
  bool accept() const;
  void set_accept(bool value);
  private:
  bool _internal_accept() const;
  void _internal_set_accept(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFightingGameAnswerChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t challenger_account_id_;
    bool accept_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFightingGameAnswerChallengeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFightingGameAnswerChallengeResponse) */ {
 public:
  inline CMsgClientToGCFightingGameAnswerChallengeResponse() : CMsgClientToGCFightingGameAnswerChallengeResponse(nullptr) {}
  ~CMsgClientToGCFightingGameAnswerChallengeResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFightingGameAnswerChallengeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFightingGameAnswerChallengeResponse(const CMsgClientToGCFightingGameAnswerChallengeResponse& from);
  CMsgClientToGCFightingGameAnswerChallengeResponse(CMsgClientToGCFightingGameAnswerChallengeResponse&& from) noexcept
    : CMsgClientToGCFightingGameAnswerChallengeResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFightingGameAnswerChallengeResponse& operator=(const CMsgClientToGCFightingGameAnswerChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFightingGameAnswerChallengeResponse& operator=(CMsgClientToGCFightingGameAnswerChallengeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFightingGameAnswerChallengeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFightingGameAnswerChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFightingGameAnswerChallengeResponse*>(
               &_CMsgClientToGCFightingGameAnswerChallengeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgClientToGCFightingGameAnswerChallengeResponse& a, CMsgClientToGCFightingGameAnswerChallengeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFightingGameAnswerChallengeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFightingGameAnswerChallengeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFightingGameAnswerChallengeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFightingGameAnswerChallengeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFightingGameAnswerChallengeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFightingGameAnswerChallengeResponse& from) {
    CMsgClientToGCFightingGameAnswerChallengeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFightingGameAnswerChallengeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFightingGameAnswerChallengeResponse";
  }
  protected:
  explicit CMsgClientToGCFightingGameAnswerChallengeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eInvalidChallenge =
    CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_k_eInvalidChallenge;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // optional .CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse response() const;
  void set_response(::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse value);
  private:
  ::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFightingGameAnswerChallengeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientFightingGameChallenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientFightingGameChallenge) */ {
 public:
  inline CMsgGCToClientFightingGameChallenge() : CMsgGCToClientFightingGameChallenge(nullptr) {}
  ~CMsgGCToClientFightingGameChallenge() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToClientFightingGameChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientFightingGameChallenge(const CMsgGCToClientFightingGameChallenge& from);
  CMsgGCToClientFightingGameChallenge(CMsgGCToClientFightingGameChallenge&& from) noexcept
    : CMsgGCToClientFightingGameChallenge() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientFightingGameChallenge& operator=(const CMsgGCToClientFightingGameChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientFightingGameChallenge& operator=(CMsgGCToClientFightingGameChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToClientFightingGameChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientFightingGameChallenge* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientFightingGameChallenge*>(
               &_CMsgGCToClientFightingGameChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgGCToClientFightingGameChallenge& a, CMsgGCToClientFightingGameChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientFightingGameChallenge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientFightingGameChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToClientFightingGameChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToClientFightingGameChallenge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToClientFightingGameChallenge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToClientFightingGameChallenge& from) {
    CMsgGCToClientFightingGameChallenge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientFightingGameChallenge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientFightingGameChallenge";
  }
  protected:
  explicit CMsgGCToClientFightingGameChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengerAccountIdFieldNumber = 1,
  };
  // optional uint32 challenger_account_id = 1;
  bool has_challenger_account_id() const;
  private:
  bool _internal_has_challenger_account_id() const;
  public:
  void clear_challenger_account_id();
  uint32_t challenger_account_id() const;
  void set_challenger_account_id(uint32_t value);
  private:
  uint32_t _internal_challenger_account_id() const;
  void _internal_set_challenger_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToClientFightingGameChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t challenger_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientFightingGameChallengeCanceled final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientFightingGameChallengeCanceled) */ {
 public:
  inline CMsgGCToClientFightingGameChallengeCanceled() : CMsgGCToClientFightingGameChallengeCanceled(nullptr) {}
  ~CMsgGCToClientFightingGameChallengeCanceled() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToClientFightingGameChallengeCanceled(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientFightingGameChallengeCanceled(const CMsgGCToClientFightingGameChallengeCanceled& from);
  CMsgGCToClientFightingGameChallengeCanceled(CMsgGCToClientFightingGameChallengeCanceled&& from) noexcept
    : CMsgGCToClientFightingGameChallengeCanceled() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientFightingGameChallengeCanceled& operator=(const CMsgGCToClientFightingGameChallengeCanceled& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientFightingGameChallengeCanceled& operator=(CMsgGCToClientFightingGameChallengeCanceled&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToClientFightingGameChallengeCanceled& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientFightingGameChallengeCanceled* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientFightingGameChallengeCanceled*>(
               &_CMsgGCToClientFightingGameChallengeCanceled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgGCToClientFightingGameChallengeCanceled& a, CMsgGCToClientFightingGameChallengeCanceled& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientFightingGameChallengeCanceled* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientFightingGameChallengeCanceled* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToClientFightingGameChallengeCanceled* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToClientFightingGameChallengeCanceled>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToClientFightingGameChallengeCanceled& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToClientFightingGameChallengeCanceled& from) {
    CMsgGCToClientFightingGameChallengeCanceled::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientFightingGameChallengeCanceled* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientFightingGameChallengeCanceled";
  }
  protected:
  explicit CMsgGCToClientFightingGameChallengeCanceled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengerAccountIdFieldNumber = 1,
    kResponderAccountIdFieldNumber = 2,
  };
  // optional uint32 challenger_account_id = 1;
  bool has_challenger_account_id() const;
  private:
  bool _internal_has_challenger_account_id() const;
  public:
  void clear_challenger_account_id();
  uint32_t challenger_account_id() const;
  void set_challenger_account_id(uint32_t value);
  private:
  uint32_t _internal_challenger_account_id() const;
  void _internal_set_challenger_account_id(uint32_t value);
  public:

  // optional uint32 responder_account_id = 2;
  bool has_responder_account_id() const;
  private:
  bool _internal_has_responder_account_id() const;
  public:
  void clear_responder_account_id();
  uint32_t responder_account_id() const;
  void set_responder_account_id(uint32_t value);
  private:
  uint32_t _internal_responder_account_id() const;
  void _internal_set_responder_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToClientFightingGameChallengeCanceled)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t challenger_account_id_;
    uint32_t responder_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientFightingGameStartMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientFightingGameStartMatch) */ {
 public:
  inline CMsgGCToClientFightingGameStartMatch() : CMsgGCToClientFightingGameStartMatch(nullptr) {}
  ~CMsgGCToClientFightingGameStartMatch() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToClientFightingGameStartMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientFightingGameStartMatch(const CMsgGCToClientFightingGameStartMatch& from);
  CMsgGCToClientFightingGameStartMatch(CMsgGCToClientFightingGameStartMatch&& from) noexcept
    : CMsgGCToClientFightingGameStartMatch() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientFightingGameStartMatch& operator=(const CMsgGCToClientFightingGameStartMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientFightingGameStartMatch& operator=(CMsgGCToClientFightingGameStartMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToClientFightingGameStartMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientFightingGameStartMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientFightingGameStartMatch*>(
               &_CMsgGCToClientFightingGameStartMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgGCToClientFightingGameStartMatch& a, CMsgGCToClientFightingGameStartMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientFightingGameStartMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientFightingGameStartMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToClientFightingGameStartMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToClientFightingGameStartMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToClientFightingGameStartMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToClientFightingGameStartMatch& from) {
    CMsgGCToClientFightingGameStartMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientFightingGameStartMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientFightingGameStartMatch";
  }
  protected:
  explicit CMsgGCToClientFightingGameStartMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengerAccountIdFieldNumber = 1,
    kResponderAccountIdFieldNumber = 2,
  };
  // optional uint32 challenger_account_id = 1;
  bool has_challenger_account_id() const;
  private:
  bool _internal_has_challenger_account_id() const;
  public:
  void clear_challenger_account_id();
  uint32_t challenger_account_id() const;
  void set_challenger_account_id(uint32_t value);
  private:
  uint32_t _internal_challenger_account_id() const;
  void _internal_set_challenger_account_id(uint32_t value);
  public:

  // optional uint32 responder_account_id = 2;
  bool has_responder_account_id() const;
  private:
  bool _internal_has_responder_account_id() const;
  public:
  void clear_responder_account_id();
  uint32_t responder_account_id() const;
  void set_responder_account_id(uint32_t value);
  private:
  uint32_t _internal_responder_account_id() const;
  void _internal_set_responder_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToClientFightingGameStartMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t challenger_account_id_;
    uint32_t responder_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientToGCFightingGameChallengeFriend

// optional uint32 friend_account_id = 1;
inline bool CMsgClientToGCFightingGameChallengeFriend::_internal_has_friend_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCFightingGameChallengeFriend::has_friend_account_id() const {
  return _internal_has_friend_account_id();
}
inline void CMsgClientToGCFightingGameChallengeFriend::clear_friend_account_id() {
  _impl_.friend_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCFightingGameChallengeFriend::_internal_friend_account_id() const {
  return _impl_.friend_account_id_;
}
inline uint32_t CMsgClientToGCFightingGameChallengeFriend::friend_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFightingGameChallengeFriend.friend_account_id)
  return _internal_friend_account_id();
}
inline void CMsgClientToGCFightingGameChallengeFriend::_internal_set_friend_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.friend_account_id_ = value;
}
inline void CMsgClientToGCFightingGameChallengeFriend::set_friend_account_id(uint32_t value) {
  _internal_set_friend_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFightingGameChallengeFriend.friend_account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCFightingGameChallengeFriendResponse

// optional .CMsgClientToGCFightingGameChallengeFriendResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCFightingGameChallengeFriendResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCFightingGameChallengeFriendResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCFightingGameChallengeFriendResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse CMsgClientToGCFightingGameChallengeFriendResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFightingGameChallengeFriendResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCFightingGameChallengeFriendResponse::_internal_set_response(::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse value) {
  assert(::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCFightingGameChallengeFriendResponse::set_response(::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFightingGameChallengeFriendResponse.response)
}

// -------------------------------------------------------------------

// CMsgClientToGCFightingGameCancelChallengeFriend

// optional uint32 friend_account_id = 1;
inline bool CMsgClientToGCFightingGameCancelChallengeFriend::_internal_has_friend_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCFightingGameCancelChallengeFriend::has_friend_account_id() const {
  return _internal_has_friend_account_id();
}
inline void CMsgClientToGCFightingGameCancelChallengeFriend::clear_friend_account_id() {
  _impl_.friend_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCFightingGameCancelChallengeFriend::_internal_friend_account_id() const {
  return _impl_.friend_account_id_;
}
inline uint32_t CMsgClientToGCFightingGameCancelChallengeFriend::friend_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFightingGameCancelChallengeFriend.friend_account_id)
  return _internal_friend_account_id();
}
inline void CMsgClientToGCFightingGameCancelChallengeFriend::_internal_set_friend_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.friend_account_id_ = value;
}
inline void CMsgClientToGCFightingGameCancelChallengeFriend::set_friend_account_id(uint32_t value) {
  _internal_set_friend_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFightingGameCancelChallengeFriend.friend_account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCFightingGameAnswerChallenge

// optional uint32 challenger_account_id = 1;
inline bool CMsgClientToGCFightingGameAnswerChallenge::_internal_has_challenger_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCFightingGameAnswerChallenge::has_challenger_account_id() const {
  return _internal_has_challenger_account_id();
}
inline void CMsgClientToGCFightingGameAnswerChallenge::clear_challenger_account_id() {
  _impl_.challenger_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCFightingGameAnswerChallenge::_internal_challenger_account_id() const {
  return _impl_.challenger_account_id_;
}
inline uint32_t CMsgClientToGCFightingGameAnswerChallenge::challenger_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFightingGameAnswerChallenge.challenger_account_id)
  return _internal_challenger_account_id();
}
inline void CMsgClientToGCFightingGameAnswerChallenge::_internal_set_challenger_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.challenger_account_id_ = value;
}
inline void CMsgClientToGCFightingGameAnswerChallenge::set_challenger_account_id(uint32_t value) {
  _internal_set_challenger_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFightingGameAnswerChallenge.challenger_account_id)
}

// optional bool accept = 2;
inline bool CMsgClientToGCFightingGameAnswerChallenge::_internal_has_accept() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCFightingGameAnswerChallenge::has_accept() const {
  return _internal_has_accept();
}
inline void CMsgClientToGCFightingGameAnswerChallenge::clear_accept() {
  _impl_.accept_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgClientToGCFightingGameAnswerChallenge::_internal_accept() const {
  return _impl_.accept_;
}
inline bool CMsgClientToGCFightingGameAnswerChallenge::accept() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFightingGameAnswerChallenge.accept)
  return _internal_accept();
}
inline void CMsgClientToGCFightingGameAnswerChallenge::_internal_set_accept(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.accept_ = value;
}
inline void CMsgClientToGCFightingGameAnswerChallenge::set_accept(bool value) {
  _internal_set_accept(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFightingGameAnswerChallenge.accept)
}

// -------------------------------------------------------------------

// CMsgClientToGCFightingGameAnswerChallengeResponse

// optional .CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCFightingGameAnswerChallengeResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCFightingGameAnswerChallengeResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCFightingGameAnswerChallengeResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse CMsgClientToGCFightingGameAnswerChallengeResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse CMsgClientToGCFightingGameAnswerChallengeResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFightingGameAnswerChallengeResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCFightingGameAnswerChallengeResponse::_internal_set_response(::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse value) {
  assert(::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCFightingGameAnswerChallengeResponse::set_response(::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFightingGameAnswerChallengeResponse.response)
}

// -------------------------------------------------------------------

// CMsgGCToClientFightingGameChallenge

// optional uint32 challenger_account_id = 1;
inline bool CMsgGCToClientFightingGameChallenge::_internal_has_challenger_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToClientFightingGameChallenge::has_challenger_account_id() const {
  return _internal_has_challenger_account_id();
}
inline void CMsgGCToClientFightingGameChallenge::clear_challenger_account_id() {
  _impl_.challenger_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCToClientFightingGameChallenge::_internal_challenger_account_id() const {
  return _impl_.challenger_account_id_;
}
inline uint32_t CMsgGCToClientFightingGameChallenge::challenger_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFightingGameChallenge.challenger_account_id)
  return _internal_challenger_account_id();
}
inline void CMsgGCToClientFightingGameChallenge::_internal_set_challenger_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.challenger_account_id_ = value;
}
inline void CMsgGCToClientFightingGameChallenge::set_challenger_account_id(uint32_t value) {
  _internal_set_challenger_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFightingGameChallenge.challenger_account_id)
}

// -------------------------------------------------------------------

// CMsgGCToClientFightingGameChallengeCanceled

// optional uint32 challenger_account_id = 1;
inline bool CMsgGCToClientFightingGameChallengeCanceled::_internal_has_challenger_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToClientFightingGameChallengeCanceled::has_challenger_account_id() const {
  return _internal_has_challenger_account_id();
}
inline void CMsgGCToClientFightingGameChallengeCanceled::clear_challenger_account_id() {
  _impl_.challenger_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCToClientFightingGameChallengeCanceled::_internal_challenger_account_id() const {
  return _impl_.challenger_account_id_;
}
inline uint32_t CMsgGCToClientFightingGameChallengeCanceled::challenger_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFightingGameChallengeCanceled.challenger_account_id)
  return _internal_challenger_account_id();
}
inline void CMsgGCToClientFightingGameChallengeCanceled::_internal_set_challenger_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.challenger_account_id_ = value;
}
inline void CMsgGCToClientFightingGameChallengeCanceled::set_challenger_account_id(uint32_t value) {
  _internal_set_challenger_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFightingGameChallengeCanceled.challenger_account_id)
}

// optional uint32 responder_account_id = 2;
inline bool CMsgGCToClientFightingGameChallengeCanceled::_internal_has_responder_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToClientFightingGameChallengeCanceled::has_responder_account_id() const {
  return _internal_has_responder_account_id();
}
inline void CMsgGCToClientFightingGameChallengeCanceled::clear_responder_account_id() {
  _impl_.responder_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCToClientFightingGameChallengeCanceled::_internal_responder_account_id() const {
  return _impl_.responder_account_id_;
}
inline uint32_t CMsgGCToClientFightingGameChallengeCanceled::responder_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFightingGameChallengeCanceled.responder_account_id)
  return _internal_responder_account_id();
}
inline void CMsgGCToClientFightingGameChallengeCanceled::_internal_set_responder_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.responder_account_id_ = value;
}
inline void CMsgGCToClientFightingGameChallengeCanceled::set_responder_account_id(uint32_t value) {
  _internal_set_responder_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFightingGameChallengeCanceled.responder_account_id)
}

// -------------------------------------------------------------------

// CMsgGCToClientFightingGameStartMatch

// optional uint32 challenger_account_id = 1;
inline bool CMsgGCToClientFightingGameStartMatch::_internal_has_challenger_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToClientFightingGameStartMatch::has_challenger_account_id() const {
  return _internal_has_challenger_account_id();
}
inline void CMsgGCToClientFightingGameStartMatch::clear_challenger_account_id() {
  _impl_.challenger_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCToClientFightingGameStartMatch::_internal_challenger_account_id() const {
  return _impl_.challenger_account_id_;
}
inline uint32_t CMsgGCToClientFightingGameStartMatch::challenger_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFightingGameStartMatch.challenger_account_id)
  return _internal_challenger_account_id();
}
inline void CMsgGCToClientFightingGameStartMatch::_internal_set_challenger_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.challenger_account_id_ = value;
}
inline void CMsgGCToClientFightingGameStartMatch::set_challenger_account_id(uint32_t value) {
  _internal_set_challenger_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFightingGameStartMatch.challenger_account_id)
}

// optional uint32 responder_account_id = 2;
inline bool CMsgGCToClientFightingGameStartMatch::_internal_has_responder_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToClientFightingGameStartMatch::has_responder_account_id() const {
  return _internal_has_responder_account_id();
}
inline void CMsgGCToClientFightingGameStartMatch::clear_responder_account_id() {
  _impl_.responder_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCToClientFightingGameStartMatch::_internal_responder_account_id() const {
  return _impl_.responder_account_id_;
}
inline uint32_t CMsgGCToClientFightingGameStartMatch::responder_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFightingGameStartMatch.responder_account_id)
  return _internal_responder_account_id();
}
inline void CMsgGCToClientFightingGameStartMatch::_internal_set_responder_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.responder_account_id_ = value;
}
inline void CMsgGCToClientFightingGameStartMatch::set_responder_account_id(uint32_t value) {
  _internal_set_responder_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFightingGameStartMatch.responder_account_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse>() {
  return ::CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse>() {
  return ::CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5ffighting_5fgame_2eproto
